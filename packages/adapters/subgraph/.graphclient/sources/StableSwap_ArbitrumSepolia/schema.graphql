schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum arbitrumsepolia_swap_Aggregation_interval {
  hour
  day
}

scalar arbitrumsepolia_swap_BigDecimal

scalar BigInt

input arbitrumsepolia_swap_BlockChangedFilter {
  number_gte: Int!
}

input arbitrumsepolia_swap_Block_height {
  hash: arbitrumsepolia_swap_Bytes
  number: Int
  number_gte: Int
}

scalar arbitrumsepolia_swap_Bytes

"""
8 bytes signed integer

"""
scalar arbitrumsepolia_swap_Int8

type arbitrumsepolia_swap_LpAccount {
  id: ID!
  address: arbitrumsepolia_swap_Bytes!
  balances(skip: Int = 0, first: Int = 100, orderBy: arbitrumsepolia_swap_LpAccountBalance_orderBy, orderDirection: arbitrumsepolia_swap_OrderDirection, where: arbitrumsepolia_swap_LpAccountBalance_filter): [arbitrumsepolia_swap_LpAccountBalance!]!
}

type arbitrumsepolia_swap_LpAccountBalance {
  id: ID!
  account: arbitrumsepolia_swap_LpAccount!
  token: arbitrumsepolia_swap_LpToken!
  amount: arbitrumsepolia_swap_BigDecimal!
  block: BigInt
  modified: BigInt
  transaction: arbitrumsepolia_swap_Bytes
}

input arbitrumsepolia_swap_LpAccountBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: arbitrumsepolia_swap_LpAccount_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: arbitrumsepolia_swap_LpToken_filter
  amount: arbitrumsepolia_swap_BigDecimal
  amount_not: arbitrumsepolia_swap_BigDecimal
  amount_gt: arbitrumsepolia_swap_BigDecimal
  amount_lt: arbitrumsepolia_swap_BigDecimal
  amount_gte: arbitrumsepolia_swap_BigDecimal
  amount_lte: arbitrumsepolia_swap_BigDecimal
  amount_in: [arbitrumsepolia_swap_BigDecimal!]
  amount_not_in: [arbitrumsepolia_swap_BigDecimal!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  modified: BigInt
  modified_not: BigInt
  modified_gt: BigInt
  modified_lt: BigInt
  modified_gte: BigInt
  modified_lte: BigInt
  modified_in: [BigInt!]
  modified_not_in: [BigInt!]
  transaction: arbitrumsepolia_swap_Bytes
  transaction_not: arbitrumsepolia_swap_Bytes
  transaction_gt: arbitrumsepolia_swap_Bytes
  transaction_lt: arbitrumsepolia_swap_Bytes
  transaction_gte: arbitrumsepolia_swap_Bytes
  transaction_lte: arbitrumsepolia_swap_Bytes
  transaction_in: [arbitrumsepolia_swap_Bytes!]
  transaction_not_in: [arbitrumsepolia_swap_Bytes!]
  transaction_contains: arbitrumsepolia_swap_Bytes
  transaction_not_contains: arbitrumsepolia_swap_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_LpAccountBalance_filter]
  or: [arbitrumsepolia_swap_LpAccountBalance_filter]
}

enum arbitrumsepolia_swap_LpAccountBalance_orderBy {
  id
  account
  account__id
  account__address
  token
  token__id
  token__address
  token__decimals
  token__name
  token__symbol
  token__totalSupply
  amount
  block
  modified
  transaction
}

input arbitrumsepolia_swap_LpAccount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: arbitrumsepolia_swap_Bytes
  address_not: arbitrumsepolia_swap_Bytes
  address_gt: arbitrumsepolia_swap_Bytes
  address_lt: arbitrumsepolia_swap_Bytes
  address_gte: arbitrumsepolia_swap_Bytes
  address_lte: arbitrumsepolia_swap_Bytes
  address_in: [arbitrumsepolia_swap_Bytes!]
  address_not_in: [arbitrumsepolia_swap_Bytes!]
  address_contains: arbitrumsepolia_swap_Bytes
  address_not_contains: arbitrumsepolia_swap_Bytes
  balances_: arbitrumsepolia_swap_LpAccountBalance_filter
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_LpAccount_filter]
  or: [arbitrumsepolia_swap_LpAccount_filter]
}

enum arbitrumsepolia_swap_LpAccount_orderBy {
  id
  address
  balances
}

type arbitrumsepolia_swap_LpToken {
  id: ID!
  address: arbitrumsepolia_swap_Bytes!
  stableSwap: arbitrumsepolia_swap_StableSwap!
  decimals: Int!
  name: String!
  symbol: String!
  totalSupply: arbitrumsepolia_swap_BigDecimal!
  events(skip: Int = 0, first: Int = 100, orderBy: arbitrumsepolia_swap_LpTokenEvent_orderBy, orderDirection: arbitrumsepolia_swap_OrderDirection, where: arbitrumsepolia_swap_LpTokenEvent_filter): [arbitrumsepolia_swap_LpTokenEvent!]!
}

interface arbitrumsepolia_swap_LpTokenEvent {
  id: ID!
  token: arbitrumsepolia_swap_LpToken!
  amount: arbitrumsepolia_swap_BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumsepolia_swap_Bytes!
  nonce: BigInt!
}

input arbitrumsepolia_swap_LpTokenEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: arbitrumsepolia_swap_LpToken_filter
  amount: arbitrumsepolia_swap_BigDecimal
  amount_not: arbitrumsepolia_swap_BigDecimal
  amount_gt: arbitrumsepolia_swap_BigDecimal
  amount_lt: arbitrumsepolia_swap_BigDecimal
  amount_gte: arbitrumsepolia_swap_BigDecimal
  amount_lte: arbitrumsepolia_swap_BigDecimal
  amount_in: [arbitrumsepolia_swap_BigDecimal!]
  amount_not_in: [arbitrumsepolia_swap_BigDecimal!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumsepolia_swap_Bytes
  transaction_not: arbitrumsepolia_swap_Bytes
  transaction_gt: arbitrumsepolia_swap_Bytes
  transaction_lt: arbitrumsepolia_swap_Bytes
  transaction_gte: arbitrumsepolia_swap_Bytes
  transaction_lte: arbitrumsepolia_swap_Bytes
  transaction_in: [arbitrumsepolia_swap_Bytes!]
  transaction_not_in: [arbitrumsepolia_swap_Bytes!]
  transaction_contains: arbitrumsepolia_swap_Bytes
  transaction_not_contains: arbitrumsepolia_swap_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_LpTokenEvent_filter]
  or: [arbitrumsepolia_swap_LpTokenEvent_filter]
}

enum arbitrumsepolia_swap_LpTokenEvent_orderBy {
  id
  token
  token__id
  token__address
  token__decimals
  token__name
  token__symbol
  token__totalSupply
  amount
  block
  timestamp
  transaction
  nonce
}

input arbitrumsepolia_swap_LpToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: arbitrumsepolia_swap_Bytes
  address_not: arbitrumsepolia_swap_Bytes
  address_gt: arbitrumsepolia_swap_Bytes
  address_lt: arbitrumsepolia_swap_Bytes
  address_gte: arbitrumsepolia_swap_Bytes
  address_lte: arbitrumsepolia_swap_Bytes
  address_in: [arbitrumsepolia_swap_Bytes!]
  address_not_in: [arbitrumsepolia_swap_Bytes!]
  address_contains: arbitrumsepolia_swap_Bytes
  address_not_contains: arbitrumsepolia_swap_Bytes
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumsepolia_swap_StableSwap_filter
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  totalSupply: arbitrumsepolia_swap_BigDecimal
  totalSupply_not: arbitrumsepolia_swap_BigDecimal
  totalSupply_gt: arbitrumsepolia_swap_BigDecimal
  totalSupply_lt: arbitrumsepolia_swap_BigDecimal
  totalSupply_gte: arbitrumsepolia_swap_BigDecimal
  totalSupply_lte: arbitrumsepolia_swap_BigDecimal
  totalSupply_in: [arbitrumsepolia_swap_BigDecimal!]
  totalSupply_not_in: [arbitrumsepolia_swap_BigDecimal!]
  events_: arbitrumsepolia_swap_LpTokenEvent_filter
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_LpToken_filter]
  or: [arbitrumsepolia_swap_LpToken_filter]
}

enum arbitrumsepolia_swap_LpToken_orderBy {
  id
  address
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  stableSwap__virtualPrice
  stableSwap__invariant
  stableSwap__lpTokenSupply
  decimals
  name
  symbol
  totalSupply
  events
}

type arbitrumsepolia_swap_LpTransferEvent implements arbitrumsepolia_swap_LpTokenEvent {
  id: ID!
  token: arbitrumsepolia_swap_LpToken!
  amount: arbitrumsepolia_swap_BigDecimal!
  from: arbitrumsepolia_swap_Bytes!
  to: arbitrumsepolia_swap_Bytes!
  fromBalance: arbitrumsepolia_swap_BigDecimal!
  toBalance: arbitrumsepolia_swap_BigDecimal!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumsepolia_swap_Bytes!
  nonce: BigInt!
}

input arbitrumsepolia_swap_LpTransferEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: arbitrumsepolia_swap_LpToken_filter
  amount: arbitrumsepolia_swap_BigDecimal
  amount_not: arbitrumsepolia_swap_BigDecimal
  amount_gt: arbitrumsepolia_swap_BigDecimal
  amount_lt: arbitrumsepolia_swap_BigDecimal
  amount_gte: arbitrumsepolia_swap_BigDecimal
  amount_lte: arbitrumsepolia_swap_BigDecimal
  amount_in: [arbitrumsepolia_swap_BigDecimal!]
  amount_not_in: [arbitrumsepolia_swap_BigDecimal!]
  from: arbitrumsepolia_swap_Bytes
  from_not: arbitrumsepolia_swap_Bytes
  from_gt: arbitrumsepolia_swap_Bytes
  from_lt: arbitrumsepolia_swap_Bytes
  from_gte: arbitrumsepolia_swap_Bytes
  from_lte: arbitrumsepolia_swap_Bytes
  from_in: [arbitrumsepolia_swap_Bytes!]
  from_not_in: [arbitrumsepolia_swap_Bytes!]
  from_contains: arbitrumsepolia_swap_Bytes
  from_not_contains: arbitrumsepolia_swap_Bytes
  to: arbitrumsepolia_swap_Bytes
  to_not: arbitrumsepolia_swap_Bytes
  to_gt: arbitrumsepolia_swap_Bytes
  to_lt: arbitrumsepolia_swap_Bytes
  to_gte: arbitrumsepolia_swap_Bytes
  to_lte: arbitrumsepolia_swap_Bytes
  to_in: [arbitrumsepolia_swap_Bytes!]
  to_not_in: [arbitrumsepolia_swap_Bytes!]
  to_contains: arbitrumsepolia_swap_Bytes
  to_not_contains: arbitrumsepolia_swap_Bytes
  fromBalance: arbitrumsepolia_swap_BigDecimal
  fromBalance_not: arbitrumsepolia_swap_BigDecimal
  fromBalance_gt: arbitrumsepolia_swap_BigDecimal
  fromBalance_lt: arbitrumsepolia_swap_BigDecimal
  fromBalance_gte: arbitrumsepolia_swap_BigDecimal
  fromBalance_lte: arbitrumsepolia_swap_BigDecimal
  fromBalance_in: [arbitrumsepolia_swap_BigDecimal!]
  fromBalance_not_in: [arbitrumsepolia_swap_BigDecimal!]
  toBalance: arbitrumsepolia_swap_BigDecimal
  toBalance_not: arbitrumsepolia_swap_BigDecimal
  toBalance_gt: arbitrumsepolia_swap_BigDecimal
  toBalance_lt: arbitrumsepolia_swap_BigDecimal
  toBalance_gte: arbitrumsepolia_swap_BigDecimal
  toBalance_lte: arbitrumsepolia_swap_BigDecimal
  toBalance_in: [arbitrumsepolia_swap_BigDecimal!]
  toBalance_not_in: [arbitrumsepolia_swap_BigDecimal!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumsepolia_swap_Bytes
  transaction_not: arbitrumsepolia_swap_Bytes
  transaction_gt: arbitrumsepolia_swap_Bytes
  transaction_lt: arbitrumsepolia_swap_Bytes
  transaction_gte: arbitrumsepolia_swap_Bytes
  transaction_lte: arbitrumsepolia_swap_Bytes
  transaction_in: [arbitrumsepolia_swap_Bytes!]
  transaction_not_in: [arbitrumsepolia_swap_Bytes!]
  transaction_contains: arbitrumsepolia_swap_Bytes
  transaction_not_contains: arbitrumsepolia_swap_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_LpTransferEvent_filter]
  or: [arbitrumsepolia_swap_LpTransferEvent_filter]
}

enum arbitrumsepolia_swap_LpTransferEvent_orderBy {
  id
  token
  token__id
  token__address
  token__decimals
  token__name
  token__symbol
  token__totalSupply
  amount
  from
  to
  fromBalance
  toBalance
  block
  timestamp
  transaction
  nonce
}

"""Defines the order direction, either ascending or descending"""
enum arbitrumsepolia_swap_OrderDirection {
  asc
  desc
}

type arbitrumsepolia_swap_PooledToken {
  id: ID!
  asset: arbitrumsepolia_swap_Bytes!
}

input arbitrumsepolia_swap_PooledToken_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asset: arbitrumsepolia_swap_Bytes
  asset_not: arbitrumsepolia_swap_Bytes
  asset_gt: arbitrumsepolia_swap_Bytes
  asset_lt: arbitrumsepolia_swap_Bytes
  asset_gte: arbitrumsepolia_swap_Bytes
  asset_lte: arbitrumsepolia_swap_Bytes
  asset_in: [arbitrumsepolia_swap_Bytes!]
  asset_not_in: [arbitrumsepolia_swap_Bytes!]
  asset_contains: arbitrumsepolia_swap_Bytes
  asset_not_contains: arbitrumsepolia_swap_Bytes
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_PooledToken_filter]
  or: [arbitrumsepolia_swap_PooledToken_filter]
}

enum arbitrumsepolia_swap_PooledToken_orderBy {
  id
  asset
}

type Query {
  arbitrumsepolia_swap_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SystemInfo
  arbitrumsepolia_swap_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SystemInfo_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SystemInfo!]!
  arbitrumsepolia_swap_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_PooledToken
  arbitrumsepolia_swap_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_PooledToken_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_PooledToken!]!
  arbitrumsepolia_swap_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwap
  arbitrumsepolia_swap_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwap_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwap!]!
  arbitrumsepolia_swap_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwapAddLiquidityEvent
  arbitrumsepolia_swap_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwapAddLiquidityEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwapAddLiquidityEvent!]!
  arbitrumsepolia_swap_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent
  arbitrumsepolia_swap_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent!]!
  arbitrumsepolia_swap_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwapExchange
  arbitrumsepolia_swap_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwapExchange_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwapExchange!]!
  arbitrumsepolia_swap_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SwapDailyVolume
  arbitrumsepolia_swap_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SwapDailyVolume_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SwapDailyVolume!]!
  arbitrumsepolia_swap_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SwapHourlyVolume
  arbitrumsepolia_swap_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SwapHourlyVolume_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SwapHourlyVolume!]!
  arbitrumsepolia_swap_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SwapWeeklyVolume
  arbitrumsepolia_swap_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SwapWeeklyVolume_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SwapWeeklyVolume!]!
  arbitrumsepolia_swap_lpAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpAccount
  arbitrumsepolia_swap_lpAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpAccount_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpAccount!]!
  arbitrumsepolia_swap_lpAccountBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpAccountBalance
  arbitrumsepolia_swap_lpAccountBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpAccountBalance_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpAccountBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpAccountBalance!]!
  arbitrumsepolia_swap_lpToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpToken
  arbitrumsepolia_swap_lpTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpToken_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpToken!]!
  arbitrumsepolia_swap_lpTransferEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpTransferEvent
  arbitrumsepolia_swap_lpTransferEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpTransferEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpTransferEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpTransferEvent!]!
  arbitrumsepolia_swap_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwapEvent
  arbitrumsepolia_swap_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwapEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwapEvent!]!
  arbitrumsepolia_swap_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SwapTradeVolume
  arbitrumsepolia_swap_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SwapTradeVolume_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SwapTradeVolume!]!
  arbitrumsepolia_swap_lpTokenEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpTokenEvent
  arbitrumsepolia_swap_lpTokenEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpTokenEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpTokenEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpTokenEvent!]!
  """Access to subgraph metadata"""
  arbitrumsepolia_swap__meta(block: arbitrumsepolia_swap_Block_height): arbitrumsepolia_swap__Meta_
}

type arbitrumsepolia_swap_StableSwap {
  id: ID!
  isActive: Boolean
  key: arbitrumsepolia_swap_Bytes!
  canonicalId: arbitrumsepolia_swap_Bytes
  domain: BigInt
  swapPool: arbitrumsepolia_swap_Bytes
  lpToken: arbitrumsepolia_swap_Bytes
  initialA: BigInt
  futureA: BigInt
  initialATime: BigInt
  futureATime: BigInt
  swapFee: BigInt
  adminFee: BigInt
  pooledTokens: [arbitrumsepolia_swap_Bytes!]!
  tokenPrecisionMultipliers: [BigInt!]!
  balances: [BigInt!]!
  adminFees: [BigInt!]!
  virtualPrice: BigInt!
  invariant: BigInt!
  lpTokenSupply: BigInt!
  events(skip: Int = 0, first: Int = 100, orderBy: arbitrumsepolia_swap_StableSwapEvent_orderBy, orderDirection: arbitrumsepolia_swap_OrderDirection, where: arbitrumsepolia_swap_StableSwapEvent_filter): [arbitrumsepolia_swap_StableSwapEvent!]
  exchanges(skip: Int = 0, first: Int = 100, orderBy: arbitrumsepolia_swap_StableSwapExchange_orderBy, orderDirection: arbitrumsepolia_swap_OrderDirection, where: arbitrumsepolia_swap_StableSwapExchange_filter): [arbitrumsepolia_swap_StableSwapExchange!]
  hourlyVolumes(skip: Int = 0, first: Int = 100, orderBy: arbitrumsepolia_swap_SwapHourlyVolume_orderBy, orderDirection: arbitrumsepolia_swap_OrderDirection, where: arbitrumsepolia_swap_SwapHourlyVolume_filter): [arbitrumsepolia_swap_SwapHourlyVolume!]
  dailyVolumes(skip: Int = 0, first: Int = 100, orderBy: arbitrumsepolia_swap_SwapDailyVolume_orderBy, orderDirection: arbitrumsepolia_swap_OrderDirection, where: arbitrumsepolia_swap_SwapDailyVolume_filter): [arbitrumsepolia_swap_SwapDailyVolume!]
  weeklyVolumes(skip: Int = 0, first: Int = 100, orderBy: arbitrumsepolia_swap_SwapWeeklyVolume_orderBy, orderDirection: arbitrumsepolia_swap_OrderDirection, where: arbitrumsepolia_swap_SwapWeeklyVolume_filter): [arbitrumsepolia_swap_SwapWeeklyVolume!]
}

type arbitrumsepolia_swap_StableSwapAddLiquidityEvent implements arbitrumsepolia_swap_StableSwapEvent {
  id: ID!
  stableSwap: arbitrumsepolia_swap_StableSwap!
  provider: arbitrumsepolia_swap_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]!
  invariant: BigInt
  lpTokenSupply: BigInt!
  lpTokenAmount: BigInt!
  balances: [BigInt!]!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumsepolia_swap_Bytes!
  nonce: BigInt!
}

input arbitrumsepolia_swap_StableSwapAddLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumsepolia_swap_StableSwap_filter
  provider: arbitrumsepolia_swap_Bytes
  provider_not: arbitrumsepolia_swap_Bytes
  provider_gt: arbitrumsepolia_swap_Bytes
  provider_lt: arbitrumsepolia_swap_Bytes
  provider_gte: arbitrumsepolia_swap_Bytes
  provider_lte: arbitrumsepolia_swap_Bytes
  provider_in: [arbitrumsepolia_swap_Bytes!]
  provider_not_in: [arbitrumsepolia_swap_Bytes!]
  provider_contains: arbitrumsepolia_swap_Bytes
  provider_not_contains: arbitrumsepolia_swap_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  lpTokenAmount: BigInt
  lpTokenAmount_not: BigInt
  lpTokenAmount_gt: BigInt
  lpTokenAmount_lt: BigInt
  lpTokenAmount_gte: BigInt
  lpTokenAmount_lte: BigInt
  lpTokenAmount_in: [BigInt!]
  lpTokenAmount_not_in: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumsepolia_swap_Bytes
  transaction_not: arbitrumsepolia_swap_Bytes
  transaction_gt: arbitrumsepolia_swap_Bytes
  transaction_lt: arbitrumsepolia_swap_Bytes
  transaction_gte: arbitrumsepolia_swap_Bytes
  transaction_lte: arbitrumsepolia_swap_Bytes
  transaction_in: [arbitrumsepolia_swap_Bytes!]
  transaction_not_in: [arbitrumsepolia_swap_Bytes!]
  transaction_contains: arbitrumsepolia_swap_Bytes
  transaction_not_contains: arbitrumsepolia_swap_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_StableSwapAddLiquidityEvent_filter]
  or: [arbitrumsepolia_swap_StableSwapAddLiquidityEvent_filter]
}

enum arbitrumsepolia_swap_StableSwapAddLiquidityEvent_orderBy {
  id
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  stableSwap__virtualPrice
  stableSwap__invariant
  stableSwap__lpTokenSupply
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  lpTokenAmount
  balances
  block
  timestamp
  transaction
  nonce
}

interface arbitrumsepolia_swap_StableSwapEvent {
  id: ID!
  stableSwap: arbitrumsepolia_swap_StableSwap!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumsepolia_swap_Bytes!
  nonce: BigInt!
}

input arbitrumsepolia_swap_StableSwapEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumsepolia_swap_StableSwap_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumsepolia_swap_Bytes
  transaction_not: arbitrumsepolia_swap_Bytes
  transaction_gt: arbitrumsepolia_swap_Bytes
  transaction_lt: arbitrumsepolia_swap_Bytes
  transaction_gte: arbitrumsepolia_swap_Bytes
  transaction_lte: arbitrumsepolia_swap_Bytes
  transaction_in: [arbitrumsepolia_swap_Bytes!]
  transaction_not_in: [arbitrumsepolia_swap_Bytes!]
  transaction_contains: arbitrumsepolia_swap_Bytes
  transaction_not_contains: arbitrumsepolia_swap_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_StableSwapEvent_filter]
  or: [arbitrumsepolia_swap_StableSwapEvent_filter]
}

enum arbitrumsepolia_swap_StableSwapEvent_orderBy {
  id
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  stableSwap__virtualPrice
  stableSwap__invariant
  stableSwap__lpTokenSupply
  block
  timestamp
  transaction
  nonce
}

type arbitrumsepolia_swap_StableSwapExchange {
  id: ID!
  stableSwap: arbitrumsepolia_swap_StableSwap!
  buyer: arbitrumsepolia_swap_Bytes!
  boughtId: BigInt!
  tokensBought: BigInt!
  soldId: BigInt!
  tokensSold: BigInt!
  balances: [BigInt!]!
  fee: BigInt!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumsepolia_swap_Bytes!
  nonce: BigInt!
}

input arbitrumsepolia_swap_StableSwapExchange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumsepolia_swap_StableSwap_filter
  buyer: arbitrumsepolia_swap_Bytes
  buyer_not: arbitrumsepolia_swap_Bytes
  buyer_gt: arbitrumsepolia_swap_Bytes
  buyer_lt: arbitrumsepolia_swap_Bytes
  buyer_gte: arbitrumsepolia_swap_Bytes
  buyer_lte: arbitrumsepolia_swap_Bytes
  buyer_in: [arbitrumsepolia_swap_Bytes!]
  buyer_not_in: [arbitrumsepolia_swap_Bytes!]
  buyer_contains: arbitrumsepolia_swap_Bytes
  buyer_not_contains: arbitrumsepolia_swap_Bytes
  boughtId: BigInt
  boughtId_not: BigInt
  boughtId_gt: BigInt
  boughtId_lt: BigInt
  boughtId_gte: BigInt
  boughtId_lte: BigInt
  boughtId_in: [BigInt!]
  boughtId_not_in: [BigInt!]
  tokensBought: BigInt
  tokensBought_not: BigInt
  tokensBought_gt: BigInt
  tokensBought_lt: BigInt
  tokensBought_gte: BigInt
  tokensBought_lte: BigInt
  tokensBought_in: [BigInt!]
  tokensBought_not_in: [BigInt!]
  soldId: BigInt
  soldId_not: BigInt
  soldId_gt: BigInt
  soldId_lt: BigInt
  soldId_gte: BigInt
  soldId_lte: BigInt
  soldId_in: [BigInt!]
  soldId_not_in: [BigInt!]
  tokensSold: BigInt
  tokensSold_not: BigInt
  tokensSold_gt: BigInt
  tokensSold_lt: BigInt
  tokensSold_gte: BigInt
  tokensSold_lte: BigInt
  tokensSold_in: [BigInt!]
  tokensSold_not_in: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumsepolia_swap_Bytes
  transaction_not: arbitrumsepolia_swap_Bytes
  transaction_gt: arbitrumsepolia_swap_Bytes
  transaction_lt: arbitrumsepolia_swap_Bytes
  transaction_gte: arbitrumsepolia_swap_Bytes
  transaction_lte: arbitrumsepolia_swap_Bytes
  transaction_in: [arbitrumsepolia_swap_Bytes!]
  transaction_not_in: [arbitrumsepolia_swap_Bytes!]
  transaction_contains: arbitrumsepolia_swap_Bytes
  transaction_not_contains: arbitrumsepolia_swap_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_StableSwapExchange_filter]
  or: [arbitrumsepolia_swap_StableSwapExchange_filter]
}

enum arbitrumsepolia_swap_StableSwapExchange_orderBy {
  id
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  stableSwap__virtualPrice
  stableSwap__invariant
  stableSwap__lpTokenSupply
  buyer
  boughtId
  tokensBought
  soldId
  tokensSold
  balances
  fee
  block
  timestamp
  transaction
  nonce
}

type arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent implements arbitrumsepolia_swap_StableSwapEvent {
  id: ID!
  stableSwap: arbitrumsepolia_swap_StableSwap!
  provider: arbitrumsepolia_swap_Bytes!
  tokenAmounts: [BigInt!]!
  fees: [BigInt!]
  invariant: BigInt
  lpTokenSupply: BigInt!
  lpTokenAmount: BigInt!
  balances: [BigInt!]!
  block: BigInt!
  timestamp: BigInt!
  transaction: arbitrumsepolia_swap_Bytes!
  nonce: BigInt!
}

input arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumsepolia_swap_StableSwap_filter
  provider: arbitrumsepolia_swap_Bytes
  provider_not: arbitrumsepolia_swap_Bytes
  provider_gt: arbitrumsepolia_swap_Bytes
  provider_lt: arbitrumsepolia_swap_Bytes
  provider_gte: arbitrumsepolia_swap_Bytes
  provider_lte: arbitrumsepolia_swap_Bytes
  provider_in: [arbitrumsepolia_swap_Bytes!]
  provider_not_in: [arbitrumsepolia_swap_Bytes!]
  provider_contains: arbitrumsepolia_swap_Bytes
  provider_not_contains: arbitrumsepolia_swap_Bytes
  tokenAmounts: [BigInt!]
  tokenAmounts_not: [BigInt!]
  tokenAmounts_contains: [BigInt!]
  tokenAmounts_contains_nocase: [BigInt!]
  tokenAmounts_not_contains: [BigInt!]
  tokenAmounts_not_contains_nocase: [BigInt!]
  fees: [BigInt!]
  fees_not: [BigInt!]
  fees_contains: [BigInt!]
  fees_contains_nocase: [BigInt!]
  fees_not_contains: [BigInt!]
  fees_not_contains_nocase: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  lpTokenAmount: BigInt
  lpTokenAmount_not: BigInt
  lpTokenAmount_gt: BigInt
  lpTokenAmount_lt: BigInt
  lpTokenAmount_gte: BigInt
  lpTokenAmount_lte: BigInt
  lpTokenAmount_in: [BigInt!]
  lpTokenAmount_not_in: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: arbitrumsepolia_swap_Bytes
  transaction_not: arbitrumsepolia_swap_Bytes
  transaction_gt: arbitrumsepolia_swap_Bytes
  transaction_lt: arbitrumsepolia_swap_Bytes
  transaction_gte: arbitrumsepolia_swap_Bytes
  transaction_lte: arbitrumsepolia_swap_Bytes
  transaction_in: [arbitrumsepolia_swap_Bytes!]
  transaction_not_in: [arbitrumsepolia_swap_Bytes!]
  transaction_contains: arbitrumsepolia_swap_Bytes
  transaction_not_contains: arbitrumsepolia_swap_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent_filter]
  or: [arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent_filter]
}

enum arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent_orderBy {
  id
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  stableSwap__virtualPrice
  stableSwap__invariant
  stableSwap__lpTokenSupply
  provider
  tokenAmounts
  fees
  invariant
  lpTokenSupply
  lpTokenAmount
  balances
  block
  timestamp
  transaction
  nonce
}

input arbitrumsepolia_swap_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  key: arbitrumsepolia_swap_Bytes
  key_not: arbitrumsepolia_swap_Bytes
  key_gt: arbitrumsepolia_swap_Bytes
  key_lt: arbitrumsepolia_swap_Bytes
  key_gte: arbitrumsepolia_swap_Bytes
  key_lte: arbitrumsepolia_swap_Bytes
  key_in: [arbitrumsepolia_swap_Bytes!]
  key_not_in: [arbitrumsepolia_swap_Bytes!]
  key_contains: arbitrumsepolia_swap_Bytes
  key_not_contains: arbitrumsepolia_swap_Bytes
  canonicalId: arbitrumsepolia_swap_Bytes
  canonicalId_not: arbitrumsepolia_swap_Bytes
  canonicalId_gt: arbitrumsepolia_swap_Bytes
  canonicalId_lt: arbitrumsepolia_swap_Bytes
  canonicalId_gte: arbitrumsepolia_swap_Bytes
  canonicalId_lte: arbitrumsepolia_swap_Bytes
  canonicalId_in: [arbitrumsepolia_swap_Bytes!]
  canonicalId_not_in: [arbitrumsepolia_swap_Bytes!]
  canonicalId_contains: arbitrumsepolia_swap_Bytes
  canonicalId_not_contains: arbitrumsepolia_swap_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: arbitrumsepolia_swap_Bytes
  swapPool_not: arbitrumsepolia_swap_Bytes
  swapPool_gt: arbitrumsepolia_swap_Bytes
  swapPool_lt: arbitrumsepolia_swap_Bytes
  swapPool_gte: arbitrumsepolia_swap_Bytes
  swapPool_lte: arbitrumsepolia_swap_Bytes
  swapPool_in: [arbitrumsepolia_swap_Bytes!]
  swapPool_not_in: [arbitrumsepolia_swap_Bytes!]
  swapPool_contains: arbitrumsepolia_swap_Bytes
  swapPool_not_contains: arbitrumsepolia_swap_Bytes
  lpToken: arbitrumsepolia_swap_Bytes
  lpToken_not: arbitrumsepolia_swap_Bytes
  lpToken_gt: arbitrumsepolia_swap_Bytes
  lpToken_lt: arbitrumsepolia_swap_Bytes
  lpToken_gte: arbitrumsepolia_swap_Bytes
  lpToken_lte: arbitrumsepolia_swap_Bytes
  lpToken_in: [arbitrumsepolia_swap_Bytes!]
  lpToken_not_in: [arbitrumsepolia_swap_Bytes!]
  lpToken_contains: arbitrumsepolia_swap_Bytes
  lpToken_not_contains: arbitrumsepolia_swap_Bytes
  initialA: BigInt
  initialA_not: BigInt
  initialA_gt: BigInt
  initialA_lt: BigInt
  initialA_gte: BigInt
  initialA_lte: BigInt
  initialA_in: [BigInt!]
  initialA_not_in: [BigInt!]
  futureA: BigInt
  futureA_not: BigInt
  futureA_gt: BigInt
  futureA_lt: BigInt
  futureA_gte: BigInt
  futureA_lte: BigInt
  futureA_in: [BigInt!]
  futureA_not_in: [BigInt!]
  initialATime: BigInt
  initialATime_not: BigInt
  initialATime_gt: BigInt
  initialATime_lt: BigInt
  initialATime_gte: BigInt
  initialATime_lte: BigInt
  initialATime_in: [BigInt!]
  initialATime_not_in: [BigInt!]
  futureATime: BigInt
  futureATime_not: BigInt
  futureATime_gt: BigInt
  futureATime_lt: BigInt
  futureATime_gte: BigInt
  futureATime_lte: BigInt
  futureATime_in: [BigInt!]
  futureATime_not_in: [BigInt!]
  swapFee: BigInt
  swapFee_not: BigInt
  swapFee_gt: BigInt
  swapFee_lt: BigInt
  swapFee_gte: BigInt
  swapFee_lte: BigInt
  swapFee_in: [BigInt!]
  swapFee_not_in: [BigInt!]
  adminFee: BigInt
  adminFee_not: BigInt
  adminFee_gt: BigInt
  adminFee_lt: BigInt
  adminFee_gte: BigInt
  adminFee_lte: BigInt
  adminFee_in: [BigInt!]
  adminFee_not_in: [BigInt!]
  pooledTokens: [arbitrumsepolia_swap_Bytes!]
  pooledTokens_not: [arbitrumsepolia_swap_Bytes!]
  pooledTokens_contains: [arbitrumsepolia_swap_Bytes!]
  pooledTokens_contains_nocase: [arbitrumsepolia_swap_Bytes!]
  pooledTokens_not_contains: [arbitrumsepolia_swap_Bytes!]
  pooledTokens_not_contains_nocase: [arbitrumsepolia_swap_Bytes!]
  tokenPrecisionMultipliers: [BigInt!]
  tokenPrecisionMultipliers_not: [BigInt!]
  tokenPrecisionMultipliers_contains: [BigInt!]
  tokenPrecisionMultipliers_contains_nocase: [BigInt!]
  tokenPrecisionMultipliers_not_contains: [BigInt!]
  tokenPrecisionMultipliers_not_contains_nocase: [BigInt!]
  balances: [BigInt!]
  balances_not: [BigInt!]
  balances_contains: [BigInt!]
  balances_contains_nocase: [BigInt!]
  balances_not_contains: [BigInt!]
  balances_not_contains_nocase: [BigInt!]
  adminFees: [BigInt!]
  adminFees_not: [BigInt!]
  adminFees_contains: [BigInt!]
  adminFees_contains_nocase: [BigInt!]
  adminFees_not_contains: [BigInt!]
  adminFees_not_contains_nocase: [BigInt!]
  virtualPrice: BigInt
  virtualPrice_not: BigInt
  virtualPrice_gt: BigInt
  virtualPrice_lt: BigInt
  virtualPrice_gte: BigInt
  virtualPrice_lte: BigInt
  virtualPrice_in: [BigInt!]
  virtualPrice_not_in: [BigInt!]
  invariant: BigInt
  invariant_not: BigInt
  invariant_gt: BigInt
  invariant_lt: BigInt
  invariant_gte: BigInt
  invariant_lte: BigInt
  invariant_in: [BigInt!]
  invariant_not_in: [BigInt!]
  lpTokenSupply: BigInt
  lpTokenSupply_not: BigInt
  lpTokenSupply_gt: BigInt
  lpTokenSupply_lt: BigInt
  lpTokenSupply_gte: BigInt
  lpTokenSupply_lte: BigInt
  lpTokenSupply_in: [BigInt!]
  lpTokenSupply_not_in: [BigInt!]
  events_: arbitrumsepolia_swap_StableSwapEvent_filter
  exchanges_: arbitrumsepolia_swap_StableSwapExchange_filter
  hourlyVolumes_: arbitrumsepolia_swap_SwapHourlyVolume_filter
  dailyVolumes_: arbitrumsepolia_swap_SwapDailyVolume_filter
  weeklyVolumes_: arbitrumsepolia_swap_SwapWeeklyVolume_filter
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_StableSwap_filter]
  or: [arbitrumsepolia_swap_StableSwap_filter]
}

enum arbitrumsepolia_swap_StableSwap_orderBy {
  id
  isActive
  key
  canonicalId
  domain
  swapPool
  lpToken
  initialA
  futureA
  initialATime
  futureATime
  swapFee
  adminFee
  pooledTokens
  tokenPrecisionMultipliers
  balances
  adminFees
  virtualPrice
  invariant
  lpTokenSupply
  events
  exchanges
  hourlyVolumes
  dailyVolumes
  weeklyVolumes
}

type Subscription {
  arbitrumsepolia_swap_systemInfo(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SystemInfo
  arbitrumsepolia_swap_systemInfos(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SystemInfo_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SystemInfo_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SystemInfo!]!
  arbitrumsepolia_swap_pooledToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_PooledToken
  arbitrumsepolia_swap_pooledTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_PooledToken_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_PooledToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_PooledToken!]!
  arbitrumsepolia_swap_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwap
  arbitrumsepolia_swap_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwap_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwap!]!
  arbitrumsepolia_swap_stableSwapAddLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwapAddLiquidityEvent
  arbitrumsepolia_swap_stableSwapAddLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwapAddLiquidityEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwapAddLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwapAddLiquidityEvent!]!
  arbitrumsepolia_swap_stableSwapRemoveLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent
  arbitrumsepolia_swap_stableSwapRemoveLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwapRemoveLiquidityEvent!]!
  arbitrumsepolia_swap_stableSwapExchange(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwapExchange
  arbitrumsepolia_swap_stableSwapExchanges(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwapExchange_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwapExchange_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwapExchange!]!
  arbitrumsepolia_swap_swapDailyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SwapDailyVolume
  arbitrumsepolia_swap_swapDailyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SwapDailyVolume_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SwapDailyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SwapDailyVolume!]!
  arbitrumsepolia_swap_swapHourlyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SwapHourlyVolume
  arbitrumsepolia_swap_swapHourlyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SwapHourlyVolume_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SwapHourlyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SwapHourlyVolume!]!
  arbitrumsepolia_swap_swapWeeklyVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SwapWeeklyVolume
  arbitrumsepolia_swap_swapWeeklyVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SwapWeeklyVolume_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SwapWeeklyVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SwapWeeklyVolume!]!
  arbitrumsepolia_swap_lpAccount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpAccount
  arbitrumsepolia_swap_lpAccounts(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpAccount_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpAccount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpAccount!]!
  arbitrumsepolia_swap_lpAccountBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpAccountBalance
  arbitrumsepolia_swap_lpAccountBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpAccountBalance_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpAccountBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpAccountBalance!]!
  arbitrumsepolia_swap_lpToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpToken
  arbitrumsepolia_swap_lpTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpToken_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpToken!]!
  arbitrumsepolia_swap_lpTransferEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpTransferEvent
  arbitrumsepolia_swap_lpTransferEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpTransferEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpTransferEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpTransferEvent!]!
  arbitrumsepolia_swap_stableSwapEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_StableSwapEvent
  arbitrumsepolia_swap_stableSwapEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_StableSwapEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_StableSwapEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_StableSwapEvent!]!
  arbitrumsepolia_swap_swapTradeVolume(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_SwapTradeVolume
  arbitrumsepolia_swap_swapTradeVolumes(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_SwapTradeVolume_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_SwapTradeVolume_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_SwapTradeVolume!]!
  arbitrumsepolia_swap_lpTokenEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): arbitrumsepolia_swap_LpTokenEvent
  arbitrumsepolia_swap_lpTokenEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: arbitrumsepolia_swap_LpTokenEvent_orderBy
    orderDirection: arbitrumsepolia_swap_OrderDirection
    where: arbitrumsepolia_swap_LpTokenEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: arbitrumsepolia_swap_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [arbitrumsepolia_swap_LpTokenEvent!]!
  """Access to subgraph metadata"""
  arbitrumsepolia_swap__meta(block: arbitrumsepolia_swap_Block_height): arbitrumsepolia_swap__Meta_
}

type arbitrumsepolia_swap_SwapDailyVolume implements arbitrumsepolia_swap_SwapTradeVolume {
  id: ID!
  stableSwap: arbitrumsepolia_swap_StableSwap!
  timestamp: BigInt!
  volume: arbitrumsepolia_swap_BigDecimal!
}

input arbitrumsepolia_swap_SwapDailyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumsepolia_swap_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumsepolia_swap_BigDecimal
  volume_not: arbitrumsepolia_swap_BigDecimal
  volume_gt: arbitrumsepolia_swap_BigDecimal
  volume_lt: arbitrumsepolia_swap_BigDecimal
  volume_gte: arbitrumsepolia_swap_BigDecimal
  volume_lte: arbitrumsepolia_swap_BigDecimal
  volume_in: [arbitrumsepolia_swap_BigDecimal!]
  volume_not_in: [arbitrumsepolia_swap_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_SwapDailyVolume_filter]
  or: [arbitrumsepolia_swap_SwapDailyVolume_filter]
}

enum arbitrumsepolia_swap_SwapDailyVolume_orderBy {
  id
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  stableSwap__virtualPrice
  stableSwap__invariant
  stableSwap__lpTokenSupply
  timestamp
  volume
}

type arbitrumsepolia_swap_SwapHourlyVolume implements arbitrumsepolia_swap_SwapTradeVolume {
  id: ID!
  stableSwap: arbitrumsepolia_swap_StableSwap!
  timestamp: BigInt!
  volume: arbitrumsepolia_swap_BigDecimal!
}

input arbitrumsepolia_swap_SwapHourlyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumsepolia_swap_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumsepolia_swap_BigDecimal
  volume_not: arbitrumsepolia_swap_BigDecimal
  volume_gt: arbitrumsepolia_swap_BigDecimal
  volume_lt: arbitrumsepolia_swap_BigDecimal
  volume_gte: arbitrumsepolia_swap_BigDecimal
  volume_lte: arbitrumsepolia_swap_BigDecimal
  volume_in: [arbitrumsepolia_swap_BigDecimal!]
  volume_not_in: [arbitrumsepolia_swap_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_SwapHourlyVolume_filter]
  or: [arbitrumsepolia_swap_SwapHourlyVolume_filter]
}

enum arbitrumsepolia_swap_SwapHourlyVolume_orderBy {
  id
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  stableSwap__virtualPrice
  stableSwap__invariant
  stableSwap__lpTokenSupply
  timestamp
  volume
}

interface arbitrumsepolia_swap_SwapTradeVolume {
  stableSwap: arbitrumsepolia_swap_StableSwap!
  timestamp: BigInt!
  volume: arbitrumsepolia_swap_BigDecimal!
}

input arbitrumsepolia_swap_SwapTradeVolume_filter {
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumsepolia_swap_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumsepolia_swap_BigDecimal
  volume_not: arbitrumsepolia_swap_BigDecimal
  volume_gt: arbitrumsepolia_swap_BigDecimal
  volume_lt: arbitrumsepolia_swap_BigDecimal
  volume_gte: arbitrumsepolia_swap_BigDecimal
  volume_lte: arbitrumsepolia_swap_BigDecimal
  volume_in: [arbitrumsepolia_swap_BigDecimal!]
  volume_not_in: [arbitrumsepolia_swap_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_SwapTradeVolume_filter]
  or: [arbitrumsepolia_swap_SwapTradeVolume_filter]
}

enum arbitrumsepolia_swap_SwapTradeVolume_orderBy {
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  stableSwap__virtualPrice
  stableSwap__invariant
  stableSwap__lpTokenSupply
  timestamp
  volume
}

type arbitrumsepolia_swap_SwapWeeklyVolume implements arbitrumsepolia_swap_SwapTradeVolume {
  id: ID!
  stableSwap: arbitrumsepolia_swap_StableSwap!
  timestamp: BigInt!
  volume: arbitrumsepolia_swap_BigDecimal!
}

input arbitrumsepolia_swap_SwapWeeklyVolume_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  stableSwap: String
  stableSwap_not: String
  stableSwap_gt: String
  stableSwap_lt: String
  stableSwap_gte: String
  stableSwap_lte: String
  stableSwap_in: [String!]
  stableSwap_not_in: [String!]
  stableSwap_contains: String
  stableSwap_contains_nocase: String
  stableSwap_not_contains: String
  stableSwap_not_contains_nocase: String
  stableSwap_starts_with: String
  stableSwap_starts_with_nocase: String
  stableSwap_not_starts_with: String
  stableSwap_not_starts_with_nocase: String
  stableSwap_ends_with: String
  stableSwap_ends_with_nocase: String
  stableSwap_not_ends_with: String
  stableSwap_not_ends_with_nocase: String
  stableSwap_: arbitrumsepolia_swap_StableSwap_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  volume: arbitrumsepolia_swap_BigDecimal
  volume_not: arbitrumsepolia_swap_BigDecimal
  volume_gt: arbitrumsepolia_swap_BigDecimal
  volume_lt: arbitrumsepolia_swap_BigDecimal
  volume_gte: arbitrumsepolia_swap_BigDecimal
  volume_lte: arbitrumsepolia_swap_BigDecimal
  volume_in: [arbitrumsepolia_swap_BigDecimal!]
  volume_not_in: [arbitrumsepolia_swap_BigDecimal!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_SwapWeeklyVolume_filter]
  or: [arbitrumsepolia_swap_SwapWeeklyVolume_filter]
}

enum arbitrumsepolia_swap_SwapWeeklyVolume_orderBy {
  id
  stableSwap
  stableSwap__id
  stableSwap__isActive
  stableSwap__key
  stableSwap__canonicalId
  stableSwap__domain
  stableSwap__swapPool
  stableSwap__lpToken
  stableSwap__initialA
  stableSwap__futureA
  stableSwap__initialATime
  stableSwap__futureATime
  stableSwap__swapFee
  stableSwap__adminFee
  stableSwap__virtualPrice
  stableSwap__invariant
  stableSwap__lpTokenSupply
  timestamp
  volume
}

type arbitrumsepolia_swap_SystemInfo {
  id: ID!
  exchangeCount: BigInt!
  swapCount: BigInt!
}

input arbitrumsepolia_swap_SystemInfo_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  exchangeCount: BigInt
  exchangeCount_not: BigInt
  exchangeCount_gt: BigInt
  exchangeCount_lt: BigInt
  exchangeCount_gte: BigInt
  exchangeCount_lte: BigInt
  exchangeCount_in: [BigInt!]
  exchangeCount_not_in: [BigInt!]
  swapCount: BigInt
  swapCount_not: BigInt
  swapCount_gt: BigInt
  swapCount_lt: BigInt
  swapCount_gte: BigInt
  swapCount_lte: BigInt
  swapCount_in: [BigInt!]
  swapCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: arbitrumsepolia_swap_BlockChangedFilter
  and: [arbitrumsepolia_swap_SystemInfo_filter]
  or: [arbitrumsepolia_swap_SystemInfo_filter]
}

enum arbitrumsepolia_swap_SystemInfo_orderBy {
  id
  exchangeCount
  swapCount
}

type arbitrumsepolia_swap__Block_ {
  """The hash of the block"""
  hash: arbitrumsepolia_swap_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: arbitrumsepolia_swap_Bytes
}

"""The type for the top-level _meta field"""
type arbitrumsepolia_swap__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: arbitrumsepolia_swap__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}