schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type localmainnet_AggregateRootSavedSlow {
  id: ID!
  aggregateRoot: localmainnet_Bytes!
  count: BigInt!
  aggregatedRoots: [localmainnet_Bytes!]
  rootTimestamp: BigInt!
}

input localmainnet_AggregateRootSavedSlow_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: localmainnet_Bytes
  aggregateRoot_not: localmainnet_Bytes
  aggregateRoot_gt: localmainnet_Bytes
  aggregateRoot_lt: localmainnet_Bytes
  aggregateRoot_gte: localmainnet_Bytes
  aggregateRoot_lte: localmainnet_Bytes
  aggregateRoot_in: [localmainnet_Bytes!]
  aggregateRoot_not_in: [localmainnet_Bytes!]
  aggregateRoot_contains: localmainnet_Bytes
  aggregateRoot_not_contains: localmainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  aggregatedRoots: [localmainnet_Bytes!]
  aggregatedRoots_not: [localmainnet_Bytes!]
  aggregatedRoots_contains: [localmainnet_Bytes!]
  aggregatedRoots_contains_nocase: [localmainnet_Bytes!]
  aggregatedRoots_not_contains: [localmainnet_Bytes!]
  aggregatedRoots_not_contains_nocase: [localmainnet_Bytes!]
  rootTimestamp: BigInt
  rootTimestamp_not: BigInt
  rootTimestamp_gt: BigInt
  rootTimestamp_lt: BigInt
  rootTimestamp_gte: BigInt
  rootTimestamp_lte: BigInt
  rootTimestamp_in: [BigInt!]
  rootTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_AggregateRootSavedSlow_filter]
  or: [localmainnet_AggregateRootSavedSlow_filter]
}

enum localmainnet_AggregateRootSavedSlow_orderBy {
  id
  aggregateRoot
  count
  aggregatedRoots
  rootTimestamp
}

type localmainnet_AggregatedMessageRoot {
  id: ID!
  index: BigInt!
  receivedRoot: localmainnet_Bytes!
  domain: BigInt
  blockNumber: BigInt
}

input localmainnet_AggregatedMessageRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  receivedRoot: localmainnet_Bytes
  receivedRoot_not: localmainnet_Bytes
  receivedRoot_gt: localmainnet_Bytes
  receivedRoot_lt: localmainnet_Bytes
  receivedRoot_gte: localmainnet_Bytes
  receivedRoot_lte: localmainnet_Bytes
  receivedRoot_in: [localmainnet_Bytes!]
  receivedRoot_not_in: [localmainnet_Bytes!]
  receivedRoot_contains: localmainnet_Bytes
  receivedRoot_not_contains: localmainnet_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_AggregatedMessageRoot_filter]
  or: [localmainnet_AggregatedMessageRoot_filter]
}

enum localmainnet_AggregatedMessageRoot_orderBy {
  id
  index
  receivedRoot
  domain
  blockNumber
}

enum localmainnet_Aggregation_interval {
  hour
  day
}

type localmainnet_ArbitrumConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_ArbitrumConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_ArbitrumConnectorMeta_filter]
  or: [localmainnet_ArbitrumConnectorMeta_filter]
}

enum localmainnet_ArbitrumConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type localmainnet_AvalancheConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_AvalancheConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_AvalancheConnectorMeta_filter]
  or: [localmainnet_AvalancheConnectorMeta_filter]
}

enum localmainnet_AvalancheConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type localmainnet_BaseConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_BaseConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_BaseConnectorMeta_filter]
  or: [localmainnet_BaseConnectorMeta_filter]
}

enum localmainnet_BaseConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar localmainnet_BigDecimal

scalar BigInt

input localmainnet_BlockChangedFilter {
  number_gte: Int!
}

input localmainnet_Block_height {
  hash: localmainnet_Bytes
  number: Int
  number_gte: Int
}

type localmainnet_BnbConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_BnbConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_BnbConnectorMeta_filter]
  or: [localmainnet_BnbConnectorMeta_filter]
}

enum localmainnet_BnbConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar localmainnet_Bytes

type localmainnet_GnosisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_GnosisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_GnosisConnectorMeta_filter]
  or: [localmainnet_GnosisConnectorMeta_filter]
}

enum localmainnet_GnosisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type localmainnet_HubDomain {
  id: ID!
  domain: BigInt
}

input localmainnet_HubDomain_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_HubDomain_filter]
  or: [localmainnet_HubDomain_filter]
}

enum localmainnet_HubDomain_orderBy {
  id
  domain
}

type localmainnet_HubOptimisticRootFinalized {
  id: ID!
  aggregateRoot: localmainnet_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input localmainnet_HubOptimisticRootFinalized_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: localmainnet_Bytes
  aggregateRoot_not: localmainnet_Bytes
  aggregateRoot_gt: localmainnet_Bytes
  aggregateRoot_lt: localmainnet_Bytes
  aggregateRoot_gte: localmainnet_Bytes
  aggregateRoot_lte: localmainnet_Bytes
  aggregateRoot_in: [localmainnet_Bytes!]
  aggregateRoot_not_in: [localmainnet_Bytes!]
  aggregateRoot_contains: localmainnet_Bytes
  aggregateRoot_not_contains: localmainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_HubOptimisticRootFinalized_filter]
  or: [localmainnet_HubOptimisticRootFinalized_filter]
}

enum localmainnet_HubOptimisticRootFinalized_orderBy {
  id
  aggregateRoot
  timestamp
  blockNumber
}

"""
8 bytes signed integer

"""
scalar localmainnet_Int8

type localmainnet_LineaConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_LineaConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_LineaConnectorMeta_filter]
  or: [localmainnet_LineaConnectorMeta_filter]
}

enum localmainnet_LineaConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type localmainnet_MantleConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_MantleConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_MantleConnectorMeta_filter]
  or: [localmainnet_MantleConnectorMeta_filter]
}

enum localmainnet_MantleConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type localmainnet_MetisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_MetisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_MetisConnectorMeta_filter]
  or: [localmainnet_MetisConnectorMeta_filter]
}

enum localmainnet_MetisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type localmainnet_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_OptimismConnectorMeta_filter]
  or: [localmainnet_OptimismConnectorMeta_filter]
}

enum localmainnet_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type localmainnet_OptimisticRootPropagated {
  id: ID!
  aggregateRoot: localmainnet_Bytes!
  domainsHash: localmainnet_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input localmainnet_OptimisticRootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: localmainnet_Bytes
  aggregateRoot_not: localmainnet_Bytes
  aggregateRoot_gt: localmainnet_Bytes
  aggregateRoot_lt: localmainnet_Bytes
  aggregateRoot_gte: localmainnet_Bytes
  aggregateRoot_lte: localmainnet_Bytes
  aggregateRoot_in: [localmainnet_Bytes!]
  aggregateRoot_not_in: [localmainnet_Bytes!]
  aggregateRoot_contains: localmainnet_Bytes
  aggregateRoot_not_contains: localmainnet_Bytes
  domainsHash: localmainnet_Bytes
  domainsHash_not: localmainnet_Bytes
  domainsHash_gt: localmainnet_Bytes
  domainsHash_lt: localmainnet_Bytes
  domainsHash_gte: localmainnet_Bytes
  domainsHash_lte: localmainnet_Bytes
  domainsHash_in: [localmainnet_Bytes!]
  domainsHash_not_in: [localmainnet_Bytes!]
  domainsHash_contains: localmainnet_Bytes
  domainsHash_not_contains: localmainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_OptimisticRootPropagated_filter]
  or: [localmainnet_OptimisticRootPropagated_filter]
}

enum localmainnet_OptimisticRootPropagated_orderBy {
  id
  aggregateRoot
  domainsHash
  timestamp
  blockNumber
}

type localmainnet_OptimisticRootProposed {
  id: ID!
  disputeCliff: BigInt!
  aggregateRoot: localmainnet_Bytes!
  snapshotsRoots: [localmainnet_Bytes!]
  domains: [BigInt!]
  baseAggregateRoot: localmainnet_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input localmainnet_OptimisticRootProposed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  disputeCliff: BigInt
  disputeCliff_not: BigInt
  disputeCliff_gt: BigInt
  disputeCliff_lt: BigInt
  disputeCliff_gte: BigInt
  disputeCliff_lte: BigInt
  disputeCliff_in: [BigInt!]
  disputeCliff_not_in: [BigInt!]
  aggregateRoot: localmainnet_Bytes
  aggregateRoot_not: localmainnet_Bytes
  aggregateRoot_gt: localmainnet_Bytes
  aggregateRoot_lt: localmainnet_Bytes
  aggregateRoot_gte: localmainnet_Bytes
  aggregateRoot_lte: localmainnet_Bytes
  aggregateRoot_in: [localmainnet_Bytes!]
  aggregateRoot_not_in: [localmainnet_Bytes!]
  aggregateRoot_contains: localmainnet_Bytes
  aggregateRoot_not_contains: localmainnet_Bytes
  snapshotsRoots: [localmainnet_Bytes!]
  snapshotsRoots_not: [localmainnet_Bytes!]
  snapshotsRoots_contains: [localmainnet_Bytes!]
  snapshotsRoots_contains_nocase: [localmainnet_Bytes!]
  snapshotsRoots_not_contains: [localmainnet_Bytes!]
  snapshotsRoots_not_contains_nocase: [localmainnet_Bytes!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  baseAggregateRoot: localmainnet_Bytes
  baseAggregateRoot_not: localmainnet_Bytes
  baseAggregateRoot_gt: localmainnet_Bytes
  baseAggregateRoot_lt: localmainnet_Bytes
  baseAggregateRoot_gte: localmainnet_Bytes
  baseAggregateRoot_lte: localmainnet_Bytes
  baseAggregateRoot_in: [localmainnet_Bytes!]
  baseAggregateRoot_not_in: [localmainnet_Bytes!]
  baseAggregateRoot_contains: localmainnet_Bytes
  baseAggregateRoot_not_contains: localmainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_OptimisticRootProposed_filter]
  or: [localmainnet_OptimisticRootProposed_filter]
}

enum localmainnet_OptimisticRootProposed_orderBy {
  id
  disputeCliff
  aggregateRoot
  snapshotsRoots
  domains
  baseAggregateRoot
  timestamp
  blockNumber
}

"""Defines the order direction, either ascending or descending"""
enum localmainnet_OrderDirection {
  asc
  desc
}

type localmainnet_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_PolygonConnectorMeta_filter]
  or: [localmainnet_PolygonConnectorMeta_filter]
}

enum localmainnet_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type localmainnet_PolygonZkConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_PolygonZkConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_PolygonZkConnectorMeta_filter]
  or: [localmainnet_PolygonZkConnectorMeta_filter]
}

enum localmainnet_PolygonZkConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Query {
  localmainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootAggregated
  localmainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootAggregated_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootAggregated!]!
  localmainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootPropagated
  localmainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootPropagated_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootPropagated!]!
  localmainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_AggregatedMessageRoot
  localmainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_AggregatedMessageRoot_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_AggregatedMessageRoot!]!
  localmainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootManagerMeta
  localmainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootManagerMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootManagerMeta!]!
  localmainnet_rootManagerMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootManagerMode
  localmainnet_rootManagerModes(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootManagerMode_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootManagerMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootManagerMode!]!
  localmainnet_optimisticRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_OptimisticRootProposed
  localmainnet_optimisticRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_OptimisticRootProposed_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_OptimisticRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_OptimisticRootProposed!]!
  localmainnet_hubOptimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_HubOptimisticRootFinalized
  localmainnet_hubOptimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_HubOptimisticRootFinalized_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_HubOptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_HubOptimisticRootFinalized!]!
  localmainnet_optimisticRootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_OptimisticRootPropagated
  localmainnet_optimisticRootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_OptimisticRootPropagated_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_OptimisticRootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_OptimisticRootPropagated!]!
  localmainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_PolygonConnectorMeta
  localmainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_PolygonConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_PolygonConnectorMeta!]!
  localmainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_OptimismConnectorMeta
  localmainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_OptimismConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_OptimismConnectorMeta!]!
  localmainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_BnbConnectorMeta
  localmainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_BnbConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_BnbConnectorMeta!]!
  localmainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_ArbitrumConnectorMeta
  localmainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_ArbitrumConnectorMeta!]!
  localmainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_GnosisConnectorMeta
  localmainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_GnosisConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_GnosisConnectorMeta!]!
  localmainnet_lineaConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_LineaConnectorMeta
  localmainnet_lineaConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_LineaConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_LineaConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_LineaConnectorMeta!]!
  localmainnet_metisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_MetisConnectorMeta
  localmainnet_metisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_MetisConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_MetisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_MetisConnectorMeta!]!
  localmainnet_mantleConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_MantleConnectorMeta
  localmainnet_mantleConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_MantleConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_MantleConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_MantleConnectorMeta!]!
  localmainnet_avalancheConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_AvalancheConnectorMeta
  localmainnet_avalancheConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_AvalancheConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_AvalancheConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_AvalancheConnectorMeta!]!
  localmainnet_baseConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_BaseConnectorMeta
  localmainnet_baseConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_BaseConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_BaseConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_BaseConnectorMeta!]!
  localmainnet_polygonZkConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_PolygonZkConnectorMeta
  localmainnet_polygonZkConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_PolygonZkConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_PolygonZkConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_PolygonZkConnectorMeta!]!
  localmainnet_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_ZkSyncConnectorMeta
  localmainnet_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_ZkSyncConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_ZkSyncConnectorMeta!]!
  localmainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootMessageProcessed
  localmainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootMessageProcessed_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootMessageProcessed!]!
  localmainnet_aggregateRootSavedSlow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_AggregateRootSavedSlow
  localmainnet_aggregateRootSavedSlows(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_AggregateRootSavedSlow_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_AggregateRootSavedSlow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_AggregateRootSavedSlow!]!
  localmainnet_hubDomain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_HubDomain
  localmainnet_hubDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_HubDomain_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_HubDomain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_HubDomain!]!
  """Access to subgraph metadata"""
  localmainnet__meta(block: localmainnet_Block_height): localmainnet__Meta_
}

type localmainnet_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: localmainnet_Bytes!
  index: BigInt!
}

input localmainnet_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: localmainnet_Bytes
  receivedRoot_not: localmainnet_Bytes
  receivedRoot_gt: localmainnet_Bytes
  receivedRoot_lt: localmainnet_Bytes
  receivedRoot_gte: localmainnet_Bytes
  receivedRoot_lte: localmainnet_Bytes
  receivedRoot_in: [localmainnet_Bytes!]
  receivedRoot_not_in: [localmainnet_Bytes!]
  receivedRoot_contains: localmainnet_Bytes
  receivedRoot_not_contains: localmainnet_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_RootAggregated_filter]
  or: [localmainnet_RootAggregated_filter]
}

enum localmainnet_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type localmainnet_RootManagerMeta {
  id: ID!
  domains: [BigInt!]
  connectors: [localmainnet_Bytes!]
}

input localmainnet_RootManagerMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  connectors: [localmainnet_Bytes!]
  connectors_not: [localmainnet_Bytes!]
  connectors_contains: [localmainnet_Bytes!]
  connectors_contains_nocase: [localmainnet_Bytes!]
  connectors_not_contains: [localmainnet_Bytes!]
  connectors_not_contains_nocase: [localmainnet_Bytes!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_RootManagerMeta_filter]
  or: [localmainnet_RootManagerMeta_filter]
}

enum localmainnet_RootManagerMeta_orderBy {
  id
  domains
  connectors
}

type localmainnet_RootManagerMode {
  id: ID!
  mode: String!
}

input localmainnet_RootManagerMode_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  mode: String
  mode_not: String
  mode_gt: String
  mode_lt: String
  mode_gte: String
  mode_lte: String
  mode_in: [String!]
  mode_not_in: [String!]
  mode_contains: String
  mode_contains_nocase: String
  mode_not_contains: String
  mode_not_contains_nocase: String
  mode_starts_with: String
  mode_starts_with_nocase: String
  mode_not_starts_with: String
  mode_not_starts_with_nocase: String
  mode_ends_with: String
  mode_ends_with_nocase: String
  mode_not_ends_with: String
  mode_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_RootManagerMode_filter]
  or: [localmainnet_RootManagerMode_filter]
}

enum localmainnet_RootManagerMode_orderBy {
  id
  mode
}

type localmainnet_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: localmainnet_Bytes
  caller: localmainnet_Bytes
  transactionHash: localmainnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input localmainnet_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: localmainnet_Bytes
  root_not: localmainnet_Bytes
  root_gt: localmainnet_Bytes
  root_lt: localmainnet_Bytes
  root_gte: localmainnet_Bytes
  root_lte: localmainnet_Bytes
  root_in: [localmainnet_Bytes!]
  root_not_in: [localmainnet_Bytes!]
  root_contains: localmainnet_Bytes
  root_not_contains: localmainnet_Bytes
  caller: localmainnet_Bytes
  caller_not: localmainnet_Bytes
  caller_gt: localmainnet_Bytes
  caller_lt: localmainnet_Bytes
  caller_gte: localmainnet_Bytes
  caller_lte: localmainnet_Bytes
  caller_in: [localmainnet_Bytes!]
  caller_not_in: [localmainnet_Bytes!]
  caller_contains: localmainnet_Bytes
  caller_not_contains: localmainnet_Bytes
  transactionHash: localmainnet_Bytes
  transactionHash_not: localmainnet_Bytes
  transactionHash_gt: localmainnet_Bytes
  transactionHash_lt: localmainnet_Bytes
  transactionHash_gte: localmainnet_Bytes
  transactionHash_lte: localmainnet_Bytes
  transactionHash_in: [localmainnet_Bytes!]
  transactionHash_not_in: [localmainnet_Bytes!]
  transactionHash_contains: localmainnet_Bytes
  transactionHash_not_contains: localmainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_RootMessageProcessed_filter]
  or: [localmainnet_RootMessageProcessed_filter]
}

enum localmainnet_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type localmainnet_RootPropagated {
  id: ID!
  aggregate: localmainnet_Bytes!
  domainsHash: localmainnet_Bytes!
  count: BigInt!
  blockNumber: BigInt
}

input localmainnet_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: localmainnet_Bytes
  aggregate_not: localmainnet_Bytes
  aggregate_gt: localmainnet_Bytes
  aggregate_lt: localmainnet_Bytes
  aggregate_gte: localmainnet_Bytes
  aggregate_lte: localmainnet_Bytes
  aggregate_in: [localmainnet_Bytes!]
  aggregate_not_in: [localmainnet_Bytes!]
  aggregate_contains: localmainnet_Bytes
  aggregate_not_contains: localmainnet_Bytes
  domainsHash: localmainnet_Bytes
  domainsHash_not: localmainnet_Bytes
  domainsHash_gt: localmainnet_Bytes
  domainsHash_lt: localmainnet_Bytes
  domainsHash_gte: localmainnet_Bytes
  domainsHash_lte: localmainnet_Bytes
  domainsHash_in: [localmainnet_Bytes!]
  domainsHash_not_in: [localmainnet_Bytes!]
  domainsHash_contains: localmainnet_Bytes
  domainsHash_not_contains: localmainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_RootPropagated_filter]
  or: [localmainnet_RootPropagated_filter]
}

enum localmainnet_RootPropagated_orderBy {
  id
  aggregate
  domainsHash
  count
  blockNumber
}

type Subscription {
  localmainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootAggregated
  localmainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootAggregated_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootAggregated!]!
  localmainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootPropagated
  localmainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootPropagated_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootPropagated!]!
  localmainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_AggregatedMessageRoot
  localmainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_AggregatedMessageRoot_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_AggregatedMessageRoot!]!
  localmainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootManagerMeta
  localmainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootManagerMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootManagerMeta!]!
  localmainnet_rootManagerMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootManagerMode
  localmainnet_rootManagerModes(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootManagerMode_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootManagerMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootManagerMode!]!
  localmainnet_optimisticRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_OptimisticRootProposed
  localmainnet_optimisticRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_OptimisticRootProposed_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_OptimisticRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_OptimisticRootProposed!]!
  localmainnet_hubOptimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_HubOptimisticRootFinalized
  localmainnet_hubOptimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_HubOptimisticRootFinalized_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_HubOptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_HubOptimisticRootFinalized!]!
  localmainnet_optimisticRootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_OptimisticRootPropagated
  localmainnet_optimisticRootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_OptimisticRootPropagated_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_OptimisticRootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_OptimisticRootPropagated!]!
  localmainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_PolygonConnectorMeta
  localmainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_PolygonConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_PolygonConnectorMeta!]!
  localmainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_OptimismConnectorMeta
  localmainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_OptimismConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_OptimismConnectorMeta!]!
  localmainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_BnbConnectorMeta
  localmainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_BnbConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_BnbConnectorMeta!]!
  localmainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_ArbitrumConnectorMeta
  localmainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_ArbitrumConnectorMeta!]!
  localmainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_GnosisConnectorMeta
  localmainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_GnosisConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_GnosisConnectorMeta!]!
  localmainnet_lineaConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_LineaConnectorMeta
  localmainnet_lineaConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_LineaConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_LineaConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_LineaConnectorMeta!]!
  localmainnet_metisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_MetisConnectorMeta
  localmainnet_metisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_MetisConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_MetisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_MetisConnectorMeta!]!
  localmainnet_mantleConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_MantleConnectorMeta
  localmainnet_mantleConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_MantleConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_MantleConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_MantleConnectorMeta!]!
  localmainnet_avalancheConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_AvalancheConnectorMeta
  localmainnet_avalancheConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_AvalancheConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_AvalancheConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_AvalancheConnectorMeta!]!
  localmainnet_baseConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_BaseConnectorMeta
  localmainnet_baseConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_BaseConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_BaseConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_BaseConnectorMeta!]!
  localmainnet_polygonZkConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_PolygonZkConnectorMeta
  localmainnet_polygonZkConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_PolygonZkConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_PolygonZkConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_PolygonZkConnectorMeta!]!
  localmainnet_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_ZkSyncConnectorMeta
  localmainnet_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_ZkSyncConnectorMeta_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_ZkSyncConnectorMeta!]!
  localmainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_RootMessageProcessed
  localmainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_RootMessageProcessed_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_RootMessageProcessed!]!
  localmainnet_aggregateRootSavedSlow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_AggregateRootSavedSlow
  localmainnet_aggregateRootSavedSlows(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_AggregateRootSavedSlow_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_AggregateRootSavedSlow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_AggregateRootSavedSlow!]!
  localmainnet_hubDomain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): localmainnet_HubDomain
  localmainnet_hubDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: localmainnet_HubDomain_orderBy
    orderDirection: localmainnet_OrderDirection
    where: localmainnet_HubDomain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: localmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [localmainnet_HubDomain!]!
  """Access to subgraph metadata"""
  localmainnet__meta(block: localmainnet_Block_height): localmainnet__Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type localmainnet_ZkSyncConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: localmainnet_Bytes!
  rootManager: localmainnet_Bytes!
  mirrorConnector: localmainnet_Bytes!
}

input localmainnet_ZkSyncConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: localmainnet_Bytes
  amb_not: localmainnet_Bytes
  amb_gt: localmainnet_Bytes
  amb_lt: localmainnet_Bytes
  amb_gte: localmainnet_Bytes
  amb_lte: localmainnet_Bytes
  amb_in: [localmainnet_Bytes!]
  amb_not_in: [localmainnet_Bytes!]
  amb_contains: localmainnet_Bytes
  amb_not_contains: localmainnet_Bytes
  rootManager: localmainnet_Bytes
  rootManager_not: localmainnet_Bytes
  rootManager_gt: localmainnet_Bytes
  rootManager_lt: localmainnet_Bytes
  rootManager_gte: localmainnet_Bytes
  rootManager_lte: localmainnet_Bytes
  rootManager_in: [localmainnet_Bytes!]
  rootManager_not_in: [localmainnet_Bytes!]
  rootManager_contains: localmainnet_Bytes
  rootManager_not_contains: localmainnet_Bytes
  mirrorConnector: localmainnet_Bytes
  mirrorConnector_not: localmainnet_Bytes
  mirrorConnector_gt: localmainnet_Bytes
  mirrorConnector_lt: localmainnet_Bytes
  mirrorConnector_gte: localmainnet_Bytes
  mirrorConnector_lte: localmainnet_Bytes
  mirrorConnector_in: [localmainnet_Bytes!]
  mirrorConnector_not_in: [localmainnet_Bytes!]
  mirrorConnector_contains: localmainnet_Bytes
  mirrorConnector_not_contains: localmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: localmainnet_BlockChangedFilter
  and: [localmainnet_ZkSyncConnectorMeta_filter]
  or: [localmainnet_ZkSyncConnectorMeta_filter]
}

enum localmainnet_ZkSyncConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type localmainnet__Block_ {
  """The hash of the block"""
  hash: localmainnet_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: localmainnet_Bytes
}

"""The type for the top-level _meta field"""
type localmainnet__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: localmainnet__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}