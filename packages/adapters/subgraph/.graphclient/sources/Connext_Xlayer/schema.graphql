schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type xlayer_AggregateRoot {
  id: ID!
  root: xlayer_Bytes!
  blockNumber: BigInt!
}

type xlayer_AggregateRootProposed {
  id: ID!
  aggregateRoot: xlayer_Bytes!
  rootTimestamp: BigInt!
  endOfDispute: BigInt!
  domain: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt
}

input xlayer_AggregateRootProposed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: xlayer_Bytes
  aggregateRoot_not: xlayer_Bytes
  aggregateRoot_gt: xlayer_Bytes
  aggregateRoot_lt: xlayer_Bytes
  aggregateRoot_gte: xlayer_Bytes
  aggregateRoot_lte: xlayer_Bytes
  aggregateRoot_in: [xlayer_Bytes!]
  aggregateRoot_not_in: [xlayer_Bytes!]
  aggregateRoot_contains: xlayer_Bytes
  aggregateRoot_not_contains: xlayer_Bytes
  rootTimestamp: BigInt
  rootTimestamp_not: BigInt
  rootTimestamp_gt: BigInt
  rootTimestamp_lt: BigInt
  rootTimestamp_gte: BigInt
  rootTimestamp_lte: BigInt
  rootTimestamp_in: [BigInt!]
  rootTimestamp_not_in: [BigInt!]
  endOfDispute: BigInt
  endOfDispute_not: BigInt
  endOfDispute_gt: BigInt
  endOfDispute_lt: BigInt
  endOfDispute_gte: BigInt
  endOfDispute_lte: BigInt
  endOfDispute_in: [BigInt!]
  endOfDispute_not_in: [BigInt!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_AggregateRootProposed_filter]
  or: [xlayer_AggregateRootProposed_filter]
}

enum xlayer_AggregateRootProposed_orderBy {
  id
  aggregateRoot
  rootTimestamp
  endOfDispute
  domain
  timestamp
  blockNumber
}

input xlayer_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: xlayer_Bytes
  root_not: xlayer_Bytes
  root_gt: xlayer_Bytes
  root_lt: xlayer_Bytes
  root_gte: xlayer_Bytes
  root_lte: xlayer_Bytes
  root_in: [xlayer_Bytes!]
  root_not_in: [xlayer_Bytes!]
  root_contains: xlayer_Bytes
  root_not_contains: xlayer_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_AggregateRoot_filter]
  or: [xlayer_AggregateRoot_filter]
}

enum xlayer_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type xlayer_Asset {
  id: ID!
  key: xlayer_Bytes
  decimal: BigInt
  adoptedDecimal: BigInt
  canonicalId: xlayer_Bytes
  canonicalDomain: BigInt
  adoptedAsset: xlayer_Bytes
  localAsset: xlayer_Bytes
  blockNumber: BigInt
  status: xlayer_AssetStatus
}

type xlayer_AssetBalance {
  id: ID!
  amount: BigInt!
  locked: BigInt!
  supplied: BigInt!
  removed: BigInt!
  router: xlayer_Router!
  asset: xlayer_Asset!
  feesEarned: BigInt!
}

input xlayer_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  locked: BigInt
  locked_not: BigInt
  locked_gt: BigInt
  locked_lt: BigInt
  locked_gte: BigInt
  locked_lte: BigInt
  locked_in: [BigInt!]
  locked_not_in: [BigInt!]
  supplied: BigInt
  supplied_not: BigInt
  supplied_gt: BigInt
  supplied_lt: BigInt
  supplied_gte: BigInt
  supplied_lte: BigInt
  supplied_in: [BigInt!]
  supplied_not_in: [BigInt!]
  removed: BigInt
  removed_not: BigInt
  removed_gt: BigInt
  removed_lt: BigInt
  removed_gte: BigInt
  removed_lte: BigInt
  removed_in: [BigInt!]
  removed_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: xlayer_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: xlayer_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_AssetBalance_filter]
  or: [xlayer_AssetBalance_filter]
}

enum xlayer_AssetBalance_orderBy {
  id
  amount
  locked
  supplied
  removed
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  feesEarned
}

type xlayer_AssetStatus {
  id: ID!
  status: Boolean
}

input xlayer_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_AssetStatus_filter]
  or: [xlayer_AssetStatus_filter]
}

enum xlayer_AssetStatus_orderBy {
  id
  status
}

input xlayer_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: xlayer_Bytes
  key_not: xlayer_Bytes
  key_gt: xlayer_Bytes
  key_lt: xlayer_Bytes
  key_gte: xlayer_Bytes
  key_lte: xlayer_Bytes
  key_in: [xlayer_Bytes!]
  key_not_in: [xlayer_Bytes!]
  key_contains: xlayer_Bytes
  key_not_contains: xlayer_Bytes
  decimal: BigInt
  decimal_not: BigInt
  decimal_gt: BigInt
  decimal_lt: BigInt
  decimal_gte: BigInt
  decimal_lte: BigInt
  decimal_in: [BigInt!]
  decimal_not_in: [BigInt!]
  adoptedDecimal: BigInt
  adoptedDecimal_not: BigInt
  adoptedDecimal_gt: BigInt
  adoptedDecimal_lt: BigInt
  adoptedDecimal_gte: BigInt
  adoptedDecimal_lte: BigInt
  adoptedDecimal_in: [BigInt!]
  adoptedDecimal_not_in: [BigInt!]
  canonicalId: xlayer_Bytes
  canonicalId_not: xlayer_Bytes
  canonicalId_gt: xlayer_Bytes
  canonicalId_lt: xlayer_Bytes
  canonicalId_gte: xlayer_Bytes
  canonicalId_lte: xlayer_Bytes
  canonicalId_in: [xlayer_Bytes!]
  canonicalId_not_in: [xlayer_Bytes!]
  canonicalId_contains: xlayer_Bytes
  canonicalId_not_contains: xlayer_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: xlayer_Bytes
  adoptedAsset_not: xlayer_Bytes
  adoptedAsset_gt: xlayer_Bytes
  adoptedAsset_lt: xlayer_Bytes
  adoptedAsset_gte: xlayer_Bytes
  adoptedAsset_lte: xlayer_Bytes
  adoptedAsset_in: [xlayer_Bytes!]
  adoptedAsset_not_in: [xlayer_Bytes!]
  adoptedAsset_contains: xlayer_Bytes
  adoptedAsset_not_contains: xlayer_Bytes
  localAsset: xlayer_Bytes
  localAsset_not: xlayer_Bytes
  localAsset_gt: xlayer_Bytes
  localAsset_lt: xlayer_Bytes
  localAsset_gte: xlayer_Bytes
  localAsset_lte: xlayer_Bytes
  localAsset_in: [xlayer_Bytes!]
  localAsset_not_in: [xlayer_Bytes!]
  localAsset_contains: xlayer_Bytes
  localAsset_not_contains: xlayer_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: xlayer_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_Asset_filter]
  or: [xlayer_Asset_filter]
}

enum xlayer_Asset_orderBy {
  id
  key
  decimal
  adoptedDecimal
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
  status__id
  status__status
}

scalar xlayer_BigDecimal

scalar BigInt

input xlayer_BlockChangedFilter {
  number_gte: Int!
}

input xlayer_Block_height {
  hash: xlayer_Bytes
  number: Int
  number_gte: Int
}

scalar xlayer_Bytes

type xlayer_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: xlayer_Bytes
  rootManager: xlayer_Bytes
  mirrorConnector: xlayer_Bytes
}

input xlayer_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: xlayer_Bytes
  amb_not: xlayer_Bytes
  amb_gt: xlayer_Bytes
  amb_lt: xlayer_Bytes
  amb_gte: xlayer_Bytes
  amb_lte: xlayer_Bytes
  amb_in: [xlayer_Bytes!]
  amb_not_in: [xlayer_Bytes!]
  amb_contains: xlayer_Bytes
  amb_not_contains: xlayer_Bytes
  rootManager: xlayer_Bytes
  rootManager_not: xlayer_Bytes
  rootManager_gt: xlayer_Bytes
  rootManager_lt: xlayer_Bytes
  rootManager_gte: xlayer_Bytes
  rootManager_lte: xlayer_Bytes
  rootManager_in: [xlayer_Bytes!]
  rootManager_not_in: [xlayer_Bytes!]
  rootManager_contains: xlayer_Bytes
  rootManager_not_contains: xlayer_Bytes
  mirrorConnector: xlayer_Bytes
  mirrorConnector_not: xlayer_Bytes
  mirrorConnector_gt: xlayer_Bytes
  mirrorConnector_lt: xlayer_Bytes
  mirrorConnector_gte: xlayer_Bytes
  mirrorConnector_lte: xlayer_Bytes
  mirrorConnector_in: [xlayer_Bytes!]
  mirrorConnector_not_in: [xlayer_Bytes!]
  mirrorConnector_contains: xlayer_Bytes
  mirrorConnector_not_contains: xlayer_Bytes
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_ConnectorMeta_filter]
  or: [xlayer_ConnectorMeta_filter]
}

enum xlayer_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type xlayer_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: xlayer_Bytes
  nonce: BigInt
  status: xlayer_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: xlayer_Router_orderBy, orderDirection: xlayer_OrderDirection, where: xlayer_Router_filter): [xlayer_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: xlayer_Bytes
  delegate: xlayer_Bytes
  receiveLocal: Boolean
  callData: xlayer_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: xlayer_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: xlayer_Bytes
  asset: xlayer_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: xlayer_Bytes
  executedTransactionHash: xlayer_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: xlayer_Bytes
  executedTxNonce: BigInt
  reconciledCaller: xlayer_Bytes
  reconciledTransactionHash: xlayer_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: xlayer_Bytes
  reconciledTxNonce: BigInt
}

input xlayer_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: xlayer_Bytes
  transferId_not: xlayer_Bytes
  transferId_gt: xlayer_Bytes
  transferId_lt: xlayer_Bytes
  transferId_gte: xlayer_Bytes
  transferId_lte: xlayer_Bytes
  transferId_in: [xlayer_Bytes!]
  transferId_not_in: [xlayer_Bytes!]
  transferId_contains: xlayer_Bytes
  transferId_not_contains: xlayer_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: xlayer_TransferStatus
  status_not: xlayer_TransferStatus
  status_in: [xlayer_TransferStatus!]
  status_not_in: [xlayer_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: xlayer_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: xlayer_Bytes
  to_not: xlayer_Bytes
  to_gt: xlayer_Bytes
  to_lt: xlayer_Bytes
  to_gte: xlayer_Bytes
  to_lte: xlayer_Bytes
  to_in: [xlayer_Bytes!]
  to_not_in: [xlayer_Bytes!]
  to_contains: xlayer_Bytes
  to_not_contains: xlayer_Bytes
  delegate: xlayer_Bytes
  delegate_not: xlayer_Bytes
  delegate_gt: xlayer_Bytes
  delegate_lt: xlayer_Bytes
  delegate_gte: xlayer_Bytes
  delegate_lte: xlayer_Bytes
  delegate_in: [xlayer_Bytes!]
  delegate_not_in: [xlayer_Bytes!]
  delegate_contains: xlayer_Bytes
  delegate_not_contains: xlayer_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: xlayer_Bytes
  callData_not: xlayer_Bytes
  callData_gt: xlayer_Bytes
  callData_lt: xlayer_Bytes
  callData_gte: xlayer_Bytes
  callData_lte: xlayer_Bytes
  callData_in: [xlayer_Bytes!]
  callData_not_in: [xlayer_Bytes!]
  callData_contains: xlayer_Bytes
  callData_not_contains: xlayer_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: xlayer_Bytes
  originSender_not: xlayer_Bytes
  originSender_gt: xlayer_Bytes
  originSender_lt: xlayer_Bytes
  originSender_gte: xlayer_Bytes
  originSender_lte: xlayer_Bytes
  originSender_in: [xlayer_Bytes!]
  originSender_not_in: [xlayer_Bytes!]
  originSender_contains: xlayer_Bytes
  originSender_not_contains: xlayer_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: xlayer_Bytes
  canonicalId_not: xlayer_Bytes
  canonicalId_gt: xlayer_Bytes
  canonicalId_lt: xlayer_Bytes
  canonicalId_gte: xlayer_Bytes
  canonicalId_lte: xlayer_Bytes
  canonicalId_in: [xlayer_Bytes!]
  canonicalId_not_in: [xlayer_Bytes!]
  canonicalId_contains: xlayer_Bytes
  canonicalId_not_contains: xlayer_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: xlayer_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: xlayer_Bytes
  executedCaller_not: xlayer_Bytes
  executedCaller_gt: xlayer_Bytes
  executedCaller_lt: xlayer_Bytes
  executedCaller_gte: xlayer_Bytes
  executedCaller_lte: xlayer_Bytes
  executedCaller_in: [xlayer_Bytes!]
  executedCaller_not_in: [xlayer_Bytes!]
  executedCaller_contains: xlayer_Bytes
  executedCaller_not_contains: xlayer_Bytes
  executedTransactionHash: xlayer_Bytes
  executedTransactionHash_not: xlayer_Bytes
  executedTransactionHash_gt: xlayer_Bytes
  executedTransactionHash_lt: xlayer_Bytes
  executedTransactionHash_gte: xlayer_Bytes
  executedTransactionHash_lte: xlayer_Bytes
  executedTransactionHash_in: [xlayer_Bytes!]
  executedTransactionHash_not_in: [xlayer_Bytes!]
  executedTransactionHash_contains: xlayer_Bytes
  executedTransactionHash_not_contains: xlayer_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: xlayer_Bytes
  executedTxOrigin_not: xlayer_Bytes
  executedTxOrigin_gt: xlayer_Bytes
  executedTxOrigin_lt: xlayer_Bytes
  executedTxOrigin_gte: xlayer_Bytes
  executedTxOrigin_lte: xlayer_Bytes
  executedTxOrigin_in: [xlayer_Bytes!]
  executedTxOrigin_not_in: [xlayer_Bytes!]
  executedTxOrigin_contains: xlayer_Bytes
  executedTxOrigin_not_contains: xlayer_Bytes
  executedTxNonce: BigInt
  executedTxNonce_not: BigInt
  executedTxNonce_gt: BigInt
  executedTxNonce_lt: BigInt
  executedTxNonce_gte: BigInt
  executedTxNonce_lte: BigInt
  executedTxNonce_in: [BigInt!]
  executedTxNonce_not_in: [BigInt!]
  reconciledCaller: xlayer_Bytes
  reconciledCaller_not: xlayer_Bytes
  reconciledCaller_gt: xlayer_Bytes
  reconciledCaller_lt: xlayer_Bytes
  reconciledCaller_gte: xlayer_Bytes
  reconciledCaller_lte: xlayer_Bytes
  reconciledCaller_in: [xlayer_Bytes!]
  reconciledCaller_not_in: [xlayer_Bytes!]
  reconciledCaller_contains: xlayer_Bytes
  reconciledCaller_not_contains: xlayer_Bytes
  reconciledTransactionHash: xlayer_Bytes
  reconciledTransactionHash_not: xlayer_Bytes
  reconciledTransactionHash_gt: xlayer_Bytes
  reconciledTransactionHash_lt: xlayer_Bytes
  reconciledTransactionHash_gte: xlayer_Bytes
  reconciledTransactionHash_lte: xlayer_Bytes
  reconciledTransactionHash_in: [xlayer_Bytes!]
  reconciledTransactionHash_not_in: [xlayer_Bytes!]
  reconciledTransactionHash_contains: xlayer_Bytes
  reconciledTransactionHash_not_contains: xlayer_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: xlayer_Bytes
  reconciledTxOrigin_not: xlayer_Bytes
  reconciledTxOrigin_gt: xlayer_Bytes
  reconciledTxOrigin_lt: xlayer_Bytes
  reconciledTxOrigin_gte: xlayer_Bytes
  reconciledTxOrigin_lte: xlayer_Bytes
  reconciledTxOrigin_in: [xlayer_Bytes!]
  reconciledTxOrigin_not_in: [xlayer_Bytes!]
  reconciledTxOrigin_contains: xlayer_Bytes
  reconciledTxOrigin_not_contains: xlayer_Bytes
  reconciledTxNonce: BigInt
  reconciledTxNonce_not: BigInt
  reconciledTxNonce_gt: BigInt
  reconciledTxNonce_lt: BigInt
  reconciledTxNonce_gte: BigInt
  reconciledTxNonce_lte: BigInt
  reconciledTxNonce_in: [BigInt!]
  reconciledTxNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_DestinationTransfer_filter]
  or: [xlayer_DestinationTransfer_filter]
}

enum xlayer_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  executedTxNonce
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
  reconciledTxNonce
}

"""
8 bytes signed integer

"""
scalar xlayer_Int8

type xlayer_OptimisticRootFinalized {
  id: ID!
  aggregateRoot: xlayer_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input xlayer_OptimisticRootFinalized_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: xlayer_Bytes
  aggregateRoot_not: xlayer_Bytes
  aggregateRoot_gt: xlayer_Bytes
  aggregateRoot_lt: xlayer_Bytes
  aggregateRoot_gte: xlayer_Bytes
  aggregateRoot_lte: xlayer_Bytes
  aggregateRoot_in: [xlayer_Bytes!]
  aggregateRoot_not_in: [xlayer_Bytes!]
  aggregateRoot_contains: xlayer_Bytes
  aggregateRoot_not_contains: xlayer_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_OptimisticRootFinalized_filter]
  or: [xlayer_OptimisticRootFinalized_filter]
}

enum xlayer_OptimisticRootFinalized_orderBy {
  id
  aggregateRoot
  timestamp
  blockNumber
}

"""Defines the order direction, either ascending or descending"""
enum xlayer_OrderDirection {
  asc
  desc
}

type xlayer_OriginMessage {
  id: ID!
  transferId: xlayer_Bytes
  destinationDomain: BigInt
  leaf: xlayer_Bytes
  index: BigInt
  message: xlayer_Bytes
  root: xlayer_Bytes
  transactionHash: xlayer_Bytes
  blockNumber: BigInt
  rootCount: xlayer_RootCount
}

input xlayer_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: xlayer_Bytes
  transferId_not: xlayer_Bytes
  transferId_gt: xlayer_Bytes
  transferId_lt: xlayer_Bytes
  transferId_gte: xlayer_Bytes
  transferId_lte: xlayer_Bytes
  transferId_in: [xlayer_Bytes!]
  transferId_not_in: [xlayer_Bytes!]
  transferId_contains: xlayer_Bytes
  transferId_not_contains: xlayer_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: xlayer_Bytes
  leaf_not: xlayer_Bytes
  leaf_gt: xlayer_Bytes
  leaf_lt: xlayer_Bytes
  leaf_gte: xlayer_Bytes
  leaf_lte: xlayer_Bytes
  leaf_in: [xlayer_Bytes!]
  leaf_not_in: [xlayer_Bytes!]
  leaf_contains: xlayer_Bytes
  leaf_not_contains: xlayer_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: xlayer_Bytes
  message_not: xlayer_Bytes
  message_gt: xlayer_Bytes
  message_lt: xlayer_Bytes
  message_gte: xlayer_Bytes
  message_lte: xlayer_Bytes
  message_in: [xlayer_Bytes!]
  message_not_in: [xlayer_Bytes!]
  message_contains: xlayer_Bytes
  message_not_contains: xlayer_Bytes
  root: xlayer_Bytes
  root_not: xlayer_Bytes
  root_gt: xlayer_Bytes
  root_lt: xlayer_Bytes
  root_gte: xlayer_Bytes
  root_lte: xlayer_Bytes
  root_in: [xlayer_Bytes!]
  root_not_in: [xlayer_Bytes!]
  root_contains: xlayer_Bytes
  root_not_contains: xlayer_Bytes
  transactionHash: xlayer_Bytes
  transactionHash_not: xlayer_Bytes
  transactionHash_gt: xlayer_Bytes
  transactionHash_lt: xlayer_Bytes
  transactionHash_gte: xlayer_Bytes
  transactionHash_lte: xlayer_Bytes
  transactionHash_in: [xlayer_Bytes!]
  transactionHash_not_in: [xlayer_Bytes!]
  transactionHash_contains: xlayer_Bytes
  transactionHash_not_contains: xlayer_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: xlayer_RootCount_filter
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_OriginMessage_filter]
  or: [xlayer_OriginMessage_filter]
}

enum xlayer_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
  rootCount__id
  rootCount__count
}

type xlayer_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: xlayer_Bytes
  nonce: BigInt
  status: xlayer_TransferStatus
  messageHash: xlayer_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: xlayer_Bytes
  delegate: xlayer_Bytes
  receiveLocal: Boolean
  callData: xlayer_Bytes
  slippage: BigInt
  originSender: xlayer_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: xlayer_Bytes
  asset: xlayer_Asset
  transactingAsset: xlayer_Bytes
  message: xlayer_OriginMessage
  bumpRelayerFeeCount: BigInt
  relayerFees(skip: Int = 0, first: Int = 100, orderBy: xlayer_RelayerFee_orderBy, orderDirection: xlayer_OrderDirection, where: xlayer_RelayerFee_filter): [xlayer_RelayerFee!]
  initialRelayerFeeAsset: xlayer_Bytes
  caller: xlayer_Bytes
  transactionHash: xlayer_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: xlayer_Bytes
  txNonce: BigInt
}

input xlayer_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: xlayer_Bytes
  transferId_not: xlayer_Bytes
  transferId_gt: xlayer_Bytes
  transferId_lt: xlayer_Bytes
  transferId_gte: xlayer_Bytes
  transferId_lte: xlayer_Bytes
  transferId_in: [xlayer_Bytes!]
  transferId_not_in: [xlayer_Bytes!]
  transferId_contains: xlayer_Bytes
  transferId_not_contains: xlayer_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: xlayer_TransferStatus
  status_not: xlayer_TransferStatus
  status_in: [xlayer_TransferStatus!]
  status_not_in: [xlayer_TransferStatus!]
  messageHash: xlayer_Bytes
  messageHash_not: xlayer_Bytes
  messageHash_gt: xlayer_Bytes
  messageHash_lt: xlayer_Bytes
  messageHash_gte: xlayer_Bytes
  messageHash_lte: xlayer_Bytes
  messageHash_in: [xlayer_Bytes!]
  messageHash_not_in: [xlayer_Bytes!]
  messageHash_contains: xlayer_Bytes
  messageHash_not_contains: xlayer_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: xlayer_Bytes
  to_not: xlayer_Bytes
  to_gt: xlayer_Bytes
  to_lt: xlayer_Bytes
  to_gte: xlayer_Bytes
  to_lte: xlayer_Bytes
  to_in: [xlayer_Bytes!]
  to_not_in: [xlayer_Bytes!]
  to_contains: xlayer_Bytes
  to_not_contains: xlayer_Bytes
  delegate: xlayer_Bytes
  delegate_not: xlayer_Bytes
  delegate_gt: xlayer_Bytes
  delegate_lt: xlayer_Bytes
  delegate_gte: xlayer_Bytes
  delegate_lte: xlayer_Bytes
  delegate_in: [xlayer_Bytes!]
  delegate_not_in: [xlayer_Bytes!]
  delegate_contains: xlayer_Bytes
  delegate_not_contains: xlayer_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: xlayer_Bytes
  callData_not: xlayer_Bytes
  callData_gt: xlayer_Bytes
  callData_lt: xlayer_Bytes
  callData_gte: xlayer_Bytes
  callData_lte: xlayer_Bytes
  callData_in: [xlayer_Bytes!]
  callData_not_in: [xlayer_Bytes!]
  callData_contains: xlayer_Bytes
  callData_not_contains: xlayer_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: xlayer_Bytes
  originSender_not: xlayer_Bytes
  originSender_gt: xlayer_Bytes
  originSender_lt: xlayer_Bytes
  originSender_gte: xlayer_Bytes
  originSender_lte: xlayer_Bytes
  originSender_in: [xlayer_Bytes!]
  originSender_not_in: [xlayer_Bytes!]
  originSender_contains: xlayer_Bytes
  originSender_not_contains: xlayer_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: xlayer_Bytes
  canonicalId_not: xlayer_Bytes
  canonicalId_gt: xlayer_Bytes
  canonicalId_lt: xlayer_Bytes
  canonicalId_gte: xlayer_Bytes
  canonicalId_lte: xlayer_Bytes
  canonicalId_in: [xlayer_Bytes!]
  canonicalId_not_in: [xlayer_Bytes!]
  canonicalId_contains: xlayer_Bytes
  canonicalId_not_contains: xlayer_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: xlayer_Asset_filter
  transactingAsset: xlayer_Bytes
  transactingAsset_not: xlayer_Bytes
  transactingAsset_gt: xlayer_Bytes
  transactingAsset_lt: xlayer_Bytes
  transactingAsset_gte: xlayer_Bytes
  transactingAsset_lte: xlayer_Bytes
  transactingAsset_in: [xlayer_Bytes!]
  transactingAsset_not_in: [xlayer_Bytes!]
  transactingAsset_contains: xlayer_Bytes
  transactingAsset_not_contains: xlayer_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: xlayer_OriginMessage_filter
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  relayerFees: [String!]
  relayerFees_not: [String!]
  relayerFees_contains: [String!]
  relayerFees_contains_nocase: [String!]
  relayerFees_not_contains: [String!]
  relayerFees_not_contains_nocase: [String!]
  relayerFees_: xlayer_RelayerFee_filter
  initialRelayerFeeAsset: xlayer_Bytes
  initialRelayerFeeAsset_not: xlayer_Bytes
  initialRelayerFeeAsset_gt: xlayer_Bytes
  initialRelayerFeeAsset_lt: xlayer_Bytes
  initialRelayerFeeAsset_gte: xlayer_Bytes
  initialRelayerFeeAsset_lte: xlayer_Bytes
  initialRelayerFeeAsset_in: [xlayer_Bytes!]
  initialRelayerFeeAsset_not_in: [xlayer_Bytes!]
  initialRelayerFeeAsset_contains: xlayer_Bytes
  initialRelayerFeeAsset_not_contains: xlayer_Bytes
  caller: xlayer_Bytes
  caller_not: xlayer_Bytes
  caller_gt: xlayer_Bytes
  caller_lt: xlayer_Bytes
  caller_gte: xlayer_Bytes
  caller_lte: xlayer_Bytes
  caller_in: [xlayer_Bytes!]
  caller_not_in: [xlayer_Bytes!]
  caller_contains: xlayer_Bytes
  caller_not_contains: xlayer_Bytes
  transactionHash: xlayer_Bytes
  transactionHash_not: xlayer_Bytes
  transactionHash_gt: xlayer_Bytes
  transactionHash_lt: xlayer_Bytes
  transactionHash_gte: xlayer_Bytes
  transactionHash_lte: xlayer_Bytes
  transactionHash_in: [xlayer_Bytes!]
  transactionHash_not_in: [xlayer_Bytes!]
  transactionHash_contains: xlayer_Bytes
  transactionHash_not_contains: xlayer_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: xlayer_Bytes
  txOrigin_not: xlayer_Bytes
  txOrigin_gt: xlayer_Bytes
  txOrigin_lt: xlayer_Bytes
  txOrigin_gte: xlayer_Bytes
  txOrigin_lte: xlayer_Bytes
  txOrigin_in: [xlayer_Bytes!]
  txOrigin_not_in: [xlayer_Bytes!]
  txOrigin_contains: xlayer_Bytes
  txOrigin_not_contains: xlayer_Bytes
  txNonce: BigInt
  txNonce_not: BigInt
  txNonce_gt: BigInt
  txNonce_lt: BigInt
  txNonce_gte: BigInt
  txNonce_lte: BigInt
  txNonce_in: [BigInt!]
  txNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_OriginTransfer_filter]
  or: [xlayer_OriginTransfer_filter]
}

enum xlayer_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  transactingAsset
  message
  message__id
  message__transferId
  message__destinationDomain
  message__leaf
  message__index
  message__message
  message__root
  message__transactionHash
  message__blockNumber
  bumpRelayerFeeCount
  relayerFees
  initialRelayerFeeAsset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
  txNonce
}

type Query {
  xlayer_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Asset
  xlayer_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Asset_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Asset!]!
  xlayer_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_AssetStatus
  xlayer_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_AssetStatus_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_AssetStatus!]!
  xlayer_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_AssetBalance
  xlayer_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_AssetBalance_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_AssetBalance!]!
  xlayer_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Router
  xlayer_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Router_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Router!]!
  xlayer_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RouterDailyTVL
  xlayer_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RouterDailyTVL_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RouterDailyTVL!]!
  xlayer_routerLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RouterLiquidityEvent
  xlayer_routerLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RouterLiquidityEvent_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RouterLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RouterLiquidityEvent!]!
  xlayer_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Setting
  xlayer_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Setting_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Setting!]!
  xlayer_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Relayer
  xlayer_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Relayer_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Relayer!]!
  xlayer_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Sequencer
  xlayer_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Sequencer_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Sequencer!]!
  xlayer_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RelayerFee
  xlayer_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RelayerFee_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RelayerFee!]!
  xlayer_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_OriginTransfer
  xlayer_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_OriginTransfer_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_OriginTransfer!]!
  xlayer_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_DestinationTransfer
  xlayer_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_DestinationTransfer_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_DestinationTransfer!]!
  xlayer_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_OriginMessage
  xlayer_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_OriginMessage_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_OriginMessage!]!
  xlayer_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_AggregateRoot
  xlayer_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_AggregateRoot_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_AggregateRoot!]!
  xlayer_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_ConnectorMeta
  xlayer_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_ConnectorMeta_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_ConnectorMeta!]!
  xlayer_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RootCount
  xlayer_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RootCount_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RootCount!]!
  xlayer_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RootMessageSent
  xlayer_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RootMessageSent_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RootMessageSent!]!
  xlayer_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RelayerFeesIncrease
  xlayer_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RelayerFeesIncrease_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RelayerFeesIncrease!]!
  xlayer_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_SlippageUpdate
  xlayer_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_SlippageUpdate_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_SlippageUpdate!]!
  xlayer_snapshotRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_SnapshotRoot
  xlayer_snapshotRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_SnapshotRoot_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_SnapshotRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_SnapshotRoot!]!
  xlayer_spokeConnectorMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_SpokeConnectorMode
  xlayer_spokeConnectorModes(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_SpokeConnectorMode_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_SpokeConnectorMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_SpokeConnectorMode!]!
  xlayer_aggregateRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_AggregateRootProposed
  xlayer_aggregateRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_AggregateRootProposed_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_AggregateRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_AggregateRootProposed!]!
  xlayer_optimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_OptimisticRootFinalized
  xlayer_optimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_OptimisticRootFinalized_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_OptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_OptimisticRootFinalized!]!
  """Access to subgraph metadata"""
  xlayer__meta(block: xlayer_Block_height): xlayer__Meta_
}

type xlayer_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: xlayer_Bytes
}

type xlayer_RelayerFee {
  id: ID!
  transfer: xlayer_OriginTransfer!
  fee: BigInt!
  asset: xlayer_Bytes!
}

input xlayer_RelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: xlayer_OriginTransfer_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  asset: xlayer_Bytes
  asset_not: xlayer_Bytes
  asset_gt: xlayer_Bytes
  asset_lt: xlayer_Bytes
  asset_gte: xlayer_Bytes
  asset_lte: xlayer_Bytes
  asset_in: [xlayer_Bytes!]
  asset_not_in: [xlayer_Bytes!]
  asset_contains: xlayer_Bytes
  asset_not_contains: xlayer_Bytes
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_RelayerFee_filter]
  or: [xlayer_RelayerFee_filter]
}

enum xlayer_RelayerFee_orderBy {
  id
  transfer
  transfer__id
  transfer__chainId
  transfer__transferId
  transfer__nonce
  transfer__status
  transfer__messageHash
  transfer__originDomain
  transfer__destinationDomain
  transfer__canonicalDomain
  transfer__to
  transfer__delegate
  transfer__receiveLocal
  transfer__callData
  transfer__slippage
  transfer__originSender
  transfer__bridgedAmt
  transfer__normalizedIn
  transfer__canonicalId
  transfer__transactingAsset
  transfer__bumpRelayerFeeCount
  transfer__initialRelayerFeeAsset
  transfer__caller
  transfer__transactionHash
  transfer__timestamp
  transfer__gasPrice
  transfer__gasLimit
  transfer__blockNumber
  transfer__txOrigin
  transfer__txNonce
  fee
  asset
}

type xlayer_RelayerFeesIncrease {
  id: ID!
  transfer: xlayer_OriginTransfer!
  increase: BigInt
  asset: xlayer_Bytes
  caller: xlayer_Bytes!
  transactionHash: xlayer_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input xlayer_RelayerFeesIncrease_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: xlayer_OriginTransfer_filter
  increase: BigInt
  increase_not: BigInt
  increase_gt: BigInt
  increase_lt: BigInt
  increase_gte: BigInt
  increase_lte: BigInt
  increase_in: [BigInt!]
  increase_not_in: [BigInt!]
  asset: xlayer_Bytes
  asset_not: xlayer_Bytes
  asset_gt: xlayer_Bytes
  asset_lt: xlayer_Bytes
  asset_gte: xlayer_Bytes
  asset_lte: xlayer_Bytes
  asset_in: [xlayer_Bytes!]
  asset_not_in: [xlayer_Bytes!]
  asset_contains: xlayer_Bytes
  asset_not_contains: xlayer_Bytes
  caller: xlayer_Bytes
  caller_not: xlayer_Bytes
  caller_gt: xlayer_Bytes
  caller_lt: xlayer_Bytes
  caller_gte: xlayer_Bytes
  caller_lte: xlayer_Bytes
  caller_in: [xlayer_Bytes!]
  caller_not_in: [xlayer_Bytes!]
  caller_contains: xlayer_Bytes
  caller_not_contains: xlayer_Bytes
  transactionHash: xlayer_Bytes
  transactionHash_not: xlayer_Bytes
  transactionHash_gt: xlayer_Bytes
  transactionHash_lt: xlayer_Bytes
  transactionHash_gte: xlayer_Bytes
  transactionHash_lte: xlayer_Bytes
  transactionHash_in: [xlayer_Bytes!]
  transactionHash_not_in: [xlayer_Bytes!]
  transactionHash_contains: xlayer_Bytes
  transactionHash_not_contains: xlayer_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_RelayerFeesIncrease_filter]
  or: [xlayer_RelayerFeesIncrease_filter]
}

enum xlayer_RelayerFeesIncrease_orderBy {
  id
  transfer
  transfer__id
  transfer__chainId
  transfer__transferId
  transfer__nonce
  transfer__status
  transfer__messageHash
  transfer__originDomain
  transfer__destinationDomain
  transfer__canonicalDomain
  transfer__to
  transfer__delegate
  transfer__receiveLocal
  transfer__callData
  transfer__slippage
  transfer__originSender
  transfer__bridgedAmt
  transfer__normalizedIn
  transfer__canonicalId
  transfer__transactingAsset
  transfer__bumpRelayerFeeCount
  transfer__initialRelayerFeeAsset
  transfer__caller
  transfer__transactionHash
  transfer__timestamp
  transfer__gasPrice
  transfer__gasLimit
  transfer__blockNumber
  transfer__txOrigin
  transfer__txNonce
  increase
  asset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

input xlayer_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: xlayer_Bytes
  relayer_not: xlayer_Bytes
  relayer_gt: xlayer_Bytes
  relayer_lt: xlayer_Bytes
  relayer_gte: xlayer_Bytes
  relayer_lte: xlayer_Bytes
  relayer_in: [xlayer_Bytes!]
  relayer_not_in: [xlayer_Bytes!]
  relayer_contains: xlayer_Bytes
  relayer_not_contains: xlayer_Bytes
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_Relayer_filter]
  or: [xlayer_Relayer_filter]
}

enum xlayer_Relayer_orderBy {
  id
  isActive
  relayer
}

type xlayer_RootCount {
  id: ID!
  count: BigInt
}

input xlayer_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_RootCount_filter]
  or: [xlayer_RootCount_filter]
}

enum xlayer_RootCount_orderBy {
  id
  count
}

type xlayer_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: xlayer_Bytes
  count: BigInt
  caller: xlayer_Bytes
  transactionHash: xlayer_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input xlayer_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: xlayer_Bytes
  root_not: xlayer_Bytes
  root_gt: xlayer_Bytes
  root_lt: xlayer_Bytes
  root_gte: xlayer_Bytes
  root_lte: xlayer_Bytes
  root_in: [xlayer_Bytes!]
  root_not_in: [xlayer_Bytes!]
  root_contains: xlayer_Bytes
  root_not_contains: xlayer_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: xlayer_Bytes
  caller_not: xlayer_Bytes
  caller_gt: xlayer_Bytes
  caller_lt: xlayer_Bytes
  caller_gte: xlayer_Bytes
  caller_lte: xlayer_Bytes
  caller_in: [xlayer_Bytes!]
  caller_not_in: [xlayer_Bytes!]
  caller_contains: xlayer_Bytes
  caller_not_contains: xlayer_Bytes
  transactionHash: xlayer_Bytes
  transactionHash_not: xlayer_Bytes
  transactionHash_gt: xlayer_Bytes
  transactionHash_lt: xlayer_Bytes
  transactionHash_gte: xlayer_Bytes
  transactionHash_lte: xlayer_Bytes
  transactionHash_in: [xlayer_Bytes!]
  transactionHash_not_in: [xlayer_Bytes!]
  transactionHash_contains: xlayer_Bytes
  transactionHash_not_contains: xlayer_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_RootMessageSent_filter]
  or: [xlayer_RootMessageSent_filter]
}

enum xlayer_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type xlayer_Router {
  id: ID!
  isActive: Boolean!
  owner: xlayer_Bytes
  recipient: xlayer_Bytes
  proposedOwner: xlayer_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: xlayer_AssetBalance_orderBy, orderDirection: xlayer_OrderDirection, where: xlayer_AssetBalance_filter): [xlayer_AssetBalance!]!
}

type xlayer_RouterDailyTVL {
  id: ID!
  router: xlayer_Router!
  asset: xlayer_Asset!
  timestamp: BigInt!
  balance: BigInt!
}

input xlayer_RouterDailyTVL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: xlayer_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: xlayer_Asset_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_RouterDailyTVL_filter]
  or: [xlayer_RouterDailyTVL_filter]
}

enum xlayer_RouterDailyTVL_orderBy {
  id
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  timestamp
  balance
}

type xlayer_RouterLiquidityEvent {
  id: ID!
  type: xlayer_RouterLiquidityEventType
  router: xlayer_Router!
  asset: xlayer_Asset!
  amount: BigInt!
  balance: BigInt!
  caller: xlayer_Bytes
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: xlayer_Bytes!
  nonce: BigInt!
}

enum xlayer_RouterLiquidityEventType {
  Add
  Remove
}

input xlayer_RouterLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: xlayer_RouterLiquidityEventType
  type_not: xlayer_RouterLiquidityEventType
  type_in: [xlayer_RouterLiquidityEventType!]
  type_not_in: [xlayer_RouterLiquidityEventType!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: xlayer_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: xlayer_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  caller: xlayer_Bytes
  caller_not: xlayer_Bytes
  caller_gt: xlayer_Bytes
  caller_lt: xlayer_Bytes
  caller_gte: xlayer_Bytes
  caller_lte: xlayer_Bytes
  caller_in: [xlayer_Bytes!]
  caller_not_in: [xlayer_Bytes!]
  caller_contains: xlayer_Bytes
  caller_not_contains: xlayer_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transactionHash: xlayer_Bytes
  transactionHash_not: xlayer_Bytes
  transactionHash_gt: xlayer_Bytes
  transactionHash_lt: xlayer_Bytes
  transactionHash_gte: xlayer_Bytes
  transactionHash_lte: xlayer_Bytes
  transactionHash_in: [xlayer_Bytes!]
  transactionHash_not_in: [xlayer_Bytes!]
  transactionHash_contains: xlayer_Bytes
  transactionHash_not_contains: xlayer_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_RouterLiquidityEvent_filter]
  or: [xlayer_RouterLiquidityEvent_filter]
}

enum xlayer_RouterLiquidityEvent_orderBy {
  id
  type
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__decimal
  asset__adoptedDecimal
  asset__canonicalId
  asset__canonicalDomain
  asset__adoptedAsset
  asset__localAsset
  asset__blockNumber
  amount
  balance
  caller
  blockNumber
  timestamp
  transactionHash
  nonce
}

input xlayer_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: xlayer_Bytes
  owner_not: xlayer_Bytes
  owner_gt: xlayer_Bytes
  owner_lt: xlayer_Bytes
  owner_gte: xlayer_Bytes
  owner_lte: xlayer_Bytes
  owner_in: [xlayer_Bytes!]
  owner_not_in: [xlayer_Bytes!]
  owner_contains: xlayer_Bytes
  owner_not_contains: xlayer_Bytes
  recipient: xlayer_Bytes
  recipient_not: xlayer_Bytes
  recipient_gt: xlayer_Bytes
  recipient_lt: xlayer_Bytes
  recipient_gte: xlayer_Bytes
  recipient_lte: xlayer_Bytes
  recipient_in: [xlayer_Bytes!]
  recipient_not_in: [xlayer_Bytes!]
  recipient_contains: xlayer_Bytes
  recipient_not_contains: xlayer_Bytes
  proposedOwner: xlayer_Bytes
  proposedOwner_not: xlayer_Bytes
  proposedOwner_gt: xlayer_Bytes
  proposedOwner_lt: xlayer_Bytes
  proposedOwner_gte: xlayer_Bytes
  proposedOwner_lte: xlayer_Bytes
  proposedOwner_in: [xlayer_Bytes!]
  proposedOwner_not_in: [xlayer_Bytes!]
  proposedOwner_contains: xlayer_Bytes
  proposedOwner_not_contains: xlayer_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: xlayer_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_Router_filter]
  or: [xlayer_Router_filter]
}

enum xlayer_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type xlayer_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: xlayer_Bytes
}

input xlayer_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: xlayer_Bytes
  sequencer_not: xlayer_Bytes
  sequencer_gt: xlayer_Bytes
  sequencer_lt: xlayer_Bytes
  sequencer_gte: xlayer_Bytes
  sequencer_lte: xlayer_Bytes
  sequencer_in: [xlayer_Bytes!]
  sequencer_not_in: [xlayer_Bytes!]
  sequencer_contains: xlayer_Bytes
  sequencer_not_contains: xlayer_Bytes
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_Sequencer_filter]
  or: [xlayer_Sequencer_filter]
}

enum xlayer_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type xlayer_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: xlayer_Bytes!
}

input xlayer_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: xlayer_Bytes
  caller_not: xlayer_Bytes
  caller_gt: xlayer_Bytes
  caller_lt: xlayer_Bytes
  caller_gte: xlayer_Bytes
  caller_lte: xlayer_Bytes
  caller_in: [xlayer_Bytes!]
  caller_not_in: [xlayer_Bytes!]
  caller_contains: xlayer_Bytes
  caller_not_contains: xlayer_Bytes
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_Setting_filter]
  or: [xlayer_Setting_filter]
}

enum xlayer_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type xlayer_SlippageUpdate {
  id: ID!
  transfer: xlayer_DestinationTransfer!
  slippage: BigInt!
  caller: xlayer_Bytes!
  transactionHash: xlayer_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input xlayer_SlippageUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: xlayer_DestinationTransfer_filter
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  caller: xlayer_Bytes
  caller_not: xlayer_Bytes
  caller_gt: xlayer_Bytes
  caller_lt: xlayer_Bytes
  caller_gte: xlayer_Bytes
  caller_lte: xlayer_Bytes
  caller_in: [xlayer_Bytes!]
  caller_not_in: [xlayer_Bytes!]
  caller_contains: xlayer_Bytes
  caller_not_contains: xlayer_Bytes
  transactionHash: xlayer_Bytes
  transactionHash_not: xlayer_Bytes
  transactionHash_gt: xlayer_Bytes
  transactionHash_lt: xlayer_Bytes
  transactionHash_gte: xlayer_Bytes
  transactionHash_lte: xlayer_Bytes
  transactionHash_in: [xlayer_Bytes!]
  transactionHash_not_in: [xlayer_Bytes!]
  transactionHash_contains: xlayer_Bytes
  transactionHash_not_contains: xlayer_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_SlippageUpdate_filter]
  or: [xlayer_SlippageUpdate_filter]
}

enum xlayer_SlippageUpdate_orderBy {
  id
  transfer
  transfer__id
  transfer__chainId
  transfer__transferId
  transfer__nonce
  transfer__status
  transfer__originDomain
  transfer__destinationDomain
  transfer__canonicalDomain
  transfer__to
  transfer__delegate
  transfer__receiveLocal
  transfer__callData
  transfer__slippage
  transfer__bumpSlippageCount
  transfer__originSender
  transfer__bridgedAmt
  transfer__normalizedIn
  transfer__canonicalId
  transfer__amount
  transfer__routersFee
  transfer__executedCaller
  transfer__executedTransactionHash
  transfer__executedTimestamp
  transfer__executedGasPrice
  transfer__executedGasLimit
  transfer__executedBlockNumber
  transfer__executedTxOrigin
  transfer__executedTxNonce
  transfer__reconciledCaller
  transfer__reconciledTransactionHash
  transfer__reconciledTimestamp
  transfer__reconciledGasPrice
  transfer__reconciledGasLimit
  transfer__reconciledBlockNumber
  transfer__reconciledTxOrigin
  transfer__reconciledTxNonce
  slippage
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type xlayer_SnapshotRoot {
  id: ID!
  spokeDomain: BigInt
  root: xlayer_Bytes!
  count: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

input xlayer_SnapshotRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  root: xlayer_Bytes
  root_not: xlayer_Bytes
  root_gt: xlayer_Bytes
  root_lt: xlayer_Bytes
  root_gte: xlayer_Bytes
  root_lte: xlayer_Bytes
  root_in: [xlayer_Bytes!]
  root_not_in: [xlayer_Bytes!]
  root_contains: xlayer_Bytes
  root_not_contains: xlayer_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_SnapshotRoot_filter]
  or: [xlayer_SnapshotRoot_filter]
}

enum xlayer_SnapshotRoot_orderBy {
  id
  spokeDomain
  root
  count
  timestamp
  blockNumber
}

type xlayer_SpokeConnectorMode {
  id: ID!
  mode: String!
}

input xlayer_SpokeConnectorMode_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  mode: String
  mode_not: String
  mode_gt: String
  mode_lt: String
  mode_gte: String
  mode_lte: String
  mode_in: [String!]
  mode_not_in: [String!]
  mode_contains: String
  mode_contains_nocase: String
  mode_not_contains: String
  mode_not_contains_nocase: String
  mode_starts_with: String
  mode_starts_with_nocase: String
  mode_not_starts_with: String
  mode_not_starts_with_nocase: String
  mode_ends_with: String
  mode_ends_with_nocase: String
  mode_not_ends_with: String
  mode_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: xlayer_BlockChangedFilter
  and: [xlayer_SpokeConnectorMode_filter]
  or: [xlayer_SpokeConnectorMode_filter]
}

enum xlayer_SpokeConnectorMode_orderBy {
  id
  mode
}

type Subscription {
  xlayer_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Asset
  xlayer_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Asset_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Asset!]!
  xlayer_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_AssetStatus
  xlayer_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_AssetStatus_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_AssetStatus!]!
  xlayer_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_AssetBalance
  xlayer_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_AssetBalance_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_AssetBalance!]!
  xlayer_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Router
  xlayer_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Router_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Router!]!
  xlayer_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RouterDailyTVL
  xlayer_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RouterDailyTVL_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RouterDailyTVL!]!
  xlayer_routerLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RouterLiquidityEvent
  xlayer_routerLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RouterLiquidityEvent_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RouterLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RouterLiquidityEvent!]!
  xlayer_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Setting
  xlayer_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Setting_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Setting!]!
  xlayer_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Relayer
  xlayer_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Relayer_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Relayer!]!
  xlayer_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_Sequencer
  xlayer_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_Sequencer_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_Sequencer!]!
  xlayer_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RelayerFee
  xlayer_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RelayerFee_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RelayerFee!]!
  xlayer_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_OriginTransfer
  xlayer_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_OriginTransfer_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_OriginTransfer!]!
  xlayer_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_DestinationTransfer
  xlayer_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_DestinationTransfer_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_DestinationTransfer!]!
  xlayer_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_OriginMessage
  xlayer_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_OriginMessage_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_OriginMessage!]!
  xlayer_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_AggregateRoot
  xlayer_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_AggregateRoot_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_AggregateRoot!]!
  xlayer_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_ConnectorMeta
  xlayer_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_ConnectorMeta_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_ConnectorMeta!]!
  xlayer_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RootCount
  xlayer_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RootCount_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RootCount!]!
  xlayer_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RootMessageSent
  xlayer_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RootMessageSent_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RootMessageSent!]!
  xlayer_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_RelayerFeesIncrease
  xlayer_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_RelayerFeesIncrease_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_RelayerFeesIncrease!]!
  xlayer_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_SlippageUpdate
  xlayer_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_SlippageUpdate_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_SlippageUpdate!]!
  xlayer_snapshotRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_SnapshotRoot
  xlayer_snapshotRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_SnapshotRoot_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_SnapshotRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_SnapshotRoot!]!
  xlayer_spokeConnectorMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_SpokeConnectorMode
  xlayer_spokeConnectorModes(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_SpokeConnectorMode_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_SpokeConnectorMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_SpokeConnectorMode!]!
  xlayer_aggregateRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_AggregateRootProposed
  xlayer_aggregateRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_AggregateRootProposed_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_AggregateRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_AggregateRootProposed!]!
  xlayer_optimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): xlayer_OptimisticRootFinalized
  xlayer_optimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: xlayer_OptimisticRootFinalized_orderBy
    orderDirection: xlayer_OrderDirection
    where: xlayer_OptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: xlayer_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [xlayer_OptimisticRootFinalized!]!
  """Access to subgraph metadata"""
  xlayer__meta(block: xlayer_Block_height): xlayer__Meta_
}

enum xlayer_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type xlayer__Block_ {
  """The hash of the block"""
  hash: xlayer_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type xlayer__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: xlayer__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}