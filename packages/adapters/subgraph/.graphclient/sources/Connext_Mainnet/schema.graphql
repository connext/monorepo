schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type mainnet_AggregateRoot {
  id: ID!
  root: mainnet_Bytes!
  blockNumber: BigInt!
}

type mainnet_AggregateRootProposed {
  id: ID!
  aggregateRoot: mainnet_Bytes!
  rootTimestamp: BigInt!
  endOfDispute: BigInt!
  domain: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt
}

input mainnet_AggregateRootProposed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: mainnet_Bytes
  aggregateRoot_not: mainnet_Bytes
  aggregateRoot_in: [mainnet_Bytes!]
  aggregateRoot_not_in: [mainnet_Bytes!]
  aggregateRoot_contains: mainnet_Bytes
  aggregateRoot_not_contains: mainnet_Bytes
  rootTimestamp: BigInt
  rootTimestamp_not: BigInt
  rootTimestamp_gt: BigInt
  rootTimestamp_lt: BigInt
  rootTimestamp_gte: BigInt
  rootTimestamp_lte: BigInt
  rootTimestamp_in: [BigInt!]
  rootTimestamp_not_in: [BigInt!]
  endOfDispute: BigInt
  endOfDispute_not: BigInt
  endOfDispute_gt: BigInt
  endOfDispute_lt: BigInt
  endOfDispute_gte: BigInt
  endOfDispute_lte: BigInt
  endOfDispute_in: [BigInt!]
  endOfDispute_not_in: [BigInt!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_AggregateRootProposed_orderBy {
  id
  aggregateRoot
  rootTimestamp
  endOfDispute
  domain
  timestamp
  blockNumber
}

input mainnet_AggregateRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  root: mainnet_Bytes
  root_not: mainnet_Bytes
  root_in: [mainnet_Bytes!]
  root_not_in: [mainnet_Bytes!]
  root_contains: mainnet_Bytes
  root_not_contains: mainnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_AggregateRoot_orderBy {
  id
  root
  blockNumber
}

type mainnet_Asset {
  id: ID!
  key: mainnet_Bytes
  decimal: BigInt
  adoptedDecimal: BigInt
  canonicalId: mainnet_Bytes
  canonicalDomain: BigInt
  adoptedAsset: mainnet_Bytes
  localAsset: mainnet_Bytes
  blockNumber: BigInt
  status: mainnet_AssetStatus
}

type mainnet_AssetBalance {
  id: ID!
  amount: BigInt!
  locked: BigInt!
  supplied: BigInt!
  removed: BigInt!
  router: mainnet_Router!
  asset: mainnet_Asset!
  feesEarned: BigInt!
}

input mainnet_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  locked: BigInt
  locked_not: BigInt
  locked_gt: BigInt
  locked_lt: BigInt
  locked_gte: BigInt
  locked_lte: BigInt
  locked_in: [BigInt!]
  locked_not_in: [BigInt!]
  supplied: BigInt
  supplied_not: BigInt
  supplied_gt: BigInt
  supplied_lt: BigInt
  supplied_gte: BigInt
  supplied_lte: BigInt
  supplied_in: [BigInt!]
  supplied_not_in: [BigInt!]
  removed: BigInt
  removed_not: BigInt
  removed_gt: BigInt
  removed_lt: BigInt
  removed_gte: BigInt
  removed_lte: BigInt
  removed_in: [BigInt!]
  removed_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: mainnet_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mainnet_Asset_filter
  feesEarned: BigInt
  feesEarned_not: BigInt
  feesEarned_gt: BigInt
  feesEarned_lt: BigInt
  feesEarned_gte: BigInt
  feesEarned_lte: BigInt
  feesEarned_in: [BigInt!]
  feesEarned_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_AssetBalance_orderBy {
  id
  amount
  locked
  supplied
  removed
  router
  asset
  feesEarned
}

type mainnet_AssetStatus {
  id: ID!
  status: Boolean
}

input mainnet_AssetStatus_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  status: Boolean
  status_not: Boolean
  status_in: [Boolean!]
  status_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_AssetStatus_orderBy {
  id
  status
}

input mainnet_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: mainnet_Bytes
  key_not: mainnet_Bytes
  key_in: [mainnet_Bytes!]
  key_not_in: [mainnet_Bytes!]
  key_contains: mainnet_Bytes
  key_not_contains: mainnet_Bytes
  decimal: BigInt
  decimal_not: BigInt
  decimal_gt: BigInt
  decimal_lt: BigInt
  decimal_gte: BigInt
  decimal_lte: BigInt
  decimal_in: [BigInt!]
  decimal_not_in: [BigInt!]
  adoptedDecimal: BigInt
  adoptedDecimal_not: BigInt
  adoptedDecimal_gt: BigInt
  adoptedDecimal_lt: BigInt
  adoptedDecimal_gte: BigInt
  adoptedDecimal_lte: BigInt
  adoptedDecimal_in: [BigInt!]
  adoptedDecimal_not_in: [BigInt!]
  canonicalId: mainnet_Bytes
  canonicalId_not: mainnet_Bytes
  canonicalId_in: [mainnet_Bytes!]
  canonicalId_not_in: [mainnet_Bytes!]
  canonicalId_contains: mainnet_Bytes
  canonicalId_not_contains: mainnet_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  adoptedAsset: mainnet_Bytes
  adoptedAsset_not: mainnet_Bytes
  adoptedAsset_in: [mainnet_Bytes!]
  adoptedAsset_not_in: [mainnet_Bytes!]
  adoptedAsset_contains: mainnet_Bytes
  adoptedAsset_not_contains: mainnet_Bytes
  localAsset: mainnet_Bytes
  localAsset_not: mainnet_Bytes
  localAsset_in: [mainnet_Bytes!]
  localAsset_not_in: [mainnet_Bytes!]
  localAsset_contains: mainnet_Bytes
  localAsset_not_contains: mainnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  status: String
  status_not: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_lte: String
  status_in: [String!]
  status_not_in: [String!]
  status_contains: String
  status_contains_nocase: String
  status_not_contains: String
  status_not_contains_nocase: String
  status_starts_with: String
  status_starts_with_nocase: String
  status_not_starts_with: String
  status_not_starts_with_nocase: String
  status_ends_with: String
  status_ends_with_nocase: String
  status_not_ends_with: String
  status_not_ends_with_nocase: String
  status_: mainnet_AssetStatus_filter
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Asset_orderBy {
  id
  key
  decimal
  adoptedDecimal
  canonicalId
  canonicalDomain
  adoptedAsset
  localAsset
  blockNumber
  status
}

scalar mainnet_BigDecimal

scalar BigInt

input mainnet_BlockChangedFilter {
  number_gte: Int!
}

input mainnet_Block_height {
  hash: mainnet_Bytes
  number: Int
  number_gte: Int
}

scalar mainnet_Bytes

type mainnet_ConnectorMeta {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  amb: mainnet_Bytes
  rootManager: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
}

input mainnet_ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: mainnet_Bytes
  amb_not: mainnet_Bytes
  amb_in: [mainnet_Bytes!]
  amb_not_in: [mainnet_Bytes!]
  amb_contains: mainnet_Bytes
  amb_not_contains: mainnet_Bytes
  rootManager: mainnet_Bytes
  rootManager_not: mainnet_Bytes
  rootManager_in: [mainnet_Bytes!]
  rootManager_not_in: [mainnet_Bytes!]
  rootManager_contains: mainnet_Bytes
  rootManager_not_contains: mainnet_Bytes
  mirrorConnector: mainnet_Bytes
  mirrorConnector_not: mainnet_Bytes
  mirrorConnector_in: [mainnet_Bytes!]
  mirrorConnector_not_in: [mainnet_Bytes!]
  mirrorConnector_contains: mainnet_Bytes
  mirrorConnector_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type mainnet_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: mainnet_Bytes
  nonce: BigInt
  status: mainnet_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: mainnet_Router_orderBy, orderDirection: mainnet_OrderDirection, where: mainnet_Router_filter): [mainnet_Router!]
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: mainnet_Bytes
  delegate: mainnet_Bytes
  receiveLocal: Boolean
  callData: mainnet_Bytes
  slippage: BigInt
  bumpSlippageCount: BigInt
  originSender: mainnet_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: mainnet_Bytes
  asset: mainnet_Asset
  amount: BigInt
  routersFee: BigInt
  executedCaller: mainnet_Bytes
  executedTransactionHash: mainnet_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  executedTxOrigin: mainnet_Bytes
  executedTxNonce: BigInt
  reconciledCaller: mainnet_Bytes
  reconciledTransactionHash: mainnet_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
  reconciledTxOrigin: mainnet_Bytes
  reconciledTxNonce: BigInt
}

input mainnet_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mainnet_Bytes
  transferId_not: mainnet_Bytes
  transferId_in: [mainnet_Bytes!]
  transferId_not_in: [mainnet_Bytes!]
  transferId_contains: mainnet_Bytes
  transferId_not_contains: mainnet_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: mainnet_TransferStatus
  status_not: mainnet_TransferStatus
  status_in: [mainnet_TransferStatus!]
  status_not_in: [mainnet_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: mainnet_Router_filter
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: mainnet_Bytes
  to_not: mainnet_Bytes
  to_in: [mainnet_Bytes!]
  to_not_in: [mainnet_Bytes!]
  to_contains: mainnet_Bytes
  to_not_contains: mainnet_Bytes
  delegate: mainnet_Bytes
  delegate_not: mainnet_Bytes
  delegate_in: [mainnet_Bytes!]
  delegate_not_in: [mainnet_Bytes!]
  delegate_contains: mainnet_Bytes
  delegate_not_contains: mainnet_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: mainnet_Bytes
  callData_not: mainnet_Bytes
  callData_in: [mainnet_Bytes!]
  callData_not_in: [mainnet_Bytes!]
  callData_contains: mainnet_Bytes
  callData_not_contains: mainnet_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  bumpSlippageCount: BigInt
  bumpSlippageCount_not: BigInt
  bumpSlippageCount_gt: BigInt
  bumpSlippageCount_lt: BigInt
  bumpSlippageCount_gte: BigInt
  bumpSlippageCount_lte: BigInt
  bumpSlippageCount_in: [BigInt!]
  bumpSlippageCount_not_in: [BigInt!]
  originSender: mainnet_Bytes
  originSender_not: mainnet_Bytes
  originSender_in: [mainnet_Bytes!]
  originSender_not_in: [mainnet_Bytes!]
  originSender_contains: mainnet_Bytes
  originSender_not_contains: mainnet_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: mainnet_Bytes
  canonicalId_not: mainnet_Bytes
  canonicalId_in: [mainnet_Bytes!]
  canonicalId_not_in: [mainnet_Bytes!]
  canonicalId_contains: mainnet_Bytes
  canonicalId_not_contains: mainnet_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mainnet_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  routersFee: BigInt
  routersFee_not: BigInt
  routersFee_gt: BigInt
  routersFee_lt: BigInt
  routersFee_gte: BigInt
  routersFee_lte: BigInt
  routersFee_in: [BigInt!]
  routersFee_not_in: [BigInt!]
  executedCaller: mainnet_Bytes
  executedCaller_not: mainnet_Bytes
  executedCaller_in: [mainnet_Bytes!]
  executedCaller_not_in: [mainnet_Bytes!]
  executedCaller_contains: mainnet_Bytes
  executedCaller_not_contains: mainnet_Bytes
  executedTransactionHash: mainnet_Bytes
  executedTransactionHash_not: mainnet_Bytes
  executedTransactionHash_in: [mainnet_Bytes!]
  executedTransactionHash_not_in: [mainnet_Bytes!]
  executedTransactionHash_contains: mainnet_Bytes
  executedTransactionHash_not_contains: mainnet_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  executedTxOrigin: mainnet_Bytes
  executedTxOrigin_not: mainnet_Bytes
  executedTxOrigin_in: [mainnet_Bytes!]
  executedTxOrigin_not_in: [mainnet_Bytes!]
  executedTxOrigin_contains: mainnet_Bytes
  executedTxOrigin_not_contains: mainnet_Bytes
  executedTxNonce: BigInt
  executedTxNonce_not: BigInt
  executedTxNonce_gt: BigInt
  executedTxNonce_lt: BigInt
  executedTxNonce_gte: BigInt
  executedTxNonce_lte: BigInt
  executedTxNonce_in: [BigInt!]
  executedTxNonce_not_in: [BigInt!]
  reconciledCaller: mainnet_Bytes
  reconciledCaller_not: mainnet_Bytes
  reconciledCaller_in: [mainnet_Bytes!]
  reconciledCaller_not_in: [mainnet_Bytes!]
  reconciledCaller_contains: mainnet_Bytes
  reconciledCaller_not_contains: mainnet_Bytes
  reconciledTransactionHash: mainnet_Bytes
  reconciledTransactionHash_not: mainnet_Bytes
  reconciledTransactionHash_in: [mainnet_Bytes!]
  reconciledTransactionHash_not_in: [mainnet_Bytes!]
  reconciledTransactionHash_contains: mainnet_Bytes
  reconciledTransactionHash_not_contains: mainnet_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  reconciledTxOrigin: mainnet_Bytes
  reconciledTxOrigin_not: mainnet_Bytes
  reconciledTxOrigin_in: [mainnet_Bytes!]
  reconciledTxOrigin_not_in: [mainnet_Bytes!]
  reconciledTxOrigin_contains: mainnet_Bytes
  reconciledTxOrigin_not_contains: mainnet_Bytes
  reconciledTxNonce: BigInt
  reconciledTxNonce_not: BigInt
  reconciledTxNonce_gt: BigInt
  reconciledTxNonce_lt: BigInt
  reconciledTxNonce_gte: BigInt
  reconciledTxNonce_lte: BigInt
  reconciledTxNonce_in: [BigInt!]
  reconciledTxNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  routers
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  bumpSlippageCount
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  amount
  routersFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  executedTxOrigin
  executedTxNonce
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
  reconciledTxOrigin
  reconciledTxNonce
}

type mainnet_OptimisticRootFinalized {
  id: ID!
  aggregateRoot: mainnet_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input mainnet_OptimisticRootFinalized_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: mainnet_Bytes
  aggregateRoot_not: mainnet_Bytes
  aggregateRoot_in: [mainnet_Bytes!]
  aggregateRoot_not_in: [mainnet_Bytes!]
  aggregateRoot_contains: mainnet_Bytes
  aggregateRoot_not_contains: mainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_OptimisticRootFinalized_orderBy {
  id
  aggregateRoot
  timestamp
  blockNumber
}

"""Defines the order direction, either ascending or descending"""
enum mainnet_OrderDirection {
  asc
  desc
}

type mainnet_OriginMessage {
  id: ID!
  transferId: mainnet_Bytes
  destinationDomain: BigInt
  leaf: mainnet_Bytes
  index: BigInt
  message: mainnet_Bytes
  root: mainnet_Bytes
  transactionHash: mainnet_Bytes
  blockNumber: BigInt
  rootCount: mainnet_RootCount
}

input mainnet_OriginMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferId: mainnet_Bytes
  transferId_not: mainnet_Bytes
  transferId_in: [mainnet_Bytes!]
  transferId_not_in: [mainnet_Bytes!]
  transferId_contains: mainnet_Bytes
  transferId_not_contains: mainnet_Bytes
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  leaf: mainnet_Bytes
  leaf_not: mainnet_Bytes
  leaf_in: [mainnet_Bytes!]
  leaf_not_in: [mainnet_Bytes!]
  leaf_contains: mainnet_Bytes
  leaf_not_contains: mainnet_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  message: mainnet_Bytes
  message_not: mainnet_Bytes
  message_in: [mainnet_Bytes!]
  message_not_in: [mainnet_Bytes!]
  message_contains: mainnet_Bytes
  message_not_contains: mainnet_Bytes
  root: mainnet_Bytes
  root_not: mainnet_Bytes
  root_in: [mainnet_Bytes!]
  root_not_in: [mainnet_Bytes!]
  root_contains: mainnet_Bytes
  root_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  rootCount: String
  rootCount_not: String
  rootCount_gt: String
  rootCount_lt: String
  rootCount_gte: String
  rootCount_lte: String
  rootCount_in: [String!]
  rootCount_not_in: [String!]
  rootCount_contains: String
  rootCount_contains_nocase: String
  rootCount_not_contains: String
  rootCount_not_contains_nocase: String
  rootCount_starts_with: String
  rootCount_starts_with_nocase: String
  rootCount_not_starts_with: String
  rootCount_not_starts_with_nocase: String
  rootCount_ends_with: String
  rootCount_ends_with_nocase: String
  rootCount_not_ends_with: String
  rootCount_not_ends_with_nocase: String
  rootCount_: mainnet_RootCount_filter
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_OriginMessage_orderBy {
  id
  transferId
  destinationDomain
  leaf
  index
  message
  root
  transactionHash
  blockNumber
  rootCount
}

type mainnet_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: mainnet_Bytes
  nonce: BigInt
  status: mainnet_TransferStatus
  messageHash: mainnet_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  canonicalDomain: BigInt
  to: mainnet_Bytes
  delegate: mainnet_Bytes
  receiveLocal: Boolean
  callData: mainnet_Bytes
  slippage: BigInt
  originSender: mainnet_Bytes
  bridgedAmt: BigInt
  normalizedIn: BigInt
  canonicalId: mainnet_Bytes
  asset: mainnet_Asset
  transactingAsset: mainnet_Bytes
  message: mainnet_OriginMessage
  bumpRelayerFeeCount: BigInt
  relayerFees(skip: Int = 0, first: Int = 100, orderBy: mainnet_RelayerFee_orderBy, orderDirection: mainnet_OrderDirection, where: mainnet_RelayerFee_filter): [mainnet_RelayerFee!]
  initialRelayerFeeAsset: mainnet_Bytes
  caller: mainnet_Bytes
  transactionHash: mainnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
  txOrigin: mainnet_Bytes
  txNonce: BigInt
}

input mainnet_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: mainnet_Bytes
  transferId_not: mainnet_Bytes
  transferId_in: [mainnet_Bytes!]
  transferId_not_in: [mainnet_Bytes!]
  transferId_contains: mainnet_Bytes
  transferId_not_contains: mainnet_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  status: mainnet_TransferStatus
  status_not: mainnet_TransferStatus
  status_in: [mainnet_TransferStatus!]
  status_not_in: [mainnet_TransferStatus!]
  messageHash: mainnet_Bytes
  messageHash_not: mainnet_Bytes
  messageHash_in: [mainnet_Bytes!]
  messageHash_not_in: [mainnet_Bytes!]
  messageHash_contains: mainnet_Bytes
  messageHash_not_contains: mainnet_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  to: mainnet_Bytes
  to_not: mainnet_Bytes
  to_in: [mainnet_Bytes!]
  to_not_in: [mainnet_Bytes!]
  to_contains: mainnet_Bytes
  to_not_contains: mainnet_Bytes
  delegate: mainnet_Bytes
  delegate_not: mainnet_Bytes
  delegate_in: [mainnet_Bytes!]
  delegate_not_in: [mainnet_Bytes!]
  delegate_contains: mainnet_Bytes
  delegate_not_contains: mainnet_Bytes
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callData: mainnet_Bytes
  callData_not: mainnet_Bytes
  callData_in: [mainnet_Bytes!]
  callData_not_in: [mainnet_Bytes!]
  callData_contains: mainnet_Bytes
  callData_not_contains: mainnet_Bytes
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  originSender: mainnet_Bytes
  originSender_not: mainnet_Bytes
  originSender_in: [mainnet_Bytes!]
  originSender_not_in: [mainnet_Bytes!]
  originSender_contains: mainnet_Bytes
  originSender_not_contains: mainnet_Bytes
  bridgedAmt: BigInt
  bridgedAmt_not: BigInt
  bridgedAmt_gt: BigInt
  bridgedAmt_lt: BigInt
  bridgedAmt_gte: BigInt
  bridgedAmt_lte: BigInt
  bridgedAmt_in: [BigInt!]
  bridgedAmt_not_in: [BigInt!]
  normalizedIn: BigInt
  normalizedIn_not: BigInt
  normalizedIn_gt: BigInt
  normalizedIn_lt: BigInt
  normalizedIn_gte: BigInt
  normalizedIn_lte: BigInt
  normalizedIn_in: [BigInt!]
  normalizedIn_not_in: [BigInt!]
  canonicalId: mainnet_Bytes
  canonicalId_not: mainnet_Bytes
  canonicalId_in: [mainnet_Bytes!]
  canonicalId_not_in: [mainnet_Bytes!]
  canonicalId_contains: mainnet_Bytes
  canonicalId_not_contains: mainnet_Bytes
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mainnet_Asset_filter
  transactingAsset: mainnet_Bytes
  transactingAsset_not: mainnet_Bytes
  transactingAsset_in: [mainnet_Bytes!]
  transactingAsset_not_in: [mainnet_Bytes!]
  transactingAsset_contains: mainnet_Bytes
  transactingAsset_not_contains: mainnet_Bytes
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_: mainnet_OriginMessage_filter
  bumpRelayerFeeCount: BigInt
  bumpRelayerFeeCount_not: BigInt
  bumpRelayerFeeCount_gt: BigInt
  bumpRelayerFeeCount_lt: BigInt
  bumpRelayerFeeCount_gte: BigInt
  bumpRelayerFeeCount_lte: BigInt
  bumpRelayerFeeCount_in: [BigInt!]
  bumpRelayerFeeCount_not_in: [BigInt!]
  relayerFees: [String!]
  relayerFees_not: [String!]
  relayerFees_contains: [String!]
  relayerFees_contains_nocase: [String!]
  relayerFees_not_contains: [String!]
  relayerFees_not_contains_nocase: [String!]
  relayerFees_: mainnet_RelayerFee_filter
  initialRelayerFeeAsset: mainnet_Bytes
  initialRelayerFeeAsset_not: mainnet_Bytes
  initialRelayerFeeAsset_in: [mainnet_Bytes!]
  initialRelayerFeeAsset_not_in: [mainnet_Bytes!]
  initialRelayerFeeAsset_contains: mainnet_Bytes
  initialRelayerFeeAsset_not_contains: mainnet_Bytes
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  txOrigin: mainnet_Bytes
  txOrigin_not: mainnet_Bytes
  txOrigin_in: [mainnet_Bytes!]
  txOrigin_not_in: [mainnet_Bytes!]
  txOrigin_contains: mainnet_Bytes
  txOrigin_not_contains: mainnet_Bytes
  txNonce: BigInt
  txNonce_not: BigInt
  txNonce_gt: BigInt
  txNonce_lt: BigInt
  txNonce_gte: BigInt
  txNonce_lte: BigInt
  txNonce_in: [BigInt!]
  txNonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  status
  messageHash
  originDomain
  destinationDomain
  canonicalDomain
  to
  delegate
  receiveLocal
  callData
  slippage
  originSender
  bridgedAmt
  normalizedIn
  canonicalId
  asset
  transactingAsset
  message
  bumpRelayerFeeCount
  relayerFees
  initialRelayerFeeAsset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
  txOrigin
  txNonce
}

type Query {
  mainnet_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Asset
  mainnet_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Asset_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Asset!]!
  mainnet_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AssetStatus
  mainnet_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AssetStatus_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AssetStatus!]!
  mainnet_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AssetBalance
  mainnet_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AssetBalance_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AssetBalance!]!
  mainnet_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Router
  mainnet_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Router_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Router!]!
  mainnet_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RouterDailyTVL
  mainnet_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RouterDailyTVL_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RouterDailyTVL!]!
  mainnet_routerLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RouterLiquidityEvent
  mainnet_routerLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RouterLiquidityEvent_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RouterLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RouterLiquidityEvent!]!
  mainnet_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Setting
  mainnet_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Setting_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Setting!]!
  mainnet_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Relayer
  mainnet_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Relayer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Relayer!]!
  mainnet_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Sequencer
  mainnet_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Sequencer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Sequencer!]!
  mainnet_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RelayerFee
  mainnet_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RelayerFee_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RelayerFee!]!
  mainnet_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OriginTransfer
  mainnet_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OriginTransfer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OriginTransfer!]!
  mainnet_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_DestinationTransfer
  mainnet_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_DestinationTransfer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_DestinationTransfer!]!
  mainnet_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OriginMessage
  mainnet_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OriginMessage_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OriginMessage!]!
  mainnet_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregateRoot
  mainnet_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregateRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregateRoot!]!
  mainnet_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_ConnectorMeta
  mainnet_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_ConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_ConnectorMeta!]!
  mainnet_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootCount
  mainnet_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootCount_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootCount!]!
  mainnet_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootMessageSent
  mainnet_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootMessageSent_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootMessageSent!]!
  mainnet_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RelayerFeesIncrease
  mainnet_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RelayerFeesIncrease_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RelayerFeesIncrease!]!
  mainnet_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_SlippageUpdate
  mainnet_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_SlippageUpdate_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_SlippageUpdate!]!
  mainnet_snapshotRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_SnapshotRoot
  mainnet_snapshotRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_SnapshotRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_SnapshotRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_SnapshotRoot!]!
  mainnet_spokeConnectorMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_SpokeConnectorMode
  mainnet_spokeConnectorModes(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_SpokeConnectorMode_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_SpokeConnectorMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_SpokeConnectorMode!]!
  mainnet_aggregateRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregateRootProposed
  mainnet_aggregateRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregateRootProposed_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregateRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregateRootProposed!]!
  mainnet_optimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OptimisticRootFinalized
  mainnet_optimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OptimisticRootFinalized_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OptimisticRootFinalized!]!
  """Access to subgraph metadata"""
  mainnet__meta(block: mainnet_Block_height): mainnet__Meta_
}

type mainnet_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: mainnet_Bytes
}

type mainnet_RelayerFee {
  id: ID!
  transfer: mainnet_OriginTransfer!
  fee: BigInt!
  asset: mainnet_Bytes!
}

input mainnet_RelayerFee_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: mainnet_OriginTransfer_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  asset: mainnet_Bytes
  asset_not: mainnet_Bytes
  asset_in: [mainnet_Bytes!]
  asset_not_in: [mainnet_Bytes!]
  asset_contains: mainnet_Bytes
  asset_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RelayerFee_orderBy {
  id
  transfer
  fee
  asset
}

type mainnet_RelayerFeesIncrease {
  id: ID!
  transfer: mainnet_OriginTransfer!
  increase: BigInt
  asset: mainnet_Bytes
  caller: mainnet_Bytes!
  transactionHash: mainnet_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input mainnet_RelayerFeesIncrease_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: mainnet_OriginTransfer_filter
  increase: BigInt
  increase_not: BigInt
  increase_gt: BigInt
  increase_lt: BigInt
  increase_gte: BigInt
  increase_lte: BigInt
  increase_in: [BigInt!]
  increase_not_in: [BigInt!]
  asset: mainnet_Bytes
  asset_not: mainnet_Bytes
  asset_in: [mainnet_Bytes!]
  asset_not_in: [mainnet_Bytes!]
  asset_contains: mainnet_Bytes
  asset_not_contains: mainnet_Bytes
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RelayerFeesIncrease_orderBy {
  id
  transfer
  increase
  asset
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

input mainnet_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: mainnet_Bytes
  relayer_not: mainnet_Bytes
  relayer_in: [mainnet_Bytes!]
  relayer_not_in: [mainnet_Bytes!]
  relayer_contains: mainnet_Bytes
  relayer_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Relayer_orderBy {
  id
  isActive
  relayer
}

type mainnet_RootCount {
  id: ID!
  count: BigInt
}

input mainnet_RootCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RootCount_orderBy {
  id
  count
}

type mainnet_RootMessageSent {
  id: ID!
  spokeDomain: BigInt
  hubDomain: BigInt
  root: mainnet_Bytes
  count: BigInt
  caller: mainnet_Bytes
  transactionHash: mainnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input mainnet_RootMessageSent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: mainnet_Bytes
  root_not: mainnet_Bytes
  root_in: [mainnet_Bytes!]
  root_not_in: [mainnet_Bytes!]
  root_contains: mainnet_Bytes
  root_not_contains: mainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RootMessageSent_orderBy {
  id
  spokeDomain
  hubDomain
  root
  count
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mainnet_Router {
  id: ID!
  isActive: Boolean!
  owner: mainnet_Bytes
  recipient: mainnet_Bytes
  proposedOwner: mainnet_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: mainnet_AssetBalance_orderBy, orderDirection: mainnet_OrderDirection, where: mainnet_AssetBalance_filter): [mainnet_AssetBalance!]!
}

type mainnet_RouterDailyTVL {
  id: ID!
  router: mainnet_Router!
  asset: mainnet_Asset!
  timestamp: BigInt!
  balance: BigInt!
}

input mainnet_RouterDailyTVL_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: mainnet_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mainnet_Asset_filter
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RouterDailyTVL_orderBy {
  id
  router
  asset
  timestamp
  balance
}

type mainnet_RouterLiquidityEvent {
  id: ID!
  type: mainnet_RouterLiquidityEventType
  router: mainnet_Router!
  asset: mainnet_Asset!
  amount: BigInt!
  balance: BigInt!
  caller: mainnet_Bytes
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: mainnet_Bytes!
  nonce: BigInt!
}

enum mainnet_RouterLiquidityEventType {
  Add
  Remove
}

input mainnet_RouterLiquidityEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  type: mainnet_RouterLiquidityEventType
  type_not: mainnet_RouterLiquidityEventType
  type_in: [mainnet_RouterLiquidityEventType!]
  type_not_in: [mainnet_RouterLiquidityEventType!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: mainnet_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: mainnet_Asset_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  balance: BigInt
  balance_not: BigInt
  balance_gt: BigInt
  balance_lt: BigInt
  balance_gte: BigInt
  balance_lte: BigInt
  balance_in: [BigInt!]
  balance_not_in: [BigInt!]
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_RouterLiquidityEvent_orderBy {
  id
  type
  router
  asset
  amount
  balance
  caller
  blockNumber
  timestamp
  transactionHash
  nonce
}

input mainnet_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: mainnet_Bytes
  owner_not: mainnet_Bytes
  owner_in: [mainnet_Bytes!]
  owner_not_in: [mainnet_Bytes!]
  owner_contains: mainnet_Bytes
  owner_not_contains: mainnet_Bytes
  recipient: mainnet_Bytes
  recipient_not: mainnet_Bytes
  recipient_in: [mainnet_Bytes!]
  recipient_not_in: [mainnet_Bytes!]
  recipient_contains: mainnet_Bytes
  recipient_not_contains: mainnet_Bytes
  proposedOwner: mainnet_Bytes
  proposedOwner_not: mainnet_Bytes
  proposedOwner_in: [mainnet_Bytes!]
  proposedOwner_not_in: [mainnet_Bytes!]
  proposedOwner_contains: mainnet_Bytes
  proposedOwner_not_contains: mainnet_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: mainnet_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type mainnet_Sequencer {
  id: ID!
  isActive: Boolean!
  sequencer: mainnet_Bytes
}

input mainnet_Sequencer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  sequencer: mainnet_Bytes
  sequencer_not: mainnet_Bytes
  sequencer_in: [mainnet_Bytes!]
  sequencer_not_in: [mainnet_Bytes!]
  sequencer_contains: mainnet_Bytes
  sequencer_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Sequencer_orderBy {
  id
  isActive
  sequencer
}

type mainnet_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: mainnet_Bytes!
}

input mainnet_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type mainnet_SlippageUpdate {
  id: ID!
  transfer: mainnet_DestinationTransfer!
  slippage: BigInt!
  caller: mainnet_Bytes!
  transactionHash: mainnet_Bytes!
  timestamp: BigInt!
  gasPrice: BigInt!
  gasLimit: BigInt!
  blockNumber: BigInt!
}

input mainnet_SlippageUpdate_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transfer: String
  transfer_not: String
  transfer_gt: String
  transfer_lt: String
  transfer_gte: String
  transfer_lte: String
  transfer_in: [String!]
  transfer_not_in: [String!]
  transfer_contains: String
  transfer_contains_nocase: String
  transfer_not_contains: String
  transfer_not_contains_nocase: String
  transfer_starts_with: String
  transfer_starts_with_nocase: String
  transfer_not_starts_with: String
  transfer_not_starts_with_nocase: String
  transfer_ends_with: String
  transfer_ends_with_nocase: String
  transfer_not_ends_with: String
  transfer_not_ends_with_nocase: String
  transfer_: mainnet_DestinationTransfer_filter
  slippage: BigInt
  slippage_not: BigInt
  slippage_gt: BigInt
  slippage_lt: BigInt
  slippage_gte: BigInt
  slippage_lte: BigInt
  slippage_in: [BigInt!]
  slippage_not_in: [BigInt!]
  caller: mainnet_Bytes
  caller_not: mainnet_Bytes
  caller_in: [mainnet_Bytes!]
  caller_not_in: [mainnet_Bytes!]
  caller_contains: mainnet_Bytes
  caller_not_contains: mainnet_Bytes
  transactionHash: mainnet_Bytes
  transactionHash_not: mainnet_Bytes
  transactionHash_in: [mainnet_Bytes!]
  transactionHash_not_in: [mainnet_Bytes!]
  transactionHash_contains: mainnet_Bytes
  transactionHash_not_contains: mainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_SlippageUpdate_orderBy {
  id
  transfer
  slippage
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type mainnet_SnapshotRoot {
  id: ID!
  spokeDomain: BigInt
  root: mainnet_Bytes!
  count: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

input mainnet_SnapshotRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  root: mainnet_Bytes
  root_not: mainnet_Bytes
  root_in: [mainnet_Bytes!]
  root_not_in: [mainnet_Bytes!]
  root_contains: mainnet_Bytes
  root_not_contains: mainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_SnapshotRoot_orderBy {
  id
  spokeDomain
  root
  count
  timestamp
  blockNumber
}

type mainnet_SpokeConnectorMode {
  id: ID!
  mode: String!
}

input mainnet_SpokeConnectorMode_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  mode: String
  mode_not: String
  mode_gt: String
  mode_lt: String
  mode_gte: String
  mode_lte: String
  mode_in: [String!]
  mode_not_in: [String!]
  mode_contains: String
  mode_contains_nocase: String
  mode_not_contains: String
  mode_not_contains_nocase: String
  mode_starts_with: String
  mode_starts_with_nocase: String
  mode_not_starts_with: String
  mode_not_starts_with_nocase: String
  mode_ends_with: String
  mode_ends_with_nocase: String
  mode_not_ends_with: String
  mode_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: mainnet_BlockChangedFilter
}

enum mainnet_SpokeConnectorMode_orderBy {
  id
  mode
}

type Subscription {
  mainnet_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Asset
  mainnet_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Asset_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Asset!]!
  mainnet_assetStatus(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AssetStatus
  mainnet_assetStatuses(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AssetStatus_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AssetStatus_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AssetStatus!]!
  mainnet_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AssetBalance
  mainnet_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AssetBalance_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AssetBalance!]!
  mainnet_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Router
  mainnet_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Router_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Router!]!
  mainnet_routerDailyTVL(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RouterDailyTVL
  mainnet_routerDailyTVLs(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RouterDailyTVL_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RouterDailyTVL_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RouterDailyTVL!]!
  mainnet_routerLiquidityEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RouterLiquidityEvent
  mainnet_routerLiquidityEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RouterLiquidityEvent_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RouterLiquidityEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RouterLiquidityEvent!]!
  mainnet_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Setting
  mainnet_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Setting_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Setting!]!
  mainnet_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Relayer
  mainnet_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Relayer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Relayer!]!
  mainnet_sequencer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_Sequencer
  mainnet_sequencers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_Sequencer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_Sequencer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_Sequencer!]!
  mainnet_relayerFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RelayerFee
  mainnet_relayerFees(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RelayerFee_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RelayerFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RelayerFee!]!
  mainnet_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OriginTransfer
  mainnet_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OriginTransfer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OriginTransfer!]!
  mainnet_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_DestinationTransfer
  mainnet_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_DestinationTransfer_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_DestinationTransfer!]!
  mainnet_originMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OriginMessage
  mainnet_originMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OriginMessage_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OriginMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OriginMessage!]!
  mainnet_aggregateRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregateRoot
  mainnet_aggregateRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregateRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregateRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregateRoot!]!
  mainnet_connectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_ConnectorMeta
  mainnet_connectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_ConnectorMeta_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_ConnectorMeta!]!
  mainnet_rootCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootCount
  mainnet_rootCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootCount_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootCount!]!
  mainnet_rootMessageSent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RootMessageSent
  mainnet_rootMessageSents(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RootMessageSent_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RootMessageSent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RootMessageSent!]!
  mainnet_relayerFeesIncrease(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_RelayerFeesIncrease
  mainnet_relayerFeesIncreases(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_RelayerFeesIncrease_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_RelayerFeesIncrease_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_RelayerFeesIncrease!]!
  mainnet_slippageUpdate(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_SlippageUpdate
  mainnet_slippageUpdates(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_SlippageUpdate_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_SlippageUpdate_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_SlippageUpdate!]!
  mainnet_snapshotRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_SnapshotRoot
  mainnet_snapshotRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_SnapshotRoot_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_SnapshotRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_SnapshotRoot!]!
  mainnet_spokeConnectorMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_SpokeConnectorMode
  mainnet_spokeConnectorModes(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_SpokeConnectorMode_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_SpokeConnectorMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_SpokeConnectorMode!]!
  mainnet_aggregateRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_AggregateRootProposed
  mainnet_aggregateRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_AggregateRootProposed_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_AggregateRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_AggregateRootProposed!]!
  mainnet_optimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): mainnet_OptimisticRootFinalized
  mainnet_optimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: mainnet_OptimisticRootFinalized_orderBy
    orderDirection: mainnet_OrderDirection
    where: mainnet_OptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: mainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [mainnet_OptimisticRootFinalized!]!
  """Access to subgraph metadata"""
  mainnet__meta(block: mainnet_Block_height): mainnet__Meta_
}

enum mainnet_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type mainnet__Block_ {
  """The hash of the block"""
  hash: mainnet_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type mainnet__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: mainnet__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}