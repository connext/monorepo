schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum testgoerli_Aggregation_interval {
  hour
  day
}

type testgoerli_Asset {
  id: ID!
  key: testgoerli_Bytes
  local: testgoerli_Bytes!
  adoptedAsset: testgoerli_Bytes!
  canonicalId: testgoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type testgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testgoerli_Router!
  asset: testgoerli_Asset!
}

input testgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: testgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: testgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
  and: [testgoerli_AssetBalance_filter]
  or: [testgoerli_AssetBalance_filter]
}

enum testgoerli_AssetBalance_orderBy {
  id
  amount
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__local
  asset__adoptedAsset
  asset__canonicalId
  asset__canonicalDomain
  asset__blockNumber
}

input testgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: testgoerli_Bytes
  key_not: testgoerli_Bytes
  key_gt: testgoerli_Bytes
  key_lt: testgoerli_Bytes
  key_gte: testgoerli_Bytes
  key_lte: testgoerli_Bytes
  key_in: [testgoerli_Bytes!]
  key_not_in: [testgoerli_Bytes!]
  key_contains: testgoerli_Bytes
  key_not_contains: testgoerli_Bytes
  local: testgoerli_Bytes
  local_not: testgoerli_Bytes
  local_gt: testgoerli_Bytes
  local_lt: testgoerli_Bytes
  local_gte: testgoerli_Bytes
  local_lte: testgoerli_Bytes
  local_in: [testgoerli_Bytes!]
  local_not_in: [testgoerli_Bytes!]
  local_contains: testgoerli_Bytes
  local_not_contains: testgoerli_Bytes
  adoptedAsset: testgoerli_Bytes
  adoptedAsset_not: testgoerli_Bytes
  adoptedAsset_gt: testgoerli_Bytes
  adoptedAsset_lt: testgoerli_Bytes
  adoptedAsset_gte: testgoerli_Bytes
  adoptedAsset_lte: testgoerli_Bytes
  adoptedAsset_in: [testgoerli_Bytes!]
  adoptedAsset_not_in: [testgoerli_Bytes!]
  adoptedAsset_contains: testgoerli_Bytes
  adoptedAsset_not_contains: testgoerli_Bytes
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_gt: testgoerli_Bytes
  canonicalId_lt: testgoerli_Bytes
  canonicalId_gte: testgoerli_Bytes
  canonicalId_lte: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
  and: [testgoerli_Asset_filter]
  or: [testgoerli_Asset_filter]
}

enum testgoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar testgoerli_BigDecimal

scalar BigInt

input testgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testgoerli_Block_height {
  hash: testgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar testgoerli_Bytes

type testgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testgoerli_Router_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_Router_filter): [testgoerli_Router!]
  originSender: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input testgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_gt: testgoerli_Bytes
  transferId_lt: testgoerli_Bytes
  transferId_gte: testgoerli_Bytes
  transferId_lte: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_gt: testgoerli_Bytes
  to_lt: testgoerli_Bytes
  to_gte: testgoerli_Bytes
  to_lte: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_gt: testgoerli_Bytes
  callData_lt: testgoerli_Bytes
  callData_gte: testgoerli_Bytes
  callData_lte: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_gt: testgoerli_Bytes
  agent_lt: testgoerli_Bytes
  agent_gte: testgoerli_Bytes
  agent_lte: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_gt: testgoerli_Bytes
  recovery_lt: testgoerli_Bytes
  recovery_gte: testgoerli_Bytes
  recovery_lte: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_gt: testgoerli_Bytes
  callback_lt: testgoerli_Bytes
  callback_gte: testgoerli_Bytes
  callback_lte: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: testgoerli_Router_filter
  originSender: testgoerli_Bytes
  originSender_not: testgoerli_Bytes
  originSender_gt: testgoerli_Bytes
  originSender_lt: testgoerli_Bytes
  originSender_gte: testgoerli_Bytes
  originSender_lte: testgoerli_Bytes
  originSender_in: [testgoerli_Bytes!]
  originSender_not_in: [testgoerli_Bytes!]
  originSender_contains: testgoerli_Bytes
  originSender_not_contains: testgoerli_Bytes
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_gt: testgoerli_Bytes
  transactingAsset_lt: testgoerli_Bytes
  transactingAsset_gte: testgoerli_Bytes
  transactingAsset_lte: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: testgoerli_Bytes
  localAsset_not: testgoerli_Bytes
  localAsset_gt: testgoerli_Bytes
  localAsset_lt: testgoerli_Bytes
  localAsset_gte: testgoerli_Bytes
  localAsset_lte: testgoerli_Bytes
  localAsset_in: [testgoerli_Bytes!]
  localAsset_not_in: [testgoerli_Bytes!]
  localAsset_contains: testgoerli_Bytes
  localAsset_not_contains: testgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: testgoerli_Bytes
  executedCaller_not: testgoerli_Bytes
  executedCaller_gt: testgoerli_Bytes
  executedCaller_lt: testgoerli_Bytes
  executedCaller_gte: testgoerli_Bytes
  executedCaller_lte: testgoerli_Bytes
  executedCaller_in: [testgoerli_Bytes!]
  executedCaller_not_in: [testgoerli_Bytes!]
  executedCaller_contains: testgoerli_Bytes
  executedCaller_not_contains: testgoerli_Bytes
  executedTransactionHash: testgoerli_Bytes
  executedTransactionHash_not: testgoerli_Bytes
  executedTransactionHash_gt: testgoerli_Bytes
  executedTransactionHash_lt: testgoerli_Bytes
  executedTransactionHash_gte: testgoerli_Bytes
  executedTransactionHash_lte: testgoerli_Bytes
  executedTransactionHash_in: [testgoerli_Bytes!]
  executedTransactionHash_not_in: [testgoerli_Bytes!]
  executedTransactionHash_contains: testgoerli_Bytes
  executedTransactionHash_not_contains: testgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: testgoerli_Bytes
  reconciledCaller_not: testgoerli_Bytes
  reconciledCaller_gt: testgoerli_Bytes
  reconciledCaller_lt: testgoerli_Bytes
  reconciledCaller_gte: testgoerli_Bytes
  reconciledCaller_lte: testgoerli_Bytes
  reconciledCaller_in: [testgoerli_Bytes!]
  reconciledCaller_not_in: [testgoerli_Bytes!]
  reconciledCaller_contains: testgoerli_Bytes
  reconciledCaller_not_contains: testgoerli_Bytes
  reconciledTransactionHash: testgoerli_Bytes
  reconciledTransactionHash_not: testgoerli_Bytes
  reconciledTransactionHash_gt: testgoerli_Bytes
  reconciledTransactionHash_lt: testgoerli_Bytes
  reconciledTransactionHash_gte: testgoerli_Bytes
  reconciledTransactionHash_lte: testgoerli_Bytes
  reconciledTransactionHash_in: [testgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testgoerli_Bytes!]
  reconciledTransactionHash_contains: testgoerli_Bytes
  reconciledTransactionHash_not_contains: testgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
  and: [testgoerli_DestinationTransfer_filter]
  or: [testgoerli_DestinationTransfer_filter]
}

enum testgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""
8 bytes signed integer

"""
scalar testgoerli_Int8

"""Defines the order direction, either ascending or descending"""
enum testgoerli_OrderDirection {
  asc
  desc
}

type testgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testgoerli_Bytes
  nonce: BigInt
  to: testgoerli_Bytes
  callData: testgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testgoerli_Bytes
  recovery: testgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testgoerli_Bytes
  bridgedAmount: BigInt
  caller: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testgoerli_Bytes
  transferId_not: testgoerli_Bytes
  transferId_gt: testgoerli_Bytes
  transferId_lt: testgoerli_Bytes
  transferId_gte: testgoerli_Bytes
  transferId_lte: testgoerli_Bytes
  transferId_in: [testgoerli_Bytes!]
  transferId_not_in: [testgoerli_Bytes!]
  transferId_contains: testgoerli_Bytes
  transferId_not_contains: testgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testgoerli_Bytes
  to_not: testgoerli_Bytes
  to_gt: testgoerli_Bytes
  to_lt: testgoerli_Bytes
  to_gte: testgoerli_Bytes
  to_lte: testgoerli_Bytes
  to_in: [testgoerli_Bytes!]
  to_not_in: [testgoerli_Bytes!]
  to_contains: testgoerli_Bytes
  to_not_contains: testgoerli_Bytes
  callData: testgoerli_Bytes
  callData_not: testgoerli_Bytes
  callData_gt: testgoerli_Bytes
  callData_lt: testgoerli_Bytes
  callData_gte: testgoerli_Bytes
  callData_lte: testgoerli_Bytes
  callData_in: [testgoerli_Bytes!]
  callData_not_in: [testgoerli_Bytes!]
  callData_contains: testgoerli_Bytes
  callData_not_contains: testgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testgoerli_Bytes
  agent_not: testgoerli_Bytes
  agent_gt: testgoerli_Bytes
  agent_lt: testgoerli_Bytes
  agent_gte: testgoerli_Bytes
  agent_lte: testgoerli_Bytes
  agent_in: [testgoerli_Bytes!]
  agent_not_in: [testgoerli_Bytes!]
  agent_contains: testgoerli_Bytes
  agent_not_contains: testgoerli_Bytes
  recovery: testgoerli_Bytes
  recovery_not: testgoerli_Bytes
  recovery_gt: testgoerli_Bytes
  recovery_lt: testgoerli_Bytes
  recovery_gte: testgoerli_Bytes
  recovery_lte: testgoerli_Bytes
  recovery_in: [testgoerli_Bytes!]
  recovery_not_in: [testgoerli_Bytes!]
  recovery_contains: testgoerli_Bytes
  recovery_not_contains: testgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testgoerli_Bytes
  callback_not: testgoerli_Bytes
  callback_gt: testgoerli_Bytes
  callback_lt: testgoerli_Bytes
  callback_gte: testgoerli_Bytes
  callback_lte: testgoerli_Bytes
  callback_in: [testgoerli_Bytes!]
  callback_not_in: [testgoerli_Bytes!]
  callback_contains: testgoerli_Bytes
  callback_not_contains: testgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testgoerli_TransferStatus
  status_not: testgoerli_TransferStatus
  status_in: [testgoerli_TransferStatus!]
  status_not_in: [testgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: testgoerli_Bytes
  transactingAsset_not: testgoerli_Bytes
  transactingAsset_gt: testgoerli_Bytes
  transactingAsset_lt: testgoerli_Bytes
  transactingAsset_gte: testgoerli_Bytes
  transactingAsset_lte: testgoerli_Bytes
  transactingAsset_in: [testgoerli_Bytes!]
  transactingAsset_not_in: [testgoerli_Bytes!]
  transactingAsset_contains: testgoerli_Bytes
  transactingAsset_not_contains: testgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: testgoerli_Bytes
  bridgedAsset_not: testgoerli_Bytes
  bridgedAsset_gt: testgoerli_Bytes
  bridgedAsset_lt: testgoerli_Bytes
  bridgedAsset_gte: testgoerli_Bytes
  bridgedAsset_lte: testgoerli_Bytes
  bridgedAsset_in: [testgoerli_Bytes!]
  bridgedAsset_not_in: [testgoerli_Bytes!]
  bridgedAsset_contains: testgoerli_Bytes
  bridgedAsset_not_contains: testgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_gt: testgoerli_Bytes
  caller_lt: testgoerli_Bytes
  caller_gte: testgoerli_Bytes
  caller_lte: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  transactionHash: testgoerli_Bytes
  transactionHash_not: testgoerli_Bytes
  transactionHash_gt: testgoerli_Bytes
  transactionHash_lt: testgoerli_Bytes
  transactionHash_gte: testgoerli_Bytes
  transactionHash_lte: testgoerli_Bytes
  transactionHash_in: [testgoerli_Bytes!]
  transactionHash_not_in: [testgoerli_Bytes!]
  transactionHash_contains: testgoerli_Bytes
  transactionHash_not_contains: testgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
  and: [testgoerli_OriginTransfer_filter]
  or: [testgoerli_OriginTransfer_filter]
}

enum testgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Query {
  testgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Asset
  testgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Asset_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Asset!]!
  testgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_AssetBalance
  testgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_AssetBalance_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_AssetBalance!]!
  testgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Router
  testgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Router_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Router!]!
  testgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Setting
  testgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Setting_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Setting!]!
  testgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Relayer
  testgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Relayer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Relayer!]!
  testgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_StableSwap
  testgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_StableSwap_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_StableSwap!]!
  testgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_SponsorVault
  testgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_SponsorVault_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_SponsorVault!]!
  testgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_OriginTransfer
  testgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OriginTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_OriginTransfer!]!
  testgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_DestinationTransfer
  testgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_DestinationTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
}

type testgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testgoerli_Bytes
}

input testgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: testgoerli_Bytes
  relayer_not: testgoerli_Bytes
  relayer_gt: testgoerli_Bytes
  relayer_lt: testgoerli_Bytes
  relayer_gte: testgoerli_Bytes
  relayer_lte: testgoerli_Bytes
  relayer_in: [testgoerli_Bytes!]
  relayer_not_in: [testgoerli_Bytes!]
  relayer_contains: testgoerli_Bytes
  relayer_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
  and: [testgoerli_Relayer_filter]
  or: [testgoerli_Relayer_filter]
}

enum testgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type testgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testgoerli_Bytes
  recipient: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testgoerli_AssetBalance_orderBy, orderDirection: testgoerli_OrderDirection, where: testgoerli_AssetBalance_filter): [testgoerli_AssetBalance!]!
}

input testgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: testgoerli_Bytes
  owner_not: testgoerli_Bytes
  owner_gt: testgoerli_Bytes
  owner_lt: testgoerli_Bytes
  owner_gte: testgoerli_Bytes
  owner_lte: testgoerli_Bytes
  owner_in: [testgoerli_Bytes!]
  owner_not_in: [testgoerli_Bytes!]
  owner_contains: testgoerli_Bytes
  owner_not_contains: testgoerli_Bytes
  recipient: testgoerli_Bytes
  recipient_not: testgoerli_Bytes
  recipient_gt: testgoerli_Bytes
  recipient_lt: testgoerli_Bytes
  recipient_gte: testgoerli_Bytes
  recipient_lte: testgoerli_Bytes
  recipient_in: [testgoerli_Bytes!]
  recipient_not_in: [testgoerli_Bytes!]
  recipient_contains: testgoerli_Bytes
  recipient_not_contains: testgoerli_Bytes
  proposedOwner: testgoerli_Bytes
  proposedOwner_not: testgoerli_Bytes
  proposedOwner_gt: testgoerli_Bytes
  proposedOwner_lt: testgoerli_Bytes
  proposedOwner_gte: testgoerli_Bytes
  proposedOwner_lte: testgoerli_Bytes
  proposedOwner_in: [testgoerli_Bytes!]
  proposedOwner_not_in: [testgoerli_Bytes!]
  proposedOwner_contains: testgoerli_Bytes
  proposedOwner_not_contains: testgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: testgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
  and: [testgoerli_Router_filter]
  or: [testgoerli_Router_filter]
}

enum testgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type testgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testgoerli_Bytes!
}

input testgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: testgoerli_Bytes
  caller_not: testgoerli_Bytes
  caller_gt: testgoerli_Bytes
  caller_lt: testgoerli_Bytes
  caller_gte: testgoerli_Bytes
  caller_lte: testgoerli_Bytes
  caller_in: [testgoerli_Bytes!]
  caller_not_in: [testgoerli_Bytes!]
  caller_contains: testgoerli_Bytes
  caller_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
  and: [testgoerli_Setting_filter]
  or: [testgoerli_Setting_filter]
}

enum testgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type testgoerli_SponsorVault {
  id: ID!
  sponsorVault: testgoerli_Bytes!
}

input testgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: testgoerli_Bytes
  sponsorVault_not: testgoerli_Bytes
  sponsorVault_gt: testgoerli_Bytes
  sponsorVault_lt: testgoerli_Bytes
  sponsorVault_gte: testgoerli_Bytes
  sponsorVault_lte: testgoerli_Bytes
  sponsorVault_in: [testgoerli_Bytes!]
  sponsorVault_not_in: [testgoerli_Bytes!]
  sponsorVault_contains: testgoerli_Bytes
  sponsorVault_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
  and: [testgoerli_SponsorVault_filter]
  or: [testgoerli_SponsorVault_filter]
}

enum testgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type testgoerli_StableSwap {
  id: ID!
  canonicalId: testgoerli_Bytes!
  domain: BigInt
  swapPool: testgoerli_Bytes!
}

input testgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: testgoerli_Bytes
  canonicalId_not: testgoerli_Bytes
  canonicalId_gt: testgoerli_Bytes
  canonicalId_lt: testgoerli_Bytes
  canonicalId_gte: testgoerli_Bytes
  canonicalId_lte: testgoerli_Bytes
  canonicalId_in: [testgoerli_Bytes!]
  canonicalId_not_in: [testgoerli_Bytes!]
  canonicalId_contains: testgoerli_Bytes
  canonicalId_not_contains: testgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: testgoerli_Bytes
  swapPool_not: testgoerli_Bytes
  swapPool_gt: testgoerli_Bytes
  swapPool_lt: testgoerli_Bytes
  swapPool_gte: testgoerli_Bytes
  swapPool_lte: testgoerli_Bytes
  swapPool_in: [testgoerli_Bytes!]
  swapPool_not_in: [testgoerli_Bytes!]
  swapPool_contains: testgoerli_Bytes
  swapPool_not_contains: testgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testgoerli_BlockChangedFilter
  and: [testgoerli_StableSwap_filter]
  or: [testgoerli_StableSwap_filter]
}

enum testgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

type Subscription {
  testgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Asset
  testgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Asset_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Asset!]!
  testgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_AssetBalance
  testgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_AssetBalance_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_AssetBalance!]!
  testgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Router
  testgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Router_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Router!]!
  testgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Setting
  testgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Setting_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Setting!]!
  testgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_Relayer
  testgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_Relayer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_Relayer!]!
  testgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_StableSwap
  testgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_StableSwap_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_StableSwap!]!
  testgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_SponsorVault
  testgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_SponsorVault_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_SponsorVault!]!
  testgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_OriginTransfer
  testgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_OriginTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_OriginTransfer!]!
  testgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testgoerli_DestinationTransfer
  testgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testgoerli_DestinationTransfer_orderBy
    orderDirection: testgoerli_OrderDirection
    where: testgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testgoerli__meta(block: testgoerli_Block_height): testgoerli__Meta_
}

enum testgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type testgoerli__Block_ {
  """The hash of the block"""
  hash: testgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: testgoerli_Bytes
}

"""The type for the top-level _meta field"""
type testgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: testgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}