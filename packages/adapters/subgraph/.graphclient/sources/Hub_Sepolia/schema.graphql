schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type sepolia_AggregateRootSavedSlow {
  id: ID!
  aggregateRoot: sepolia_Bytes!
  count: BigInt!
  aggregatedRoots: [sepolia_Bytes!]
  rootTimestamp: BigInt!
}

input sepolia_AggregateRootSavedSlow_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: sepolia_Bytes
  aggregateRoot_not: sepolia_Bytes
  aggregateRoot_gt: sepolia_Bytes
  aggregateRoot_lt: sepolia_Bytes
  aggregateRoot_gte: sepolia_Bytes
  aggregateRoot_lte: sepolia_Bytes
  aggregateRoot_in: [sepolia_Bytes!]
  aggregateRoot_not_in: [sepolia_Bytes!]
  aggregateRoot_contains: sepolia_Bytes
  aggregateRoot_not_contains: sepolia_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  aggregatedRoots: [sepolia_Bytes!]
  aggregatedRoots_not: [sepolia_Bytes!]
  aggregatedRoots_contains: [sepolia_Bytes!]
  aggregatedRoots_contains_nocase: [sepolia_Bytes!]
  aggregatedRoots_not_contains: [sepolia_Bytes!]
  aggregatedRoots_not_contains_nocase: [sepolia_Bytes!]
  rootTimestamp: BigInt
  rootTimestamp_not: BigInt
  rootTimestamp_gt: BigInt
  rootTimestamp_lt: BigInt
  rootTimestamp_gte: BigInt
  rootTimestamp_lte: BigInt
  rootTimestamp_in: [BigInt!]
  rootTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_AggregateRootSavedSlow_filter]
  or: [sepolia_AggregateRootSavedSlow_filter]
}

enum sepolia_AggregateRootSavedSlow_orderBy {
  id
  aggregateRoot
  count
  aggregatedRoots
  rootTimestamp
}

type sepolia_AggregatedMessageRoot {
  id: ID!
  index: BigInt!
  receivedRoot: sepolia_Bytes!
  domain: BigInt
  blockNumber: BigInt
}

input sepolia_AggregatedMessageRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  receivedRoot: sepolia_Bytes
  receivedRoot_not: sepolia_Bytes
  receivedRoot_gt: sepolia_Bytes
  receivedRoot_lt: sepolia_Bytes
  receivedRoot_gte: sepolia_Bytes
  receivedRoot_lte: sepolia_Bytes
  receivedRoot_in: [sepolia_Bytes!]
  receivedRoot_not_in: [sepolia_Bytes!]
  receivedRoot_contains: sepolia_Bytes
  receivedRoot_not_contains: sepolia_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_AggregatedMessageRoot_filter]
  or: [sepolia_AggregatedMessageRoot_filter]
}

enum sepolia_AggregatedMessageRoot_orderBy {
  id
  index
  receivedRoot
  domain
  blockNumber
}

enum sepolia_Aggregation_interval {
  hour
  day
}

type sepolia_ArbitrumConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_ArbitrumConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_ArbitrumConnectorMeta_filter]
  or: [sepolia_ArbitrumConnectorMeta_filter]
}

enum sepolia_ArbitrumConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_AvalancheConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_AvalancheConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_AvalancheConnectorMeta_filter]
  or: [sepolia_AvalancheConnectorMeta_filter]
}

enum sepolia_AvalancheConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_BaseConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_BaseConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_BaseConnectorMeta_filter]
  or: [sepolia_BaseConnectorMeta_filter]
}

enum sepolia_BaseConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar sepolia_BigDecimal

scalar BigInt

input sepolia_BlockChangedFilter {
  number_gte: Int!
}

input sepolia_Block_height {
  hash: sepolia_Bytes
  number: Int
  number_gte: Int
}

type sepolia_BnbConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_BnbConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_BnbConnectorMeta_filter]
  or: [sepolia_BnbConnectorMeta_filter]
}

enum sepolia_BnbConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar sepolia_Bytes

type sepolia_GnosisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_GnosisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_GnosisConnectorMeta_filter]
  or: [sepolia_GnosisConnectorMeta_filter]
}

enum sepolia_GnosisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_HubDomain {
  id: ID!
  domain: BigInt
}

input sepolia_HubDomain_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_HubDomain_filter]
  or: [sepolia_HubDomain_filter]
}

enum sepolia_HubDomain_orderBy {
  id
  domain
}

type sepolia_HubOptimisticRootFinalized {
  id: ID!
  aggregateRoot: sepolia_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input sepolia_HubOptimisticRootFinalized_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: sepolia_Bytes
  aggregateRoot_not: sepolia_Bytes
  aggregateRoot_gt: sepolia_Bytes
  aggregateRoot_lt: sepolia_Bytes
  aggregateRoot_gte: sepolia_Bytes
  aggregateRoot_lte: sepolia_Bytes
  aggregateRoot_in: [sepolia_Bytes!]
  aggregateRoot_not_in: [sepolia_Bytes!]
  aggregateRoot_contains: sepolia_Bytes
  aggregateRoot_not_contains: sepolia_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_HubOptimisticRootFinalized_filter]
  or: [sepolia_HubOptimisticRootFinalized_filter]
}

enum sepolia_HubOptimisticRootFinalized_orderBy {
  id
  aggregateRoot
  timestamp
  blockNumber
}

"""
8 bytes signed integer

"""
scalar sepolia_Int8

type sepolia_LineaConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_LineaConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_LineaConnectorMeta_filter]
  or: [sepolia_LineaConnectorMeta_filter]
}

enum sepolia_LineaConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_MantleConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_MantleConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_MantleConnectorMeta_filter]
  or: [sepolia_MantleConnectorMeta_filter]
}

enum sepolia_MantleConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_MetisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_MetisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_MetisConnectorMeta_filter]
  or: [sepolia_MetisConnectorMeta_filter]
}

enum sepolia_MetisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_ModeConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_ModeConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_ModeConnectorMeta_filter]
  or: [sepolia_ModeConnectorMeta_filter]
}

enum sepolia_ModeConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_OptimismConnectorMeta_filter]
  or: [sepolia_OptimismConnectorMeta_filter]
}

enum sepolia_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_OptimisticRootPropagated {
  id: ID!
  aggregateRoot: sepolia_Bytes!
  domainsHash: sepolia_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input sepolia_OptimisticRootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: sepolia_Bytes
  aggregateRoot_not: sepolia_Bytes
  aggregateRoot_gt: sepolia_Bytes
  aggregateRoot_lt: sepolia_Bytes
  aggregateRoot_gte: sepolia_Bytes
  aggregateRoot_lte: sepolia_Bytes
  aggregateRoot_in: [sepolia_Bytes!]
  aggregateRoot_not_in: [sepolia_Bytes!]
  aggregateRoot_contains: sepolia_Bytes
  aggregateRoot_not_contains: sepolia_Bytes
  domainsHash: sepolia_Bytes
  domainsHash_not: sepolia_Bytes
  domainsHash_gt: sepolia_Bytes
  domainsHash_lt: sepolia_Bytes
  domainsHash_gte: sepolia_Bytes
  domainsHash_lte: sepolia_Bytes
  domainsHash_in: [sepolia_Bytes!]
  domainsHash_not_in: [sepolia_Bytes!]
  domainsHash_contains: sepolia_Bytes
  domainsHash_not_contains: sepolia_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_OptimisticRootPropagated_filter]
  or: [sepolia_OptimisticRootPropagated_filter]
}

enum sepolia_OptimisticRootPropagated_orderBy {
  id
  aggregateRoot
  domainsHash
  timestamp
  blockNumber
}

type sepolia_OptimisticRootProposed {
  id: ID!
  disputeCliff: BigInt!
  aggregateRoot: sepolia_Bytes!
  snapshotsRoots: [sepolia_Bytes!]
  domains: [BigInt!]
  baseAggregateRoot: sepolia_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input sepolia_OptimisticRootProposed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  disputeCliff: BigInt
  disputeCliff_not: BigInt
  disputeCliff_gt: BigInt
  disputeCliff_lt: BigInt
  disputeCliff_gte: BigInt
  disputeCliff_lte: BigInt
  disputeCliff_in: [BigInt!]
  disputeCliff_not_in: [BigInt!]
  aggregateRoot: sepolia_Bytes
  aggregateRoot_not: sepolia_Bytes
  aggregateRoot_gt: sepolia_Bytes
  aggregateRoot_lt: sepolia_Bytes
  aggregateRoot_gte: sepolia_Bytes
  aggregateRoot_lte: sepolia_Bytes
  aggregateRoot_in: [sepolia_Bytes!]
  aggregateRoot_not_in: [sepolia_Bytes!]
  aggregateRoot_contains: sepolia_Bytes
  aggregateRoot_not_contains: sepolia_Bytes
  snapshotsRoots: [sepolia_Bytes!]
  snapshotsRoots_not: [sepolia_Bytes!]
  snapshotsRoots_contains: [sepolia_Bytes!]
  snapshotsRoots_contains_nocase: [sepolia_Bytes!]
  snapshotsRoots_not_contains: [sepolia_Bytes!]
  snapshotsRoots_not_contains_nocase: [sepolia_Bytes!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  baseAggregateRoot: sepolia_Bytes
  baseAggregateRoot_not: sepolia_Bytes
  baseAggregateRoot_gt: sepolia_Bytes
  baseAggregateRoot_lt: sepolia_Bytes
  baseAggregateRoot_gte: sepolia_Bytes
  baseAggregateRoot_lte: sepolia_Bytes
  baseAggregateRoot_in: [sepolia_Bytes!]
  baseAggregateRoot_not_in: [sepolia_Bytes!]
  baseAggregateRoot_contains: sepolia_Bytes
  baseAggregateRoot_not_contains: sepolia_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_OptimisticRootProposed_filter]
  or: [sepolia_OptimisticRootProposed_filter]
}

enum sepolia_OptimisticRootProposed_orderBy {
  id
  disputeCliff
  aggregateRoot
  snapshotsRoots
  domains
  baseAggregateRoot
  timestamp
  blockNumber
}

"""Defines the order direction, either ascending or descending"""
enum sepolia_OrderDirection {
  asc
  desc
}

type sepolia_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_PolygonConnectorMeta_filter]
  or: [sepolia_PolygonConnectorMeta_filter]
}

enum sepolia_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_PolygonZkConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_PolygonZkConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_PolygonZkConnectorMeta_filter]
  or: [sepolia_PolygonZkConnectorMeta_filter]
}

enum sepolia_PolygonZkConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Query {
  sepolia_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootAggregated
  sepolia_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootAggregated_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootAggregated!]!
  sepolia_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootPropagated
  sepolia_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootPropagated_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootPropagated!]!
  sepolia_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_AggregatedMessageRoot
  sepolia_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_AggregatedMessageRoot_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_AggregatedMessageRoot!]!
  sepolia_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootManagerMeta
  sepolia_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootManagerMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootManagerMeta!]!
  sepolia_rootManagerMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootManagerMode
  sepolia_rootManagerModes(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootManagerMode_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootManagerMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootManagerMode!]!
  sepolia_optimisticRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_OptimisticRootProposed
  sepolia_optimisticRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_OptimisticRootProposed_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_OptimisticRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_OptimisticRootProposed!]!
  sepolia_hubOptimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_HubOptimisticRootFinalized
  sepolia_hubOptimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_HubOptimisticRootFinalized_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_HubOptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_HubOptimisticRootFinalized!]!
  sepolia_optimisticRootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_OptimisticRootPropagated
  sepolia_optimisticRootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_OptimisticRootPropagated_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_OptimisticRootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_OptimisticRootPropagated!]!
  sepolia_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_PolygonConnectorMeta
  sepolia_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_PolygonConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_PolygonConnectorMeta!]!
  sepolia_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_OptimismConnectorMeta
  sepolia_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_OptimismConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_OptimismConnectorMeta!]!
  sepolia_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_BnbConnectorMeta
  sepolia_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_BnbConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_BnbConnectorMeta!]!
  sepolia_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_ArbitrumConnectorMeta
  sepolia_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_ArbitrumConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_ArbitrumConnectorMeta!]!
  sepolia_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_GnosisConnectorMeta
  sepolia_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_GnosisConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_GnosisConnectorMeta!]!
  sepolia_lineaConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_LineaConnectorMeta
  sepolia_lineaConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_LineaConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_LineaConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_LineaConnectorMeta!]!
  sepolia_metisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_MetisConnectorMeta
  sepolia_metisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_MetisConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_MetisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_MetisConnectorMeta!]!
  sepolia_mantleConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_MantleConnectorMeta
  sepolia_mantleConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_MantleConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_MantleConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_MantleConnectorMeta!]!
  sepolia_avalancheConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_AvalancheConnectorMeta
  sepolia_avalancheConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_AvalancheConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_AvalancheConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_AvalancheConnectorMeta!]!
  sepolia_baseConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_BaseConnectorMeta
  sepolia_baseConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_BaseConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_BaseConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_BaseConnectorMeta!]!
  sepolia_polygonZkConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_PolygonZkConnectorMeta
  sepolia_polygonZkConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_PolygonZkConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_PolygonZkConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_PolygonZkConnectorMeta!]!
  sepolia_x1ConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_X1ConnectorMeta
  sepolia_x1ConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_X1ConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_X1ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_X1ConnectorMeta!]!
  sepolia_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_ZkSyncConnectorMeta
  sepolia_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_ZkSyncConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_ZkSyncConnectorMeta!]!
  sepolia_modeConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_ModeConnectorMeta
  sepolia_modeConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_ModeConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_ModeConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_ModeConnectorMeta!]!
  sepolia_scrollConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_ScrollConnectorMeta
  sepolia_scrollConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_ScrollConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_ScrollConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_ScrollConnectorMeta!]!
  sepolia_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootMessageProcessed
  sepolia_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootMessageProcessed_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootMessageProcessed!]!
  sepolia_aggregateRootSavedSlow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_AggregateRootSavedSlow
  sepolia_aggregateRootSavedSlows(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_AggregateRootSavedSlow_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_AggregateRootSavedSlow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_AggregateRootSavedSlow!]!
  sepolia_hubDomain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_HubDomain
  sepolia_hubDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_HubDomain_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_HubDomain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_HubDomain!]!
  """Access to subgraph metadata"""
  sepolia__meta(block: sepolia_Block_height): sepolia__Meta_
}

type sepolia_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: sepolia_Bytes!
  index: BigInt!
}

input sepolia_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: sepolia_Bytes
  receivedRoot_not: sepolia_Bytes
  receivedRoot_gt: sepolia_Bytes
  receivedRoot_lt: sepolia_Bytes
  receivedRoot_gte: sepolia_Bytes
  receivedRoot_lte: sepolia_Bytes
  receivedRoot_in: [sepolia_Bytes!]
  receivedRoot_not_in: [sepolia_Bytes!]
  receivedRoot_contains: sepolia_Bytes
  receivedRoot_not_contains: sepolia_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_RootAggregated_filter]
  or: [sepolia_RootAggregated_filter]
}

enum sepolia_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type sepolia_RootManagerMeta {
  id: ID!
  domains: [BigInt!]
  connectors: [sepolia_Bytes!]
}

input sepolia_RootManagerMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  connectors: [sepolia_Bytes!]
  connectors_not: [sepolia_Bytes!]
  connectors_contains: [sepolia_Bytes!]
  connectors_contains_nocase: [sepolia_Bytes!]
  connectors_not_contains: [sepolia_Bytes!]
  connectors_not_contains_nocase: [sepolia_Bytes!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_RootManagerMeta_filter]
  or: [sepolia_RootManagerMeta_filter]
}

enum sepolia_RootManagerMeta_orderBy {
  id
  domains
  connectors
}

type sepolia_RootManagerMode {
  id: ID!
  mode: String!
}

input sepolia_RootManagerMode_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  mode: String
  mode_not: String
  mode_gt: String
  mode_lt: String
  mode_gte: String
  mode_lte: String
  mode_in: [String!]
  mode_not_in: [String!]
  mode_contains: String
  mode_contains_nocase: String
  mode_not_contains: String
  mode_not_contains_nocase: String
  mode_starts_with: String
  mode_starts_with_nocase: String
  mode_not_starts_with: String
  mode_not_starts_with_nocase: String
  mode_ends_with: String
  mode_ends_with_nocase: String
  mode_not_ends_with: String
  mode_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_RootManagerMode_filter]
  or: [sepolia_RootManagerMode_filter]
}

enum sepolia_RootManagerMode_orderBy {
  id
  mode
}

type sepolia_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: sepolia_Bytes
  caller: sepolia_Bytes
  transactionHash: sepolia_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input sepolia_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: sepolia_Bytes
  root_not: sepolia_Bytes
  root_gt: sepolia_Bytes
  root_lt: sepolia_Bytes
  root_gte: sepolia_Bytes
  root_lte: sepolia_Bytes
  root_in: [sepolia_Bytes!]
  root_not_in: [sepolia_Bytes!]
  root_contains: sepolia_Bytes
  root_not_contains: sepolia_Bytes
  caller: sepolia_Bytes
  caller_not: sepolia_Bytes
  caller_gt: sepolia_Bytes
  caller_lt: sepolia_Bytes
  caller_gte: sepolia_Bytes
  caller_lte: sepolia_Bytes
  caller_in: [sepolia_Bytes!]
  caller_not_in: [sepolia_Bytes!]
  caller_contains: sepolia_Bytes
  caller_not_contains: sepolia_Bytes
  transactionHash: sepolia_Bytes
  transactionHash_not: sepolia_Bytes
  transactionHash_gt: sepolia_Bytes
  transactionHash_lt: sepolia_Bytes
  transactionHash_gte: sepolia_Bytes
  transactionHash_lte: sepolia_Bytes
  transactionHash_in: [sepolia_Bytes!]
  transactionHash_not_in: [sepolia_Bytes!]
  transactionHash_contains: sepolia_Bytes
  transactionHash_not_contains: sepolia_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_RootMessageProcessed_filter]
  or: [sepolia_RootMessageProcessed_filter]
}

enum sepolia_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type sepolia_RootPropagated {
  id: ID!
  aggregate: sepolia_Bytes!
  domainsHash: sepolia_Bytes!
  count: BigInt!
  blockNumber: BigInt
}

input sepolia_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: sepolia_Bytes
  aggregate_not: sepolia_Bytes
  aggregate_gt: sepolia_Bytes
  aggregate_lt: sepolia_Bytes
  aggregate_gte: sepolia_Bytes
  aggregate_lte: sepolia_Bytes
  aggregate_in: [sepolia_Bytes!]
  aggregate_not_in: [sepolia_Bytes!]
  aggregate_contains: sepolia_Bytes
  aggregate_not_contains: sepolia_Bytes
  domainsHash: sepolia_Bytes
  domainsHash_not: sepolia_Bytes
  domainsHash_gt: sepolia_Bytes
  domainsHash_lt: sepolia_Bytes
  domainsHash_gte: sepolia_Bytes
  domainsHash_lte: sepolia_Bytes
  domainsHash_in: [sepolia_Bytes!]
  domainsHash_not_in: [sepolia_Bytes!]
  domainsHash_contains: sepolia_Bytes
  domainsHash_not_contains: sepolia_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_RootPropagated_filter]
  or: [sepolia_RootPropagated_filter]
}

enum sepolia_RootPropagated_orderBy {
  id
  aggregate
  domainsHash
  count
  blockNumber
}

type sepolia_ScrollConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_ScrollConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_ScrollConnectorMeta_filter]
  or: [sepolia_ScrollConnectorMeta_filter]
}

enum sepolia_ScrollConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Subscription {
  sepolia_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootAggregated
  sepolia_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootAggregated_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootAggregated!]!
  sepolia_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootPropagated
  sepolia_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootPropagated_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootPropagated!]!
  sepolia_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_AggregatedMessageRoot
  sepolia_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_AggregatedMessageRoot_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_AggregatedMessageRoot!]!
  sepolia_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootManagerMeta
  sepolia_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootManagerMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootManagerMeta!]!
  sepolia_rootManagerMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootManagerMode
  sepolia_rootManagerModes(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootManagerMode_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootManagerMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootManagerMode!]!
  sepolia_optimisticRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_OptimisticRootProposed
  sepolia_optimisticRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_OptimisticRootProposed_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_OptimisticRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_OptimisticRootProposed!]!
  sepolia_hubOptimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_HubOptimisticRootFinalized
  sepolia_hubOptimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_HubOptimisticRootFinalized_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_HubOptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_HubOptimisticRootFinalized!]!
  sepolia_optimisticRootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_OptimisticRootPropagated
  sepolia_optimisticRootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_OptimisticRootPropagated_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_OptimisticRootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_OptimisticRootPropagated!]!
  sepolia_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_PolygonConnectorMeta
  sepolia_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_PolygonConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_PolygonConnectorMeta!]!
  sepolia_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_OptimismConnectorMeta
  sepolia_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_OptimismConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_OptimismConnectorMeta!]!
  sepolia_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_BnbConnectorMeta
  sepolia_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_BnbConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_BnbConnectorMeta!]!
  sepolia_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_ArbitrumConnectorMeta
  sepolia_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_ArbitrumConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_ArbitrumConnectorMeta!]!
  sepolia_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_GnosisConnectorMeta
  sepolia_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_GnosisConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_GnosisConnectorMeta!]!
  sepolia_lineaConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_LineaConnectorMeta
  sepolia_lineaConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_LineaConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_LineaConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_LineaConnectorMeta!]!
  sepolia_metisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_MetisConnectorMeta
  sepolia_metisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_MetisConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_MetisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_MetisConnectorMeta!]!
  sepolia_mantleConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_MantleConnectorMeta
  sepolia_mantleConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_MantleConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_MantleConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_MantleConnectorMeta!]!
  sepolia_avalancheConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_AvalancheConnectorMeta
  sepolia_avalancheConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_AvalancheConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_AvalancheConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_AvalancheConnectorMeta!]!
  sepolia_baseConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_BaseConnectorMeta
  sepolia_baseConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_BaseConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_BaseConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_BaseConnectorMeta!]!
  sepolia_polygonZkConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_PolygonZkConnectorMeta
  sepolia_polygonZkConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_PolygonZkConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_PolygonZkConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_PolygonZkConnectorMeta!]!
  sepolia_x1ConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_X1ConnectorMeta
  sepolia_x1ConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_X1ConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_X1ConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_X1ConnectorMeta!]!
  sepolia_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_ZkSyncConnectorMeta
  sepolia_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_ZkSyncConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_ZkSyncConnectorMeta!]!
  sepolia_modeConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_ModeConnectorMeta
  sepolia_modeConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_ModeConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_ModeConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_ModeConnectorMeta!]!
  sepolia_scrollConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_ScrollConnectorMeta
  sepolia_scrollConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_ScrollConnectorMeta_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_ScrollConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_ScrollConnectorMeta!]!
  sepolia_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_RootMessageProcessed
  sepolia_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_RootMessageProcessed_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_RootMessageProcessed!]!
  sepolia_aggregateRootSavedSlow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_AggregateRootSavedSlow
  sepolia_aggregateRootSavedSlows(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_AggregateRootSavedSlow_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_AggregateRootSavedSlow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_AggregateRootSavedSlow!]!
  sepolia_hubDomain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sepolia_HubDomain
  sepolia_hubDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: sepolia_HubDomain_orderBy
    orderDirection: sepolia_OrderDirection
    where: sepolia_HubDomain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: sepolia_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sepolia_HubDomain!]!
  """Access to subgraph metadata"""
  sepolia__meta(block: sepolia_Block_height): sepolia__Meta_
}

type sepolia_X1ConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_X1ConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_X1ConnectorMeta_filter]
  or: [sepolia_X1ConnectorMeta_filter]
}

enum sepolia_X1ConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia_ZkSyncConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: sepolia_Bytes!
  rootManager: sepolia_Bytes!
  mirrorConnector: sepolia_Bytes!
}

input sepolia_ZkSyncConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: sepolia_Bytes
  amb_not: sepolia_Bytes
  amb_gt: sepolia_Bytes
  amb_lt: sepolia_Bytes
  amb_gte: sepolia_Bytes
  amb_lte: sepolia_Bytes
  amb_in: [sepolia_Bytes!]
  amb_not_in: [sepolia_Bytes!]
  amb_contains: sepolia_Bytes
  amb_not_contains: sepolia_Bytes
  rootManager: sepolia_Bytes
  rootManager_not: sepolia_Bytes
  rootManager_gt: sepolia_Bytes
  rootManager_lt: sepolia_Bytes
  rootManager_gte: sepolia_Bytes
  rootManager_lte: sepolia_Bytes
  rootManager_in: [sepolia_Bytes!]
  rootManager_not_in: [sepolia_Bytes!]
  rootManager_contains: sepolia_Bytes
  rootManager_not_contains: sepolia_Bytes
  mirrorConnector: sepolia_Bytes
  mirrorConnector_not: sepolia_Bytes
  mirrorConnector_gt: sepolia_Bytes
  mirrorConnector_lt: sepolia_Bytes
  mirrorConnector_gte: sepolia_Bytes
  mirrorConnector_lte: sepolia_Bytes
  mirrorConnector_in: [sepolia_Bytes!]
  mirrorConnector_not_in: [sepolia_Bytes!]
  mirrorConnector_contains: sepolia_Bytes
  mirrorConnector_not_contains: sepolia_Bytes
  """Filter for the block changed event."""
  _change_block: sepolia_BlockChangedFilter
  and: [sepolia_ZkSyncConnectorMeta_filter]
  or: [sepolia_ZkSyncConnectorMeta_filter]
}

enum sepolia_ZkSyncConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type sepolia__Block_ {
  """The hash of the block"""
  hash: sepolia_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: sepolia_Bytes
}

"""The type for the top-level _meta field"""
type sepolia__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: sepolia__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}