schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type stagingmainnet_AggregateRootSavedSlow {
  id: ID!
  aggregateRoot: stagingmainnet_Bytes!
  count: BigInt!
  aggregatedRoots: [stagingmainnet_Bytes!]
  rootTimestamp: BigInt!
}

input stagingmainnet_AggregateRootSavedSlow_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: stagingmainnet_Bytes
  aggregateRoot_not: stagingmainnet_Bytes
  aggregateRoot_gt: stagingmainnet_Bytes
  aggregateRoot_lt: stagingmainnet_Bytes
  aggregateRoot_gte: stagingmainnet_Bytes
  aggregateRoot_lte: stagingmainnet_Bytes
  aggregateRoot_in: [stagingmainnet_Bytes!]
  aggregateRoot_not_in: [stagingmainnet_Bytes!]
  aggregateRoot_contains: stagingmainnet_Bytes
  aggregateRoot_not_contains: stagingmainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  aggregatedRoots: [stagingmainnet_Bytes!]
  aggregatedRoots_not: [stagingmainnet_Bytes!]
  aggregatedRoots_contains: [stagingmainnet_Bytes!]
  aggregatedRoots_contains_nocase: [stagingmainnet_Bytes!]
  aggregatedRoots_not_contains: [stagingmainnet_Bytes!]
  aggregatedRoots_not_contains_nocase: [stagingmainnet_Bytes!]
  rootTimestamp: BigInt
  rootTimestamp_not: BigInt
  rootTimestamp_gt: BigInt
  rootTimestamp_lt: BigInt
  rootTimestamp_gte: BigInt
  rootTimestamp_lte: BigInt
  rootTimestamp_in: [BigInt!]
  rootTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_AggregateRootSavedSlow_filter]
  or: [stagingmainnet_AggregateRootSavedSlow_filter]
}

enum stagingmainnet_AggregateRootSavedSlow_orderBy {
  id
  aggregateRoot
  count
  aggregatedRoots
  rootTimestamp
}

type stagingmainnet_AggregatedMessageRoot {
  id: ID!
  index: BigInt!
  receivedRoot: stagingmainnet_Bytes!
  domain: BigInt
  blockNumber: BigInt
}

input stagingmainnet_AggregatedMessageRoot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  receivedRoot: stagingmainnet_Bytes
  receivedRoot_not: stagingmainnet_Bytes
  receivedRoot_gt: stagingmainnet_Bytes
  receivedRoot_lt: stagingmainnet_Bytes
  receivedRoot_gte: stagingmainnet_Bytes
  receivedRoot_lte: stagingmainnet_Bytes
  receivedRoot_in: [stagingmainnet_Bytes!]
  receivedRoot_not_in: [stagingmainnet_Bytes!]
  receivedRoot_contains: stagingmainnet_Bytes
  receivedRoot_not_contains: stagingmainnet_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_AggregatedMessageRoot_filter]
  or: [stagingmainnet_AggregatedMessageRoot_filter]
}

enum stagingmainnet_AggregatedMessageRoot_orderBy {
  id
  index
  receivedRoot
  domain
  blockNumber
}

enum stagingmainnet_Aggregation_interval {
  hour
  day
}

type stagingmainnet_ArbitrumConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_ArbitrumConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_ArbitrumConnectorMeta_filter]
  or: [stagingmainnet_ArbitrumConnectorMeta_filter]
}

enum stagingmainnet_ArbitrumConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_AvalancheConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_AvalancheConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_AvalancheConnectorMeta_filter]
  or: [stagingmainnet_AvalancheConnectorMeta_filter]
}

enum stagingmainnet_AvalancheConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_BaseConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_BaseConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_BaseConnectorMeta_filter]
  or: [stagingmainnet_BaseConnectorMeta_filter]
}

enum stagingmainnet_BaseConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar stagingmainnet_BigDecimal

scalar BigInt

input stagingmainnet_BlockChangedFilter {
  number_gte: Int!
}

input stagingmainnet_Block_height {
  hash: stagingmainnet_Bytes
  number: Int
  number_gte: Int
}

type stagingmainnet_BnbConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_BnbConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_BnbConnectorMeta_filter]
  or: [stagingmainnet_BnbConnectorMeta_filter]
}

enum stagingmainnet_BnbConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

scalar stagingmainnet_Bytes

type stagingmainnet_GnosisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_GnosisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_GnosisConnectorMeta_filter]
  or: [stagingmainnet_GnosisConnectorMeta_filter]
}

enum stagingmainnet_GnosisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_HubDomain {
  id: ID!
  domain: BigInt
}

input stagingmainnet_HubDomain_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_HubDomain_filter]
  or: [stagingmainnet_HubDomain_filter]
}

enum stagingmainnet_HubDomain_orderBy {
  id
  domain
}

type stagingmainnet_HubOptimisticRootFinalized {
  id: ID!
  aggregateRoot: stagingmainnet_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input stagingmainnet_HubOptimisticRootFinalized_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: stagingmainnet_Bytes
  aggregateRoot_not: stagingmainnet_Bytes
  aggregateRoot_gt: stagingmainnet_Bytes
  aggregateRoot_lt: stagingmainnet_Bytes
  aggregateRoot_gte: stagingmainnet_Bytes
  aggregateRoot_lte: stagingmainnet_Bytes
  aggregateRoot_in: [stagingmainnet_Bytes!]
  aggregateRoot_not_in: [stagingmainnet_Bytes!]
  aggregateRoot_contains: stagingmainnet_Bytes
  aggregateRoot_not_contains: stagingmainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_HubOptimisticRootFinalized_filter]
  or: [stagingmainnet_HubOptimisticRootFinalized_filter]
}

enum stagingmainnet_HubOptimisticRootFinalized_orderBy {
  id
  aggregateRoot
  timestamp
  blockNumber
}

"""
8 bytes signed integer

"""
scalar stagingmainnet_Int8

type stagingmainnet_LineaConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_LineaConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_LineaConnectorMeta_filter]
  or: [stagingmainnet_LineaConnectorMeta_filter]
}

enum stagingmainnet_LineaConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_MantleConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_MantleConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_MantleConnectorMeta_filter]
  or: [stagingmainnet_MantleConnectorMeta_filter]
}

enum stagingmainnet_MantleConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_MetisConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_MetisConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_MetisConnectorMeta_filter]
  or: [stagingmainnet_MetisConnectorMeta_filter]
}

enum stagingmainnet_MetisConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_ModeConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_ModeConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_ModeConnectorMeta_filter]
  or: [stagingmainnet_ModeConnectorMeta_filter]
}

enum stagingmainnet_ModeConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_OptimismConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_OptimismConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_OptimismConnectorMeta_filter]
  or: [stagingmainnet_OptimismConnectorMeta_filter]
}

enum stagingmainnet_OptimismConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_OptimisticRootPropagated {
  id: ID!
  aggregateRoot: stagingmainnet_Bytes!
  domainsHash: stagingmainnet_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input stagingmainnet_OptimisticRootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregateRoot: stagingmainnet_Bytes
  aggregateRoot_not: stagingmainnet_Bytes
  aggregateRoot_gt: stagingmainnet_Bytes
  aggregateRoot_lt: stagingmainnet_Bytes
  aggregateRoot_gte: stagingmainnet_Bytes
  aggregateRoot_lte: stagingmainnet_Bytes
  aggregateRoot_in: [stagingmainnet_Bytes!]
  aggregateRoot_not_in: [stagingmainnet_Bytes!]
  aggregateRoot_contains: stagingmainnet_Bytes
  aggregateRoot_not_contains: stagingmainnet_Bytes
  domainsHash: stagingmainnet_Bytes
  domainsHash_not: stagingmainnet_Bytes
  domainsHash_gt: stagingmainnet_Bytes
  domainsHash_lt: stagingmainnet_Bytes
  domainsHash_gte: stagingmainnet_Bytes
  domainsHash_lte: stagingmainnet_Bytes
  domainsHash_in: [stagingmainnet_Bytes!]
  domainsHash_not_in: [stagingmainnet_Bytes!]
  domainsHash_contains: stagingmainnet_Bytes
  domainsHash_not_contains: stagingmainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_OptimisticRootPropagated_filter]
  or: [stagingmainnet_OptimisticRootPropagated_filter]
}

enum stagingmainnet_OptimisticRootPropagated_orderBy {
  id
  aggregateRoot
  domainsHash
  timestamp
  blockNumber
}

type stagingmainnet_OptimisticRootProposed {
  id: ID!
  disputeCliff: BigInt!
  aggregateRoot: stagingmainnet_Bytes!
  snapshotsRoots: [stagingmainnet_Bytes!]
  domains: [BigInt!]
  baseAggregateRoot: stagingmainnet_Bytes!
  timestamp: BigInt!
  blockNumber: BigInt
}

input stagingmainnet_OptimisticRootProposed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  disputeCliff: BigInt
  disputeCliff_not: BigInt
  disputeCliff_gt: BigInt
  disputeCliff_lt: BigInt
  disputeCliff_gte: BigInt
  disputeCliff_lte: BigInt
  disputeCliff_in: [BigInt!]
  disputeCliff_not_in: [BigInt!]
  aggregateRoot: stagingmainnet_Bytes
  aggregateRoot_not: stagingmainnet_Bytes
  aggregateRoot_gt: stagingmainnet_Bytes
  aggregateRoot_lt: stagingmainnet_Bytes
  aggregateRoot_gte: stagingmainnet_Bytes
  aggregateRoot_lte: stagingmainnet_Bytes
  aggregateRoot_in: [stagingmainnet_Bytes!]
  aggregateRoot_not_in: [stagingmainnet_Bytes!]
  aggregateRoot_contains: stagingmainnet_Bytes
  aggregateRoot_not_contains: stagingmainnet_Bytes
  snapshotsRoots: [stagingmainnet_Bytes!]
  snapshotsRoots_not: [stagingmainnet_Bytes!]
  snapshotsRoots_contains: [stagingmainnet_Bytes!]
  snapshotsRoots_contains_nocase: [stagingmainnet_Bytes!]
  snapshotsRoots_not_contains: [stagingmainnet_Bytes!]
  snapshotsRoots_not_contains_nocase: [stagingmainnet_Bytes!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  baseAggregateRoot: stagingmainnet_Bytes
  baseAggregateRoot_not: stagingmainnet_Bytes
  baseAggregateRoot_gt: stagingmainnet_Bytes
  baseAggregateRoot_lt: stagingmainnet_Bytes
  baseAggregateRoot_gte: stagingmainnet_Bytes
  baseAggregateRoot_lte: stagingmainnet_Bytes
  baseAggregateRoot_in: [stagingmainnet_Bytes!]
  baseAggregateRoot_not_in: [stagingmainnet_Bytes!]
  baseAggregateRoot_contains: stagingmainnet_Bytes
  baseAggregateRoot_not_contains: stagingmainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_OptimisticRootProposed_filter]
  or: [stagingmainnet_OptimisticRootProposed_filter]
}

enum stagingmainnet_OptimisticRootProposed_orderBy {
  id
  disputeCliff
  aggregateRoot
  snapshotsRoots
  domains
  baseAggregateRoot
  timestamp
  blockNumber
}

"""Defines the order direction, either ascending or descending"""
enum stagingmainnet_OrderDirection {
  asc
  desc
}

type stagingmainnet_PolygonConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_PolygonConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_PolygonConnectorMeta_filter]
  or: [stagingmainnet_PolygonConnectorMeta_filter]
}

enum stagingmainnet_PolygonConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_PolygonZkConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_PolygonZkConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_PolygonZkConnectorMeta_filter]
  or: [stagingmainnet_PolygonZkConnectorMeta_filter]
}

enum stagingmainnet_PolygonZkConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Query {
  stagingmainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootAggregated
  stagingmainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootAggregated_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootAggregated!]!
  stagingmainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootPropagated
  stagingmainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootPropagated_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootPropagated!]!
  stagingmainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_AggregatedMessageRoot
  stagingmainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_AggregatedMessageRoot_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_AggregatedMessageRoot!]!
  stagingmainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootManagerMeta
  stagingmainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootManagerMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootManagerMeta!]!
  stagingmainnet_rootManagerMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootManagerMode
  stagingmainnet_rootManagerModes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootManagerMode_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootManagerMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootManagerMode!]!
  stagingmainnet_optimisticRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_OptimisticRootProposed
  stagingmainnet_optimisticRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_OptimisticRootProposed_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_OptimisticRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_OptimisticRootProposed!]!
  stagingmainnet_hubOptimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_HubOptimisticRootFinalized
  stagingmainnet_hubOptimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_HubOptimisticRootFinalized_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_HubOptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_HubOptimisticRootFinalized!]!
  stagingmainnet_optimisticRootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_OptimisticRootPropagated
  stagingmainnet_optimisticRootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_OptimisticRootPropagated_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_OptimisticRootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_OptimisticRootPropagated!]!
  stagingmainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_PolygonConnectorMeta
  stagingmainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_PolygonConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_PolygonConnectorMeta!]!
  stagingmainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_OptimismConnectorMeta
  stagingmainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_OptimismConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_OptimismConnectorMeta!]!
  stagingmainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_BnbConnectorMeta
  stagingmainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_BnbConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_BnbConnectorMeta!]!
  stagingmainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_ArbitrumConnectorMeta
  stagingmainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_ArbitrumConnectorMeta!]!
  stagingmainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_GnosisConnectorMeta
  stagingmainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_GnosisConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_GnosisConnectorMeta!]!
  stagingmainnet_lineaConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_LineaConnectorMeta
  stagingmainnet_lineaConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_LineaConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_LineaConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_LineaConnectorMeta!]!
  stagingmainnet_metisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_MetisConnectorMeta
  stagingmainnet_metisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_MetisConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_MetisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_MetisConnectorMeta!]!
  stagingmainnet_mantleConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_MantleConnectorMeta
  stagingmainnet_mantleConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_MantleConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_MantleConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_MantleConnectorMeta!]!
  stagingmainnet_avalancheConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_AvalancheConnectorMeta
  stagingmainnet_avalancheConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_AvalancheConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_AvalancheConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_AvalancheConnectorMeta!]!
  stagingmainnet_baseConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_BaseConnectorMeta
  stagingmainnet_baseConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_BaseConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_BaseConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_BaseConnectorMeta!]!
  stagingmainnet_polygonZkConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_PolygonZkConnectorMeta
  stagingmainnet_polygonZkConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_PolygonZkConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_PolygonZkConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_PolygonZkConnectorMeta!]!
  stagingmainnet_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_ZkSyncConnectorMeta
  stagingmainnet_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_ZkSyncConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_ZkSyncConnectorMeta!]!
  stagingmainnet_modeConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_ModeConnectorMeta
  stagingmainnet_modeConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_ModeConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_ModeConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_ModeConnectorMeta!]!
  stagingmainnet_scrollConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_ScrollConnectorMeta
  stagingmainnet_scrollConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_ScrollConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_ScrollConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_ScrollConnectorMeta!]!
  stagingmainnet_xlayerConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_XlayerConnectorMeta
  stagingmainnet_xlayerConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_XlayerConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_XlayerConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_XlayerConnectorMeta!]!
  stagingmainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootMessageProcessed
  stagingmainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootMessageProcessed_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootMessageProcessed!]!
  stagingmainnet_aggregateRootSavedSlow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_AggregateRootSavedSlow
  stagingmainnet_aggregateRootSavedSlows(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_AggregateRootSavedSlow_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_AggregateRootSavedSlow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_AggregateRootSavedSlow!]!
  stagingmainnet_hubDomain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_HubDomain
  stagingmainnet_hubDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_HubDomain_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_HubDomain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_HubDomain!]!
  """Access to subgraph metadata"""
  stagingmainnet__meta(block: stagingmainnet_Block_height): stagingmainnet__Meta_
}

type stagingmainnet_RootAggregated {
  id: ID!
  domain: BigInt!
  receivedRoot: stagingmainnet_Bytes!
  index: BigInt!
}

input stagingmainnet_RootAggregated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  receivedRoot: stagingmainnet_Bytes
  receivedRoot_not: stagingmainnet_Bytes
  receivedRoot_gt: stagingmainnet_Bytes
  receivedRoot_lt: stagingmainnet_Bytes
  receivedRoot_gte: stagingmainnet_Bytes
  receivedRoot_lte: stagingmainnet_Bytes
  receivedRoot_in: [stagingmainnet_Bytes!]
  receivedRoot_not_in: [stagingmainnet_Bytes!]
  receivedRoot_contains: stagingmainnet_Bytes
  receivedRoot_not_contains: stagingmainnet_Bytes
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_RootAggregated_filter]
  or: [stagingmainnet_RootAggregated_filter]
}

enum stagingmainnet_RootAggregated_orderBy {
  id
  domain
  receivedRoot
  index
}

type stagingmainnet_RootManagerMeta {
  id: ID!
  domains: [BigInt!]
  connectors: [stagingmainnet_Bytes!]
}

input stagingmainnet_RootManagerMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  domains: [BigInt!]
  domains_not: [BigInt!]
  domains_contains: [BigInt!]
  domains_contains_nocase: [BigInt!]
  domains_not_contains: [BigInt!]
  domains_not_contains_nocase: [BigInt!]
  connectors: [stagingmainnet_Bytes!]
  connectors_not: [stagingmainnet_Bytes!]
  connectors_contains: [stagingmainnet_Bytes!]
  connectors_contains_nocase: [stagingmainnet_Bytes!]
  connectors_not_contains: [stagingmainnet_Bytes!]
  connectors_not_contains_nocase: [stagingmainnet_Bytes!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_RootManagerMeta_filter]
  or: [stagingmainnet_RootManagerMeta_filter]
}

enum stagingmainnet_RootManagerMeta_orderBy {
  id
  domains
  connectors
}

type stagingmainnet_RootManagerMode {
  id: ID!
  mode: String!
}

input stagingmainnet_RootManagerMode_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  mode: String
  mode_not: String
  mode_gt: String
  mode_lt: String
  mode_gte: String
  mode_lte: String
  mode_in: [String!]
  mode_not_in: [String!]
  mode_contains: String
  mode_contains_nocase: String
  mode_not_contains: String
  mode_not_contains_nocase: String
  mode_starts_with: String
  mode_starts_with_nocase: String
  mode_not_starts_with: String
  mode_not_starts_with_nocase: String
  mode_ends_with: String
  mode_ends_with_nocase: String
  mode_not_ends_with: String
  mode_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_RootManagerMode_filter]
  or: [stagingmainnet_RootManagerMode_filter]
}

enum stagingmainnet_RootManagerMode_orderBy {
  id
  mode
}

type stagingmainnet_RootMessageProcessed {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  root: stagingmainnet_Bytes
  caller: stagingmainnet_Bytes
  transactionHash: stagingmainnet_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input stagingmainnet_RootMessageProcessed_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  root: stagingmainnet_Bytes
  root_not: stagingmainnet_Bytes
  root_gt: stagingmainnet_Bytes
  root_lt: stagingmainnet_Bytes
  root_gte: stagingmainnet_Bytes
  root_lte: stagingmainnet_Bytes
  root_in: [stagingmainnet_Bytes!]
  root_not_in: [stagingmainnet_Bytes!]
  root_contains: stagingmainnet_Bytes
  root_not_contains: stagingmainnet_Bytes
  caller: stagingmainnet_Bytes
  caller_not: stagingmainnet_Bytes
  caller_gt: stagingmainnet_Bytes
  caller_lt: stagingmainnet_Bytes
  caller_gte: stagingmainnet_Bytes
  caller_lte: stagingmainnet_Bytes
  caller_in: [stagingmainnet_Bytes!]
  caller_not_in: [stagingmainnet_Bytes!]
  caller_contains: stagingmainnet_Bytes
  caller_not_contains: stagingmainnet_Bytes
  transactionHash: stagingmainnet_Bytes
  transactionHash_not: stagingmainnet_Bytes
  transactionHash_gt: stagingmainnet_Bytes
  transactionHash_lt: stagingmainnet_Bytes
  transactionHash_gte: stagingmainnet_Bytes
  transactionHash_lte: stagingmainnet_Bytes
  transactionHash_in: [stagingmainnet_Bytes!]
  transactionHash_not_in: [stagingmainnet_Bytes!]
  transactionHash_contains: stagingmainnet_Bytes
  transactionHash_not_contains: stagingmainnet_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_RootMessageProcessed_filter]
  or: [stagingmainnet_RootMessageProcessed_filter]
}

enum stagingmainnet_RootMessageProcessed_orderBy {
  id
  spokeDomain
  hubDomain
  root
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type stagingmainnet_RootPropagated {
  id: ID!
  aggregate: stagingmainnet_Bytes!
  domainsHash: stagingmainnet_Bytes!
  count: BigInt!
  blockNumber: BigInt
}

input stagingmainnet_RootPropagated_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  aggregate: stagingmainnet_Bytes
  aggregate_not: stagingmainnet_Bytes
  aggregate_gt: stagingmainnet_Bytes
  aggregate_lt: stagingmainnet_Bytes
  aggregate_gte: stagingmainnet_Bytes
  aggregate_lte: stagingmainnet_Bytes
  aggregate_in: [stagingmainnet_Bytes!]
  aggregate_not_in: [stagingmainnet_Bytes!]
  aggregate_contains: stagingmainnet_Bytes
  aggregate_not_contains: stagingmainnet_Bytes
  domainsHash: stagingmainnet_Bytes
  domainsHash_not: stagingmainnet_Bytes
  domainsHash_gt: stagingmainnet_Bytes
  domainsHash_lt: stagingmainnet_Bytes
  domainsHash_gte: stagingmainnet_Bytes
  domainsHash_lte: stagingmainnet_Bytes
  domainsHash_in: [stagingmainnet_Bytes!]
  domainsHash_not_in: [stagingmainnet_Bytes!]
  domainsHash_contains: stagingmainnet_Bytes
  domainsHash_not_contains: stagingmainnet_Bytes
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_RootPropagated_filter]
  or: [stagingmainnet_RootPropagated_filter]
}

enum stagingmainnet_RootPropagated_orderBy {
  id
  aggregate
  domainsHash
  count
  blockNumber
}

type stagingmainnet_ScrollConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_ScrollConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_ScrollConnectorMeta_filter]
  or: [stagingmainnet_ScrollConnectorMeta_filter]
}

enum stagingmainnet_ScrollConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type Subscription {
  stagingmainnet_rootAggregated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootAggregated
  stagingmainnet_rootAggregateds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootAggregated_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootAggregated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootAggregated!]!
  stagingmainnet_rootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootPropagated
  stagingmainnet_rootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootPropagated_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootPropagated!]!
  stagingmainnet_aggregatedMessageRoot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_AggregatedMessageRoot
  stagingmainnet_aggregatedMessageRoots(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_AggregatedMessageRoot_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_AggregatedMessageRoot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_AggregatedMessageRoot!]!
  stagingmainnet_rootManagerMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootManagerMeta
  stagingmainnet_rootManagerMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootManagerMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootManagerMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootManagerMeta!]!
  stagingmainnet_rootManagerMode(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootManagerMode
  stagingmainnet_rootManagerModes(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootManagerMode_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootManagerMode_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootManagerMode!]!
  stagingmainnet_optimisticRootProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_OptimisticRootProposed
  stagingmainnet_optimisticRootProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_OptimisticRootProposed_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_OptimisticRootProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_OptimisticRootProposed!]!
  stagingmainnet_hubOptimisticRootFinalized(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_HubOptimisticRootFinalized
  stagingmainnet_hubOptimisticRootFinalizeds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_HubOptimisticRootFinalized_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_HubOptimisticRootFinalized_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_HubOptimisticRootFinalized!]!
  stagingmainnet_optimisticRootPropagated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_OptimisticRootPropagated
  stagingmainnet_optimisticRootPropagateds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_OptimisticRootPropagated_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_OptimisticRootPropagated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_OptimisticRootPropagated!]!
  stagingmainnet_polygonConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_PolygonConnectorMeta
  stagingmainnet_polygonConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_PolygonConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_PolygonConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_PolygonConnectorMeta!]!
  stagingmainnet_optimismConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_OptimismConnectorMeta
  stagingmainnet_optimismConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_OptimismConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_OptimismConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_OptimismConnectorMeta!]!
  stagingmainnet_bnbConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_BnbConnectorMeta
  stagingmainnet_bnbConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_BnbConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_BnbConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_BnbConnectorMeta!]!
  stagingmainnet_arbitrumConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_ArbitrumConnectorMeta
  stagingmainnet_arbitrumConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_ArbitrumConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_ArbitrumConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_ArbitrumConnectorMeta!]!
  stagingmainnet_gnosisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_GnosisConnectorMeta
  stagingmainnet_gnosisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_GnosisConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_GnosisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_GnosisConnectorMeta!]!
  stagingmainnet_lineaConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_LineaConnectorMeta
  stagingmainnet_lineaConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_LineaConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_LineaConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_LineaConnectorMeta!]!
  stagingmainnet_metisConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_MetisConnectorMeta
  stagingmainnet_metisConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_MetisConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_MetisConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_MetisConnectorMeta!]!
  stagingmainnet_mantleConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_MantleConnectorMeta
  stagingmainnet_mantleConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_MantleConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_MantleConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_MantleConnectorMeta!]!
  stagingmainnet_avalancheConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_AvalancheConnectorMeta
  stagingmainnet_avalancheConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_AvalancheConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_AvalancheConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_AvalancheConnectorMeta!]!
  stagingmainnet_baseConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_BaseConnectorMeta
  stagingmainnet_baseConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_BaseConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_BaseConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_BaseConnectorMeta!]!
  stagingmainnet_polygonZkConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_PolygonZkConnectorMeta
  stagingmainnet_polygonZkConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_PolygonZkConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_PolygonZkConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_PolygonZkConnectorMeta!]!
  stagingmainnet_zkSyncConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_ZkSyncConnectorMeta
  stagingmainnet_zkSyncConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_ZkSyncConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_ZkSyncConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_ZkSyncConnectorMeta!]!
  stagingmainnet_modeConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_ModeConnectorMeta
  stagingmainnet_modeConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_ModeConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_ModeConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_ModeConnectorMeta!]!
  stagingmainnet_scrollConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_ScrollConnectorMeta
  stagingmainnet_scrollConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_ScrollConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_ScrollConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_ScrollConnectorMeta!]!
  stagingmainnet_xlayerConnectorMeta(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_XlayerConnectorMeta
  stagingmainnet_xlayerConnectorMetas(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_XlayerConnectorMeta_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_XlayerConnectorMeta_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_XlayerConnectorMeta!]!
  stagingmainnet_rootMessageProcessed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_RootMessageProcessed
  stagingmainnet_rootMessageProcesseds(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_RootMessageProcessed_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_RootMessageProcessed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_RootMessageProcessed!]!
  stagingmainnet_aggregateRootSavedSlow(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_AggregateRootSavedSlow
  stagingmainnet_aggregateRootSavedSlows(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_AggregateRootSavedSlow_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_AggregateRootSavedSlow_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_AggregateRootSavedSlow!]!
  stagingmainnet_hubDomain(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): stagingmainnet_HubDomain
  stagingmainnet_hubDomains(
    skip: Int = 0
    first: Int = 100
    orderBy: stagingmainnet_HubDomain_orderBy
    orderDirection: stagingmainnet_OrderDirection
    where: stagingmainnet_HubDomain_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: stagingmainnet_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [stagingmainnet_HubDomain!]!
  """Access to subgraph metadata"""
  stagingmainnet__meta(block: stagingmainnet_Block_height): stagingmainnet__Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type stagingmainnet_XlayerConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_XlayerConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_XlayerConnectorMeta_filter]
  or: [stagingmainnet_XlayerConnectorMeta_filter]
}

enum stagingmainnet_XlayerConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet_ZkSyncConnectorMeta {
  id: ID!
  spokeDomain: BigInt!
  hubDomain: BigInt!
  amb: stagingmainnet_Bytes!
  rootManager: stagingmainnet_Bytes!
  mirrorConnector: stagingmainnet_Bytes!
}

input stagingmainnet_ZkSyncConnectorMeta_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spokeDomain: BigInt
  spokeDomain_not: BigInt
  spokeDomain_gt: BigInt
  spokeDomain_lt: BigInt
  spokeDomain_gte: BigInt
  spokeDomain_lte: BigInt
  spokeDomain_in: [BigInt!]
  spokeDomain_not_in: [BigInt!]
  hubDomain: BigInt
  hubDomain_not: BigInt
  hubDomain_gt: BigInt
  hubDomain_lt: BigInt
  hubDomain_gte: BigInt
  hubDomain_lte: BigInt
  hubDomain_in: [BigInt!]
  hubDomain_not_in: [BigInt!]
  amb: stagingmainnet_Bytes
  amb_not: stagingmainnet_Bytes
  amb_gt: stagingmainnet_Bytes
  amb_lt: stagingmainnet_Bytes
  amb_gte: stagingmainnet_Bytes
  amb_lte: stagingmainnet_Bytes
  amb_in: [stagingmainnet_Bytes!]
  amb_not_in: [stagingmainnet_Bytes!]
  amb_contains: stagingmainnet_Bytes
  amb_not_contains: stagingmainnet_Bytes
  rootManager: stagingmainnet_Bytes
  rootManager_not: stagingmainnet_Bytes
  rootManager_gt: stagingmainnet_Bytes
  rootManager_lt: stagingmainnet_Bytes
  rootManager_gte: stagingmainnet_Bytes
  rootManager_lte: stagingmainnet_Bytes
  rootManager_in: [stagingmainnet_Bytes!]
  rootManager_not_in: [stagingmainnet_Bytes!]
  rootManager_contains: stagingmainnet_Bytes
  rootManager_not_contains: stagingmainnet_Bytes
  mirrorConnector: stagingmainnet_Bytes
  mirrorConnector_not: stagingmainnet_Bytes
  mirrorConnector_gt: stagingmainnet_Bytes
  mirrorConnector_lt: stagingmainnet_Bytes
  mirrorConnector_gte: stagingmainnet_Bytes
  mirrorConnector_lte: stagingmainnet_Bytes
  mirrorConnector_in: [stagingmainnet_Bytes!]
  mirrorConnector_not_in: [stagingmainnet_Bytes!]
  mirrorConnector_contains: stagingmainnet_Bytes
  mirrorConnector_not_contains: stagingmainnet_Bytes
  """Filter for the block changed event."""
  _change_block: stagingmainnet_BlockChangedFilter
  and: [stagingmainnet_ZkSyncConnectorMeta_filter]
  or: [stagingmainnet_ZkSyncConnectorMeta_filter]
}

enum stagingmainnet_ZkSyncConnectorMeta_orderBy {
  id
  spokeDomain
  hubDomain
  amb
  rootManager
  mirrorConnector
}

type stagingmainnet__Block_ {
  """The hash of the block"""
  hash: stagingmainnet_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: stagingmainnet_Bytes
}

"""The type for the top-level _meta field"""
type stagingmainnet__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: stagingmainnet__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}