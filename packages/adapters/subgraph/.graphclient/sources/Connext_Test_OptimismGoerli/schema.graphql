schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum testoptimismgoerli_Aggregation_interval {
  hour
  day
}

type testoptimismgoerli_Asset {
  id: ID!
  key: testoptimismgoerli_Bytes
  local: testoptimismgoerli_Bytes!
  adoptedAsset: testoptimismgoerli_Bytes!
  canonicalId: testoptimismgoerli_Bytes!
  canonicalDomain: BigInt!
  blockNumber: BigInt!
}

type testoptimismgoerli_AssetBalance {
  id: ID!
  amount: BigInt!
  router: testoptimismgoerli_Router!
  asset: testoptimismgoerli_Asset!
}

input testoptimismgoerli_AssetBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  router: String
  router_not: String
  router_gt: String
  router_lt: String
  router_gte: String
  router_lte: String
  router_in: [String!]
  router_not_in: [String!]
  router_contains: String
  router_contains_nocase: String
  router_not_contains: String
  router_not_contains_nocase: String
  router_starts_with: String
  router_starts_with_nocase: String
  router_not_starts_with: String
  router_not_starts_with_nocase: String
  router_ends_with: String
  router_ends_with_nocase: String
  router_not_ends_with: String
  router_not_ends_with_nocase: String
  router_: testoptimismgoerli_Router_filter
  asset: String
  asset_not: String
  asset_gt: String
  asset_lt: String
  asset_gte: String
  asset_lte: String
  asset_in: [String!]
  asset_not_in: [String!]
  asset_contains: String
  asset_contains_nocase: String
  asset_not_contains: String
  asset_not_contains_nocase: String
  asset_starts_with: String
  asset_starts_with_nocase: String
  asset_not_starts_with: String
  asset_not_starts_with_nocase: String
  asset_ends_with: String
  asset_ends_with_nocase: String
  asset_not_ends_with: String
  asset_not_ends_with_nocase: String
  asset_: testoptimismgoerli_Asset_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
  and: [testoptimismgoerli_AssetBalance_filter]
  or: [testoptimismgoerli_AssetBalance_filter]
}

enum testoptimismgoerli_AssetBalance_orderBy {
  id
  amount
  router
  router__id
  router__isActive
  router__owner
  router__recipient
  router__proposedOwner
  router__proposedTimestamp
  asset
  asset__id
  asset__key
  asset__local
  asset__adoptedAsset
  asset__canonicalId
  asset__canonicalDomain
  asset__blockNumber
}

input testoptimismgoerli_Asset_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  key: testoptimismgoerli_Bytes
  key_not: testoptimismgoerli_Bytes
  key_gt: testoptimismgoerli_Bytes
  key_lt: testoptimismgoerli_Bytes
  key_gte: testoptimismgoerli_Bytes
  key_lte: testoptimismgoerli_Bytes
  key_in: [testoptimismgoerli_Bytes!]
  key_not_in: [testoptimismgoerli_Bytes!]
  key_contains: testoptimismgoerli_Bytes
  key_not_contains: testoptimismgoerli_Bytes
  local: testoptimismgoerli_Bytes
  local_not: testoptimismgoerli_Bytes
  local_gt: testoptimismgoerli_Bytes
  local_lt: testoptimismgoerli_Bytes
  local_gte: testoptimismgoerli_Bytes
  local_lte: testoptimismgoerli_Bytes
  local_in: [testoptimismgoerli_Bytes!]
  local_not_in: [testoptimismgoerli_Bytes!]
  local_contains: testoptimismgoerli_Bytes
  local_not_contains: testoptimismgoerli_Bytes
  adoptedAsset: testoptimismgoerli_Bytes
  adoptedAsset_not: testoptimismgoerli_Bytes
  adoptedAsset_gt: testoptimismgoerli_Bytes
  adoptedAsset_lt: testoptimismgoerli_Bytes
  adoptedAsset_gte: testoptimismgoerli_Bytes
  adoptedAsset_lte: testoptimismgoerli_Bytes
  adoptedAsset_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_not_in: [testoptimismgoerli_Bytes!]
  adoptedAsset_contains: testoptimismgoerli_Bytes
  adoptedAsset_not_contains: testoptimismgoerli_Bytes
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_gt: testoptimismgoerli_Bytes
  canonicalId_lt: testoptimismgoerli_Bytes
  canonicalId_gte: testoptimismgoerli_Bytes
  canonicalId_lte: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
  canonicalDomain: BigInt
  canonicalDomain_not: BigInt
  canonicalDomain_gt: BigInt
  canonicalDomain_lt: BigInt
  canonicalDomain_gte: BigInt
  canonicalDomain_lte: BigInt
  canonicalDomain_in: [BigInt!]
  canonicalDomain_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
  and: [testoptimismgoerli_Asset_filter]
  or: [testoptimismgoerli_Asset_filter]
}

enum testoptimismgoerli_Asset_orderBy {
  id
  key
  local
  adoptedAsset
  canonicalId
  canonicalDomain
  blockNumber
}

scalar testoptimismgoerli_BigDecimal

scalar BigInt

input testoptimismgoerli_BlockChangedFilter {
  number_gte: Int!
}

input testoptimismgoerli_Block_height {
  hash: testoptimismgoerli_Bytes
  number: Int
  number_gte: Int
}

scalar testoptimismgoerli_Bytes

type testoptimismgoerli_DestinationTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  routers(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_Router_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_Router_filter): [testoptimismgoerli_Router!]
  originSender: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  localAsset: testoptimismgoerli_Bytes
  localAmount: BigInt
  sponsorVaultRelayerFee: BigInt
  executedCaller: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedGasPrice: BigInt
  executedGasLimit: BigInt
  executedBlockNumber: BigInt
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledGasPrice: BigInt
  reconciledGasLimit: BigInt
  reconciledBlockNumber: BigInt
}

input testoptimismgoerli_DestinationTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_gt: testoptimismgoerli_Bytes
  transferId_lt: testoptimismgoerli_Bytes
  transferId_gte: testoptimismgoerli_Bytes
  transferId_lte: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_gt: testoptimismgoerli_Bytes
  to_lt: testoptimismgoerli_Bytes
  to_gte: testoptimismgoerli_Bytes
  to_lte: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_gt: testoptimismgoerli_Bytes
  callData_lt: testoptimismgoerli_Bytes
  callData_gte: testoptimismgoerli_Bytes
  callData_lte: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_gt: testoptimismgoerli_Bytes
  agent_lt: testoptimismgoerli_Bytes
  agent_gte: testoptimismgoerli_Bytes
  agent_lte: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_gt: testoptimismgoerli_Bytes
  recovery_lt: testoptimismgoerli_Bytes
  recovery_gte: testoptimismgoerli_Bytes
  recovery_lte: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_gt: testoptimismgoerli_Bytes
  callback_lt: testoptimismgoerli_Bytes
  callback_gte: testoptimismgoerli_Bytes
  callback_lte: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
  routers: [String!]
  routers_not: [String!]
  routers_contains: [String!]
  routers_contains_nocase: [String!]
  routers_not_contains: [String!]
  routers_not_contains_nocase: [String!]
  routers_: testoptimismgoerli_Router_filter
  originSender: testoptimismgoerli_Bytes
  originSender_not: testoptimismgoerli_Bytes
  originSender_gt: testoptimismgoerli_Bytes
  originSender_lt: testoptimismgoerli_Bytes
  originSender_gte: testoptimismgoerli_Bytes
  originSender_lte: testoptimismgoerli_Bytes
  originSender_in: [testoptimismgoerli_Bytes!]
  originSender_not_in: [testoptimismgoerli_Bytes!]
  originSender_contains: testoptimismgoerli_Bytes
  originSender_not_contains: testoptimismgoerli_Bytes
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_gt: testoptimismgoerli_Bytes
  transactingAsset_lt: testoptimismgoerli_Bytes
  transactingAsset_gte: testoptimismgoerli_Bytes
  transactingAsset_lte: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  localAsset: testoptimismgoerli_Bytes
  localAsset_not: testoptimismgoerli_Bytes
  localAsset_gt: testoptimismgoerli_Bytes
  localAsset_lt: testoptimismgoerli_Bytes
  localAsset_gte: testoptimismgoerli_Bytes
  localAsset_lte: testoptimismgoerli_Bytes
  localAsset_in: [testoptimismgoerli_Bytes!]
  localAsset_not_in: [testoptimismgoerli_Bytes!]
  localAsset_contains: testoptimismgoerli_Bytes
  localAsset_not_contains: testoptimismgoerli_Bytes
  localAmount: BigInt
  localAmount_not: BigInt
  localAmount_gt: BigInt
  localAmount_lt: BigInt
  localAmount_gte: BigInt
  localAmount_lte: BigInt
  localAmount_in: [BigInt!]
  localAmount_not_in: [BigInt!]
  sponsorVaultRelayerFee: BigInt
  sponsorVaultRelayerFee_not: BigInt
  sponsorVaultRelayerFee_gt: BigInt
  sponsorVaultRelayerFee_lt: BigInt
  sponsorVaultRelayerFee_gte: BigInt
  sponsorVaultRelayerFee_lte: BigInt
  sponsorVaultRelayerFee_in: [BigInt!]
  sponsorVaultRelayerFee_not_in: [BigInt!]
  executedCaller: testoptimismgoerli_Bytes
  executedCaller_not: testoptimismgoerli_Bytes
  executedCaller_gt: testoptimismgoerli_Bytes
  executedCaller_lt: testoptimismgoerli_Bytes
  executedCaller_gte: testoptimismgoerli_Bytes
  executedCaller_lte: testoptimismgoerli_Bytes
  executedCaller_in: [testoptimismgoerli_Bytes!]
  executedCaller_not_in: [testoptimismgoerli_Bytes!]
  executedCaller_contains: testoptimismgoerli_Bytes
  executedCaller_not_contains: testoptimismgoerli_Bytes
  executedTransactionHash: testoptimismgoerli_Bytes
  executedTransactionHash_not: testoptimismgoerli_Bytes
  executedTransactionHash_gt: testoptimismgoerli_Bytes
  executedTransactionHash_lt: testoptimismgoerli_Bytes
  executedTransactionHash_gte: testoptimismgoerli_Bytes
  executedTransactionHash_lte: testoptimismgoerli_Bytes
  executedTransactionHash_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  executedTransactionHash_contains: testoptimismgoerli_Bytes
  executedTransactionHash_not_contains: testoptimismgoerli_Bytes
  executedTimestamp: BigInt
  executedTimestamp_not: BigInt
  executedTimestamp_gt: BigInt
  executedTimestamp_lt: BigInt
  executedTimestamp_gte: BigInt
  executedTimestamp_lte: BigInt
  executedTimestamp_in: [BigInt!]
  executedTimestamp_not_in: [BigInt!]
  executedGasPrice: BigInt
  executedGasPrice_not: BigInt
  executedGasPrice_gt: BigInt
  executedGasPrice_lt: BigInt
  executedGasPrice_gte: BigInt
  executedGasPrice_lte: BigInt
  executedGasPrice_in: [BigInt!]
  executedGasPrice_not_in: [BigInt!]
  executedGasLimit: BigInt
  executedGasLimit_not: BigInt
  executedGasLimit_gt: BigInt
  executedGasLimit_lt: BigInt
  executedGasLimit_gte: BigInt
  executedGasLimit_lte: BigInt
  executedGasLimit_in: [BigInt!]
  executedGasLimit_not_in: [BigInt!]
  executedBlockNumber: BigInt
  executedBlockNumber_not: BigInt
  executedBlockNumber_gt: BigInt
  executedBlockNumber_lt: BigInt
  executedBlockNumber_gte: BigInt
  executedBlockNumber_lte: BigInt
  executedBlockNumber_in: [BigInt!]
  executedBlockNumber_not_in: [BigInt!]
  reconciledCaller: testoptimismgoerli_Bytes
  reconciledCaller_not: testoptimismgoerli_Bytes
  reconciledCaller_gt: testoptimismgoerli_Bytes
  reconciledCaller_lt: testoptimismgoerli_Bytes
  reconciledCaller_gte: testoptimismgoerli_Bytes
  reconciledCaller_lte: testoptimismgoerli_Bytes
  reconciledCaller_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_not_in: [testoptimismgoerli_Bytes!]
  reconciledCaller_contains: testoptimismgoerli_Bytes
  reconciledCaller_not_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash: testoptimismgoerli_Bytes
  reconciledTransactionHash_not: testoptimismgoerli_Bytes
  reconciledTransactionHash_gt: testoptimismgoerli_Bytes
  reconciledTransactionHash_lt: testoptimismgoerli_Bytes
  reconciledTransactionHash_gte: testoptimismgoerli_Bytes
  reconciledTransactionHash_lte: testoptimismgoerli_Bytes
  reconciledTransactionHash_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_not_in: [testoptimismgoerli_Bytes!]
  reconciledTransactionHash_contains: testoptimismgoerli_Bytes
  reconciledTransactionHash_not_contains: testoptimismgoerli_Bytes
  reconciledTimestamp: BigInt
  reconciledTimestamp_not: BigInt
  reconciledTimestamp_gt: BigInt
  reconciledTimestamp_lt: BigInt
  reconciledTimestamp_gte: BigInt
  reconciledTimestamp_lte: BigInt
  reconciledTimestamp_in: [BigInt!]
  reconciledTimestamp_not_in: [BigInt!]
  reconciledGasPrice: BigInt
  reconciledGasPrice_not: BigInt
  reconciledGasPrice_gt: BigInt
  reconciledGasPrice_lt: BigInt
  reconciledGasPrice_gte: BigInt
  reconciledGasPrice_lte: BigInt
  reconciledGasPrice_in: [BigInt!]
  reconciledGasPrice_not_in: [BigInt!]
  reconciledGasLimit: BigInt
  reconciledGasLimit_not: BigInt
  reconciledGasLimit_gt: BigInt
  reconciledGasLimit_lt: BigInt
  reconciledGasLimit_gte: BigInt
  reconciledGasLimit_lte: BigInt
  reconciledGasLimit_in: [BigInt!]
  reconciledGasLimit_not_in: [BigInt!]
  reconciledBlockNumber: BigInt
  reconciledBlockNumber_not: BigInt
  reconciledBlockNumber_gt: BigInt
  reconciledBlockNumber_lt: BigInt
  reconciledBlockNumber_gte: BigInt
  reconciledBlockNumber_lte: BigInt
  reconciledBlockNumber_in: [BigInt!]
  reconciledBlockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
  and: [testoptimismgoerli_DestinationTransfer_filter]
  or: [testoptimismgoerli_DestinationTransfer_filter]
}

enum testoptimismgoerli_DestinationTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  routers
  originSender
  transactingAsset
  transactingAmount
  localAsset
  localAmount
  sponsorVaultRelayerFee
  executedCaller
  executedTransactionHash
  executedTimestamp
  executedGasPrice
  executedGasLimit
  executedBlockNumber
  reconciledCaller
  reconciledTransactionHash
  reconciledTimestamp
  reconciledGasPrice
  reconciledGasLimit
  reconciledBlockNumber
}

"""
8 bytes signed integer

"""
scalar testoptimismgoerli_Int8

"""Defines the order direction, either ascending or descending"""
enum testoptimismgoerli_OrderDirection {
  asc
  desc
}

type testoptimismgoerli_OriginTransfer {
  id: ID!
  chainId: BigInt
  transferId: testoptimismgoerli_Bytes
  nonce: BigInt
  to: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  originDomain: BigInt
  destinationDomain: BigInt
  agent: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  forceSlow: Boolean
  receiveLocal: Boolean
  callback: testoptimismgoerli_Bytes
  callbackFee: BigInt
  relayerFee: BigInt
  destinationMinOut: BigInt
  status: testoptimismgoerli_TransferStatus
  originMinOut: BigInt
  transactingAsset: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAmount: BigInt
  caller: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
  timestamp: BigInt
  gasPrice: BigInt
  gasLimit: BigInt
  blockNumber: BigInt
}

input testoptimismgoerli_OriginTransfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  chainId: BigInt
  chainId_not: BigInt
  chainId_gt: BigInt
  chainId_lt: BigInt
  chainId_gte: BigInt
  chainId_lte: BigInt
  chainId_in: [BigInt!]
  chainId_not_in: [BigInt!]
  transferId: testoptimismgoerli_Bytes
  transferId_not: testoptimismgoerli_Bytes
  transferId_gt: testoptimismgoerli_Bytes
  transferId_lt: testoptimismgoerli_Bytes
  transferId_gte: testoptimismgoerli_Bytes
  transferId_lte: testoptimismgoerli_Bytes
  transferId_in: [testoptimismgoerli_Bytes!]
  transferId_not_in: [testoptimismgoerli_Bytes!]
  transferId_contains: testoptimismgoerli_Bytes
  transferId_not_contains: testoptimismgoerli_Bytes
  nonce: BigInt
  nonce_not: BigInt
  nonce_gt: BigInt
  nonce_lt: BigInt
  nonce_gte: BigInt
  nonce_lte: BigInt
  nonce_in: [BigInt!]
  nonce_not_in: [BigInt!]
  to: testoptimismgoerli_Bytes
  to_not: testoptimismgoerli_Bytes
  to_gt: testoptimismgoerli_Bytes
  to_lt: testoptimismgoerli_Bytes
  to_gte: testoptimismgoerli_Bytes
  to_lte: testoptimismgoerli_Bytes
  to_in: [testoptimismgoerli_Bytes!]
  to_not_in: [testoptimismgoerli_Bytes!]
  to_contains: testoptimismgoerli_Bytes
  to_not_contains: testoptimismgoerli_Bytes
  callData: testoptimismgoerli_Bytes
  callData_not: testoptimismgoerli_Bytes
  callData_gt: testoptimismgoerli_Bytes
  callData_lt: testoptimismgoerli_Bytes
  callData_gte: testoptimismgoerli_Bytes
  callData_lte: testoptimismgoerli_Bytes
  callData_in: [testoptimismgoerli_Bytes!]
  callData_not_in: [testoptimismgoerli_Bytes!]
  callData_contains: testoptimismgoerli_Bytes
  callData_not_contains: testoptimismgoerli_Bytes
  originDomain: BigInt
  originDomain_not: BigInt
  originDomain_gt: BigInt
  originDomain_lt: BigInt
  originDomain_gte: BigInt
  originDomain_lte: BigInt
  originDomain_in: [BigInt!]
  originDomain_not_in: [BigInt!]
  destinationDomain: BigInt
  destinationDomain_not: BigInt
  destinationDomain_gt: BigInt
  destinationDomain_lt: BigInt
  destinationDomain_gte: BigInt
  destinationDomain_lte: BigInt
  destinationDomain_in: [BigInt!]
  destinationDomain_not_in: [BigInt!]
  agent: testoptimismgoerli_Bytes
  agent_not: testoptimismgoerli_Bytes
  agent_gt: testoptimismgoerli_Bytes
  agent_lt: testoptimismgoerli_Bytes
  agent_gte: testoptimismgoerli_Bytes
  agent_lte: testoptimismgoerli_Bytes
  agent_in: [testoptimismgoerli_Bytes!]
  agent_not_in: [testoptimismgoerli_Bytes!]
  agent_contains: testoptimismgoerli_Bytes
  agent_not_contains: testoptimismgoerli_Bytes
  recovery: testoptimismgoerli_Bytes
  recovery_not: testoptimismgoerli_Bytes
  recovery_gt: testoptimismgoerli_Bytes
  recovery_lt: testoptimismgoerli_Bytes
  recovery_gte: testoptimismgoerli_Bytes
  recovery_lte: testoptimismgoerli_Bytes
  recovery_in: [testoptimismgoerli_Bytes!]
  recovery_not_in: [testoptimismgoerli_Bytes!]
  recovery_contains: testoptimismgoerli_Bytes
  recovery_not_contains: testoptimismgoerli_Bytes
  forceSlow: Boolean
  forceSlow_not: Boolean
  forceSlow_in: [Boolean!]
  forceSlow_not_in: [Boolean!]
  receiveLocal: Boolean
  receiveLocal_not: Boolean
  receiveLocal_in: [Boolean!]
  receiveLocal_not_in: [Boolean!]
  callback: testoptimismgoerli_Bytes
  callback_not: testoptimismgoerli_Bytes
  callback_gt: testoptimismgoerli_Bytes
  callback_lt: testoptimismgoerli_Bytes
  callback_gte: testoptimismgoerli_Bytes
  callback_lte: testoptimismgoerli_Bytes
  callback_in: [testoptimismgoerli_Bytes!]
  callback_not_in: [testoptimismgoerli_Bytes!]
  callback_contains: testoptimismgoerli_Bytes
  callback_not_contains: testoptimismgoerli_Bytes
  callbackFee: BigInt
  callbackFee_not: BigInt
  callbackFee_gt: BigInt
  callbackFee_lt: BigInt
  callbackFee_gte: BigInt
  callbackFee_lte: BigInt
  callbackFee_in: [BigInt!]
  callbackFee_not_in: [BigInt!]
  relayerFee: BigInt
  relayerFee_not: BigInt
  relayerFee_gt: BigInt
  relayerFee_lt: BigInt
  relayerFee_gte: BigInt
  relayerFee_lte: BigInt
  relayerFee_in: [BigInt!]
  relayerFee_not_in: [BigInt!]
  destinationMinOut: BigInt
  destinationMinOut_not: BigInt
  destinationMinOut_gt: BigInt
  destinationMinOut_lt: BigInt
  destinationMinOut_gte: BigInt
  destinationMinOut_lte: BigInt
  destinationMinOut_in: [BigInt!]
  destinationMinOut_not_in: [BigInt!]
  status: testoptimismgoerli_TransferStatus
  status_not: testoptimismgoerli_TransferStatus
  status_in: [testoptimismgoerli_TransferStatus!]
  status_not_in: [testoptimismgoerli_TransferStatus!]
  originMinOut: BigInt
  originMinOut_not: BigInt
  originMinOut_gt: BigInt
  originMinOut_lt: BigInt
  originMinOut_gte: BigInt
  originMinOut_lte: BigInt
  originMinOut_in: [BigInt!]
  originMinOut_not_in: [BigInt!]
  transactingAsset: testoptimismgoerli_Bytes
  transactingAsset_not: testoptimismgoerli_Bytes
  transactingAsset_gt: testoptimismgoerli_Bytes
  transactingAsset_lt: testoptimismgoerli_Bytes
  transactingAsset_gte: testoptimismgoerli_Bytes
  transactingAsset_lte: testoptimismgoerli_Bytes
  transactingAsset_in: [testoptimismgoerli_Bytes!]
  transactingAsset_not_in: [testoptimismgoerli_Bytes!]
  transactingAsset_contains: testoptimismgoerli_Bytes
  transactingAsset_not_contains: testoptimismgoerli_Bytes
  transactingAmount: BigInt
  transactingAmount_not: BigInt
  transactingAmount_gt: BigInt
  transactingAmount_lt: BigInt
  transactingAmount_gte: BigInt
  transactingAmount_lte: BigInt
  transactingAmount_in: [BigInt!]
  transactingAmount_not_in: [BigInt!]
  bridgedAsset: testoptimismgoerli_Bytes
  bridgedAsset_not: testoptimismgoerli_Bytes
  bridgedAsset_gt: testoptimismgoerli_Bytes
  bridgedAsset_lt: testoptimismgoerli_Bytes
  bridgedAsset_gte: testoptimismgoerli_Bytes
  bridgedAsset_lte: testoptimismgoerli_Bytes
  bridgedAsset_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_not_in: [testoptimismgoerli_Bytes!]
  bridgedAsset_contains: testoptimismgoerli_Bytes
  bridgedAsset_not_contains: testoptimismgoerli_Bytes
  bridgedAmount: BigInt
  bridgedAmount_not: BigInt
  bridgedAmount_gt: BigInt
  bridgedAmount_lt: BigInt
  bridgedAmount_gte: BigInt
  bridgedAmount_lte: BigInt
  bridgedAmount_in: [BigInt!]
  bridgedAmount_not_in: [BigInt!]
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_gt: testoptimismgoerli_Bytes
  caller_lt: testoptimismgoerli_Bytes
  caller_gte: testoptimismgoerli_Bytes
  caller_lte: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  transactionHash: testoptimismgoerli_Bytes
  transactionHash_not: testoptimismgoerli_Bytes
  transactionHash_gt: testoptimismgoerli_Bytes
  transactionHash_lt: testoptimismgoerli_Bytes
  transactionHash_gte: testoptimismgoerli_Bytes
  transactionHash_lte: testoptimismgoerli_Bytes
  transactionHash_in: [testoptimismgoerli_Bytes!]
  transactionHash_not_in: [testoptimismgoerli_Bytes!]
  transactionHash_contains: testoptimismgoerli_Bytes
  transactionHash_not_contains: testoptimismgoerli_Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
  and: [testoptimismgoerli_OriginTransfer_filter]
  or: [testoptimismgoerli_OriginTransfer_filter]
}

enum testoptimismgoerli_OriginTransfer_orderBy {
  id
  chainId
  transferId
  nonce
  to
  callData
  originDomain
  destinationDomain
  agent
  recovery
  forceSlow
  receiveLocal
  callback
  callbackFee
  relayerFee
  destinationMinOut
  status
  originMinOut
  transactingAsset
  transactingAmount
  bridgedAsset
  bridgedAmount
  caller
  transactionHash
  timestamp
  gasPrice
  gasLimit
  blockNumber
}

type Query {
  testoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
}

type testoptimismgoerli_Relayer {
  id: ID!
  isActive: Boolean!
  relayer: testoptimismgoerli_Bytes
}

input testoptimismgoerli_Relayer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  relayer: testoptimismgoerli_Bytes
  relayer_not: testoptimismgoerli_Bytes
  relayer_gt: testoptimismgoerli_Bytes
  relayer_lt: testoptimismgoerli_Bytes
  relayer_gte: testoptimismgoerli_Bytes
  relayer_lte: testoptimismgoerli_Bytes
  relayer_in: [testoptimismgoerli_Bytes!]
  relayer_not_in: [testoptimismgoerli_Bytes!]
  relayer_contains: testoptimismgoerli_Bytes
  relayer_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
  and: [testoptimismgoerli_Relayer_filter]
  or: [testoptimismgoerli_Relayer_filter]
}

enum testoptimismgoerli_Relayer_orderBy {
  id
  isActive
  relayer
}

type testoptimismgoerli_Router {
  id: ID!
  isActive: Boolean!
  owner: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  assetBalances(skip: Int = 0, first: Int = 100, orderBy: testoptimismgoerli_AssetBalance_orderBy, orderDirection: testoptimismgoerli_OrderDirection, where: testoptimismgoerli_AssetBalance_filter): [testoptimismgoerli_AssetBalance!]!
}

input testoptimismgoerli_Router_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  owner: testoptimismgoerli_Bytes
  owner_not: testoptimismgoerli_Bytes
  owner_gt: testoptimismgoerli_Bytes
  owner_lt: testoptimismgoerli_Bytes
  owner_gte: testoptimismgoerli_Bytes
  owner_lte: testoptimismgoerli_Bytes
  owner_in: [testoptimismgoerli_Bytes!]
  owner_not_in: [testoptimismgoerli_Bytes!]
  owner_contains: testoptimismgoerli_Bytes
  owner_not_contains: testoptimismgoerli_Bytes
  recipient: testoptimismgoerli_Bytes
  recipient_not: testoptimismgoerli_Bytes
  recipient_gt: testoptimismgoerli_Bytes
  recipient_lt: testoptimismgoerli_Bytes
  recipient_gte: testoptimismgoerli_Bytes
  recipient_lte: testoptimismgoerli_Bytes
  recipient_in: [testoptimismgoerli_Bytes!]
  recipient_not_in: [testoptimismgoerli_Bytes!]
  recipient_contains: testoptimismgoerli_Bytes
  recipient_not_contains: testoptimismgoerli_Bytes
  proposedOwner: testoptimismgoerli_Bytes
  proposedOwner_not: testoptimismgoerli_Bytes
  proposedOwner_gt: testoptimismgoerli_Bytes
  proposedOwner_lt: testoptimismgoerli_Bytes
  proposedOwner_gte: testoptimismgoerli_Bytes
  proposedOwner_lte: testoptimismgoerli_Bytes
  proposedOwner_in: [testoptimismgoerli_Bytes!]
  proposedOwner_not_in: [testoptimismgoerli_Bytes!]
  proposedOwner_contains: testoptimismgoerli_Bytes
  proposedOwner_not_contains: testoptimismgoerli_Bytes
  proposedTimestamp: BigInt
  proposedTimestamp_not: BigInt
  proposedTimestamp_gt: BigInt
  proposedTimestamp_lt: BigInt
  proposedTimestamp_gte: BigInt
  proposedTimestamp_lte: BigInt
  proposedTimestamp_in: [BigInt!]
  proposedTimestamp_not_in: [BigInt!]
  assetBalances_: testoptimismgoerli_AssetBalance_filter
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
  and: [testoptimismgoerli_Router_filter]
  or: [testoptimismgoerli_Router_filter]
}

enum testoptimismgoerli_Router_orderBy {
  id
  isActive
  owner
  recipient
  proposedOwner
  proposedTimestamp
  assetBalances
}

type testoptimismgoerli_Setting {
  id: ID!
  maxRoutersPerTransfer: BigInt!
  caller: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_Setting_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  maxRoutersPerTransfer: BigInt
  maxRoutersPerTransfer_not: BigInt
  maxRoutersPerTransfer_gt: BigInt
  maxRoutersPerTransfer_lt: BigInt
  maxRoutersPerTransfer_gte: BigInt
  maxRoutersPerTransfer_lte: BigInt
  maxRoutersPerTransfer_in: [BigInt!]
  maxRoutersPerTransfer_not_in: [BigInt!]
  caller: testoptimismgoerli_Bytes
  caller_not: testoptimismgoerli_Bytes
  caller_gt: testoptimismgoerli_Bytes
  caller_lt: testoptimismgoerli_Bytes
  caller_gte: testoptimismgoerli_Bytes
  caller_lte: testoptimismgoerli_Bytes
  caller_in: [testoptimismgoerli_Bytes!]
  caller_not_in: [testoptimismgoerli_Bytes!]
  caller_contains: testoptimismgoerli_Bytes
  caller_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
  and: [testoptimismgoerli_Setting_filter]
  or: [testoptimismgoerli_Setting_filter]
}

enum testoptimismgoerli_Setting_orderBy {
  id
  maxRoutersPerTransfer
  caller
}

type testoptimismgoerli_SponsorVault {
  id: ID!
  sponsorVault: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_SponsorVault_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sponsorVault: testoptimismgoerli_Bytes
  sponsorVault_not: testoptimismgoerli_Bytes
  sponsorVault_gt: testoptimismgoerli_Bytes
  sponsorVault_lt: testoptimismgoerli_Bytes
  sponsorVault_gte: testoptimismgoerli_Bytes
  sponsorVault_lte: testoptimismgoerli_Bytes
  sponsorVault_in: [testoptimismgoerli_Bytes!]
  sponsorVault_not_in: [testoptimismgoerli_Bytes!]
  sponsorVault_contains: testoptimismgoerli_Bytes
  sponsorVault_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
  and: [testoptimismgoerli_SponsorVault_filter]
  or: [testoptimismgoerli_SponsorVault_filter]
}

enum testoptimismgoerli_SponsorVault_orderBy {
  id
  sponsorVault
}

type testoptimismgoerli_StableSwap {
  id: ID!
  canonicalId: testoptimismgoerli_Bytes!
  domain: BigInt
  swapPool: testoptimismgoerli_Bytes!
}

input testoptimismgoerli_StableSwap_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  canonicalId: testoptimismgoerli_Bytes
  canonicalId_not: testoptimismgoerli_Bytes
  canonicalId_gt: testoptimismgoerli_Bytes
  canonicalId_lt: testoptimismgoerli_Bytes
  canonicalId_gte: testoptimismgoerli_Bytes
  canonicalId_lte: testoptimismgoerli_Bytes
  canonicalId_in: [testoptimismgoerli_Bytes!]
  canonicalId_not_in: [testoptimismgoerli_Bytes!]
  canonicalId_contains: testoptimismgoerli_Bytes
  canonicalId_not_contains: testoptimismgoerli_Bytes
  domain: BigInt
  domain_not: BigInt
  domain_gt: BigInt
  domain_lt: BigInt
  domain_gte: BigInt
  domain_lte: BigInt
  domain_in: [BigInt!]
  domain_not_in: [BigInt!]
  swapPool: testoptimismgoerli_Bytes
  swapPool_not: testoptimismgoerli_Bytes
  swapPool_gt: testoptimismgoerli_Bytes
  swapPool_lt: testoptimismgoerli_Bytes
  swapPool_gte: testoptimismgoerli_Bytes
  swapPool_lte: testoptimismgoerli_Bytes
  swapPool_in: [testoptimismgoerli_Bytes!]
  swapPool_not_in: [testoptimismgoerli_Bytes!]
  swapPool_contains: testoptimismgoerli_Bytes
  swapPool_not_contains: testoptimismgoerli_Bytes
  """Filter for the block changed event."""
  _change_block: testoptimismgoerli_BlockChangedFilter
  and: [testoptimismgoerli_StableSwap_filter]
  or: [testoptimismgoerli_StableSwap_filter]
}

enum testoptimismgoerli_StableSwap_orderBy {
  id
  canonicalId
  domain
  swapPool
}

type Subscription {
  testoptimismgoerli_asset(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Asset
  testoptimismgoerli_assets(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Asset_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Asset_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Asset!]!
  testoptimismgoerli_assetBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_AssetBalance
  testoptimismgoerli_assetBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_AssetBalance_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_AssetBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_AssetBalance!]!
  testoptimismgoerli_router(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Router
  testoptimismgoerli_routers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Router_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Router_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Router!]!
  testoptimismgoerli_setting(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Setting
  testoptimismgoerli_settings(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Setting_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Setting_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Setting!]!
  testoptimismgoerli_relayer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_Relayer
  testoptimismgoerli_relayers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_Relayer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_Relayer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_Relayer!]!
  testoptimismgoerli_stableSwap(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_StableSwap
  testoptimismgoerli_stableSwaps(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_StableSwap_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_StableSwap_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_StableSwap!]!
  testoptimismgoerli_sponsorVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_SponsorVault
  testoptimismgoerli_sponsorVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_SponsorVault_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_SponsorVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_SponsorVault!]!
  testoptimismgoerli_originTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_OriginTransfer
  testoptimismgoerli_originTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_OriginTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_OriginTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_OriginTransfer!]!
  testoptimismgoerli_destinationTransfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): testoptimismgoerli_DestinationTransfer
  testoptimismgoerli_destinationTransfers(
    skip: Int = 0
    first: Int = 100
    orderBy: testoptimismgoerli_DestinationTransfer_orderBy
    orderDirection: testoptimismgoerli_OrderDirection
    where: testoptimismgoerli_DestinationTransfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: testoptimismgoerli_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [testoptimismgoerli_DestinationTransfer!]!
  """Access to subgraph metadata"""
  testoptimismgoerli__meta(block: testoptimismgoerli_Block_height): testoptimismgoerli__Meta_
}

enum testoptimismgoerli_TransferStatus {
  XCalled
  Executed
  Reconciled
  CompletedSlow
  CompletedFast
}

type testoptimismgoerli__Block_ {
  """The hash of the block"""
  hash: testoptimismgoerli_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: testoptimismgoerli_Bytes
}

"""The type for the top-level _meta field"""
type testoptimismgoerli__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: testoptimismgoerli__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}