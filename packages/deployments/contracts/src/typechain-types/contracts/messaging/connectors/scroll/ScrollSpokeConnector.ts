/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace SpokeConnector {
  export type ConstructorParamsStruct = {
    domain: PromiseOrValue<BigNumberish>;
    mirrorDomain: PromiseOrValue<BigNumberish>;
    amb: PromiseOrValue<string>;
    rootManager: PromiseOrValue<string>;
    mirrorConnector: PromiseOrValue<string>;
    processGas: PromiseOrValue<BigNumberish>;
    reserveGas: PromiseOrValue<BigNumberish>;
    delayBlocks: PromiseOrValue<BigNumberish>;
    merkle: PromiseOrValue<string>;
    watcherManager: PromiseOrValue<string>;
    minDisputeBlocks: PromiseOrValue<BigNumberish>;
    disputeBlocks: PromiseOrValue<BigNumberish>;
  };

  export type ConstructorParamsStructOutput = [
    number,
    number,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    domain: number;
    mirrorDomain: number;
    amb: string;
    rootManager: string;
    mirrorConnector: string;
    processGas: BigNumber;
    reserveGas: BigNumber;
    delayBlocks: BigNumber;
    merkle: string;
    watcherManager: string;
    minDisputeBlocks: BigNumber;
    disputeBlocks: BigNumber;
  };

  export type ProofStruct = {
    message: PromiseOrValue<BytesLike>;
    path: PromiseOrValue<BytesLike>[];
    index: PromiseOrValue<BigNumberish>;
  };

  export type ProofStructOutput = [string, string[], BigNumber] & {
    message: string;
    path: string[];
    index: BigNumber;
  };
}

export interface ScrollSpokeConnectorInterface extends utils.Interface {
  functions: {
    "AMB()": FunctionFragment;
    "DOMAIN()": FunctionFragment;
    "FINALIZED_HASH()": FunctionFragment;
    "L2_SCROLL_MESSENGER()": FunctionFragment;
    "MERKLE()": FunctionFragment;
    "MIRROR_DOMAIN()": FunctionFragment;
    "PROCESS_GAS()": FunctionFragment;
    "RESERVE_GAS()": FunctionFragment;
    "ROOT_MANAGER()": FunctionFragment;
    "ZERO_MSG_VALUE()": FunctionFragment;
    "acceptProposedOwner()": FunctionFragment;
    "activateOptimisticMode()": FunctionFragment;
    "activateSlowMode()": FunctionFragment;
    "addProposer(address)": FunctionFragment;
    "addSender(address)": FunctionFragment;
    "allowlistedProposers(address)": FunctionFragment;
    "allowlistedSenders(address)": FunctionFragment;
    "delay()": FunctionFragment;
    "delayBlocks()": FunctionFragment;
    "dispatch(uint32,bytes32,bytes)": FunctionFragment;
    "disputeBlocks()": FunctionFragment;
    "finalize(bytes32,uint256,uint256)": FunctionFragment;
    "gasCap()": FunctionFragment;
    "getLastCompletedSnapshotId()": FunctionFragment;
    "getSnapshotDuration()": FunctionFragment;
    "home()": FunctionFragment;
    "isReplica(address)": FunctionFragment;
    "lastSentBlock()": FunctionFragment;
    "localDomain()": FunctionFragment;
    "minDisputeBlocks()": FunctionFragment;
    "mirrorConnector()": FunctionFragment;
    "optimisticMode()": FunctionFragment;
    "outboundRoot()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingAggregateRoots(bytes32)": FunctionFragment;
    "processMessage(bytes)": FunctionFragment;
    "proposeAggregateRoot(bytes32,uint256)": FunctionFragment;
    "proposeNewOwner(address)": FunctionFragment;
    "proposed()": FunctionFragment;
    "proposedAggregateRootHash()": FunctionFragment;
    "proposedTimestamp()": FunctionFragment;
    "proveAndProcess((bytes,bytes32[32],uint256)[],bytes32,bytes32[32],uint256)": FunctionFragment;
    "provenAggregateRoots(bytes32)": FunctionFragment;
    "provenMessageRoots(bytes32)": FunctionFragment;
    "rateLimitBlocks()": FunctionFragment;
    "removePendingAggregateRoot(bytes32)": FunctionFragment;
    "removeProposer(address)": FunctionFragment;
    "removeSender(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounced()": FunctionFragment;
    "send(bytes)": FunctionFragment;
    "sentMessageRoots(bytes32)": FunctionFragment;
    "setDelayBlocks(uint256)": FunctionFragment;
    "setDisputeBlocks(uint256)": FunctionFragment;
    "setGasCap(uint256)": FunctionFragment;
    "setMinDisputeBlocks(uint256)": FunctionFragment;
    "setMirrorConnector(address)": FunctionFragment;
    "setRateLimitBlocks(uint256)": FunctionFragment;
    "setWatcherManager(address)": FunctionFragment;
    "snapshotRoots(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "verifySender(address)": FunctionFragment;
    "watcherManager()": FunctionFragment;
    "withdrawFunds(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AMB"
      | "DOMAIN"
      | "FINALIZED_HASH"
      | "L2_SCROLL_MESSENGER"
      | "MERKLE"
      | "MIRROR_DOMAIN"
      | "PROCESS_GAS"
      | "RESERVE_GAS"
      | "ROOT_MANAGER"
      | "ZERO_MSG_VALUE"
      | "acceptProposedOwner"
      | "activateOptimisticMode"
      | "activateSlowMode"
      | "addProposer"
      | "addSender"
      | "allowlistedProposers"
      | "allowlistedSenders"
      | "delay"
      | "delayBlocks"
      | "dispatch"
      | "disputeBlocks"
      | "finalize"
      | "gasCap"
      | "getLastCompletedSnapshotId"
      | "getSnapshotDuration"
      | "home"
      | "isReplica"
      | "lastSentBlock"
      | "localDomain"
      | "minDisputeBlocks"
      | "mirrorConnector"
      | "optimisticMode"
      | "outboundRoot"
      | "owner"
      | "pause"
      | "paused"
      | "pendingAggregateRoots"
      | "processMessage"
      | "proposeAggregateRoot"
      | "proposeNewOwner"
      | "proposed"
      | "proposedAggregateRootHash"
      | "proposedTimestamp"
      | "proveAndProcess"
      | "provenAggregateRoots"
      | "provenMessageRoots"
      | "rateLimitBlocks"
      | "removePendingAggregateRoot"
      | "removeProposer"
      | "removeSender"
      | "renounceOwnership"
      | "renounced"
      | "send"
      | "sentMessageRoots"
      | "setDelayBlocks"
      | "setDisputeBlocks"
      | "setGasCap"
      | "setMinDisputeBlocks"
      | "setMirrorConnector"
      | "setRateLimitBlocks"
      | "setWatcherManager"
      | "snapshotRoots"
      | "unpause"
      | "verifySender"
      | "watcherManager"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AMB", values?: undefined): string;
  encodeFunctionData(functionFragment: "DOMAIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FINALIZED_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "L2_SCROLL_MESSENGER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MERKLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIRROR_DOMAIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROCESS_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVE_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_MSG_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptProposedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateOptimisticMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateSlowMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProposer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedProposers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistedSenders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "delay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delayBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dispatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalize",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "gasCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastCompletedSnapshotId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSnapshotDuration",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "home", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isReplica",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSentBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDisputeBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorConnector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "outboundRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingAggregateRoots",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "processMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeAggregateRoot",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "proposed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposedAggregateRootHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proveAndProcess",
    values: [
      SpokeConnector.ProofStruct[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "provenAggregateRoots",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "provenMessageRoots",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "rateLimitBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePendingAggregateRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProposer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "renounced", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sentMessageRoots",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelayBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputeBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDisputeBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMirrorConnector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateLimitBlocks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWatcherManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "snapshotRoots",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifySender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "watcherManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "AMB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DOMAIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FINALIZED_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "L2_SCROLL_MESSENGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MERKLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIRROR_DOMAIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROCESS_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVE_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZERO_MSG_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptProposedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateOptimisticMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateSlowMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedProposers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delayBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dispatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disputeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastCompletedSnapshotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSnapshotDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "home", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isReplica", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSentBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDisputeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimisticMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "outboundRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAggregateRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeAggregateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposedAggregateRootHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveAndProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provenAggregateRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provenMessageRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateLimitBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePendingAggregateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renounced", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sentMessageRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelayBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGasCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinDisputeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMirrorConnector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRateLimitBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWatcherManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "snapshotRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifySender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "watcherManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "AggregateRootProposed(bytes32,uint256,uint256,uint32)": EventFragment;
    "AggregateRootReceived(bytes32)": EventFragment;
    "AggregateRootRemoved(bytes32)": EventFragment;
    "AggregateRootVerified(bytes32)": EventFragment;
    "DelayBlocksUpdated(uint256,address)": EventFragment;
    "Dispatch(bytes32,uint256,bytes32,bytes)": EventFragment;
    "DisputeBlocksUpdated(uint256,uint256)": EventFragment;
    "FundsWithdrawn(address,uint256)": EventFragment;
    "GasCapUpdated(uint256,uint256)": EventFragment;
    "MessageProcessed(bytes,address)": EventFragment;
    "MessageProven(bytes32,bytes32,uint256)": EventFragment;
    "MessageSent(bytes,bytes,address)": EventFragment;
    "MinDisputeBlocksUpdated(uint256,uint256)": EventFragment;
    "MirrorConnectorUpdated(address,address)": EventFragment;
    "NewConnector(uint32,uint32,address,address,address)": EventFragment;
    "OptimisticModeActivated()": EventFragment;
    "OwnershipProposed(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PendingAggregateRootDeleted(bytes32)": EventFragment;
    "Process(bytes32,bool,bytes)": EventFragment;
    "ProposedRootFinalized(bytes32)": EventFragment;
    "ProposerAdded(address)": EventFragment;
    "ProposerRemoved(address)": EventFragment;
    "SendRateLimitUpdated(address,uint256)": EventFragment;
    "SenderAdded(address)": EventFragment;
    "SenderRemoved(address)": EventFragment;
    "SlowModeActivated(address)": EventFragment;
    "SnapshotRootSaved(uint256,bytes32,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WatcherManagerChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregateRootProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregateRootReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregateRootRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregateRootVerified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelayBlocksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Dispatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisputeBlocksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageProven"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinDisputeBlocksUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MirrorConnectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewConnector"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptimisticModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingAggregateRootDeleted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Process"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposedRootFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendRateLimitUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SenderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SenderRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SlowModeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SnapshotRootSaved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WatcherManagerChanged"): EventFragment;
}

export interface AggregateRootProposedEventObject {
  aggregateRoot: string;
  rootTimestamp: BigNumber;
  endOfDispute: BigNumber;
  domain: number;
}
export type AggregateRootProposedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  AggregateRootProposedEventObject
>;

export type AggregateRootProposedEventFilter =
  TypedEventFilter<AggregateRootProposedEvent>;

export interface AggregateRootReceivedEventObject {
  root: string;
}
export type AggregateRootReceivedEvent = TypedEvent<
  [string],
  AggregateRootReceivedEventObject
>;

export type AggregateRootReceivedEventFilter =
  TypedEventFilter<AggregateRootReceivedEvent>;

export interface AggregateRootRemovedEventObject {
  root: string;
}
export type AggregateRootRemovedEvent = TypedEvent<
  [string],
  AggregateRootRemovedEventObject
>;

export type AggregateRootRemovedEventFilter =
  TypedEventFilter<AggregateRootRemovedEvent>;

export interface AggregateRootVerifiedEventObject {
  root: string;
}
export type AggregateRootVerifiedEvent = TypedEvent<
  [string],
  AggregateRootVerifiedEventObject
>;

export type AggregateRootVerifiedEventFilter =
  TypedEventFilter<AggregateRootVerifiedEvent>;

export interface DelayBlocksUpdatedEventObject {
  updated: BigNumber;
  caller: string;
}
export type DelayBlocksUpdatedEvent = TypedEvent<
  [BigNumber, string],
  DelayBlocksUpdatedEventObject
>;

export type DelayBlocksUpdatedEventFilter =
  TypedEventFilter<DelayBlocksUpdatedEvent>;

export interface DispatchEventObject {
  leaf: string;
  index: BigNumber;
  root: string;
  message: string;
}
export type DispatchEvent = TypedEvent<
  [string, BigNumber, string, string],
  DispatchEventObject
>;

export type DispatchEventFilter = TypedEventFilter<DispatchEvent>;

export interface DisputeBlocksUpdatedEventObject {
  previous: BigNumber;
  updated: BigNumber;
}
export type DisputeBlocksUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DisputeBlocksUpdatedEventObject
>;

export type DisputeBlocksUpdatedEventFilter =
  TypedEventFilter<DisputeBlocksUpdatedEvent>;

export interface FundsWithdrawnEventObject {
  to: string;
  amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface GasCapUpdatedEventObject {
  _previous: BigNumber;
  _updated: BigNumber;
}
export type GasCapUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  GasCapUpdatedEventObject
>;

export type GasCapUpdatedEventFilter = TypedEventFilter<GasCapUpdatedEvent>;

export interface MessageProcessedEventObject {
  data: string;
  caller: string;
}
export type MessageProcessedEvent = TypedEvent<
  [string, string],
  MessageProcessedEventObject
>;

export type MessageProcessedEventFilter =
  TypedEventFilter<MessageProcessedEvent>;

export interface MessageProvenEventObject {
  leaf: string;
  aggregateRoot: string;
  aggregateIndex: BigNumber;
}
export type MessageProvenEvent = TypedEvent<
  [string, string, BigNumber],
  MessageProvenEventObject
>;

export type MessageProvenEventFilter = TypedEventFilter<MessageProvenEvent>;

export interface MessageSentEventObject {
  data: string;
  encodedData: string;
  caller: string;
}
export type MessageSentEvent = TypedEvent<
  [string, string, string],
  MessageSentEventObject
>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export interface MinDisputeBlocksUpdatedEventObject {
  previous: BigNumber;
  updated: BigNumber;
}
export type MinDisputeBlocksUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinDisputeBlocksUpdatedEventObject
>;

export type MinDisputeBlocksUpdatedEventFilter =
  TypedEventFilter<MinDisputeBlocksUpdatedEvent>;

export interface MirrorConnectorUpdatedEventObject {
  previous: string;
  current: string;
}
export type MirrorConnectorUpdatedEvent = TypedEvent<
  [string, string],
  MirrorConnectorUpdatedEventObject
>;

export type MirrorConnectorUpdatedEventFilter =
  TypedEventFilter<MirrorConnectorUpdatedEvent>;

export interface NewConnectorEventObject {
  domain: number;
  mirrorDomain: number;
  amb: string;
  rootManager: string;
  mirrorConnector: string;
}
export type NewConnectorEvent = TypedEvent<
  [number, number, string, string, string],
  NewConnectorEventObject
>;

export type NewConnectorEventFilter = TypedEventFilter<NewConnectorEvent>;

export interface OptimisticModeActivatedEventObject {}
export type OptimisticModeActivatedEvent = TypedEvent<
  [],
  OptimisticModeActivatedEventObject
>;

export type OptimisticModeActivatedEventFilter =
  TypedEventFilter<OptimisticModeActivatedEvent>;

export interface OwnershipProposedEventObject {
  proposedOwner: string;
}
export type OwnershipProposedEvent = TypedEvent<
  [string],
  OwnershipProposedEventObject
>;

export type OwnershipProposedEventFilter =
  TypedEventFilter<OwnershipProposedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PendingAggregateRootDeletedEventObject {
  aggregateRoot: string;
}
export type PendingAggregateRootDeletedEvent = TypedEvent<
  [string],
  PendingAggregateRootDeletedEventObject
>;

export type PendingAggregateRootDeletedEventFilter =
  TypedEventFilter<PendingAggregateRootDeletedEvent>;

export interface ProcessEventObject {
  leaf: string;
  success: boolean;
  returnData: string;
}
export type ProcessEvent = TypedEvent<
  [string, boolean, string],
  ProcessEventObject
>;

export type ProcessEventFilter = TypedEventFilter<ProcessEvent>;

export interface ProposedRootFinalizedEventObject {
  aggregateRoot: string;
}
export type ProposedRootFinalizedEvent = TypedEvent<
  [string],
  ProposedRootFinalizedEventObject
>;

export type ProposedRootFinalizedEventFilter =
  TypedEventFilter<ProposedRootFinalizedEvent>;

export interface ProposerAddedEventObject {
  proposer: string;
}
export type ProposerAddedEvent = TypedEvent<[string], ProposerAddedEventObject>;

export type ProposerAddedEventFilter = TypedEventFilter<ProposerAddedEvent>;

export interface ProposerRemovedEventObject {
  proposer: string;
}
export type ProposerRemovedEvent = TypedEvent<
  [string],
  ProposerRemovedEventObject
>;

export type ProposerRemovedEventFilter = TypedEventFilter<ProposerRemovedEvent>;

export interface SendRateLimitUpdatedEventObject {
  updater: string;
  newRateLimit: BigNumber;
}
export type SendRateLimitUpdatedEvent = TypedEvent<
  [string, BigNumber],
  SendRateLimitUpdatedEventObject
>;

export type SendRateLimitUpdatedEventFilter =
  TypedEventFilter<SendRateLimitUpdatedEvent>;

export interface SenderAddedEventObject {
  sender: string;
}
export type SenderAddedEvent = TypedEvent<[string], SenderAddedEventObject>;

export type SenderAddedEventFilter = TypedEventFilter<SenderAddedEvent>;

export interface SenderRemovedEventObject {
  sender: string;
}
export type SenderRemovedEvent = TypedEvent<[string], SenderRemovedEventObject>;

export type SenderRemovedEventFilter = TypedEventFilter<SenderRemovedEvent>;

export interface SlowModeActivatedEventObject {
  watcher: string;
}
export type SlowModeActivatedEvent = TypedEvent<
  [string],
  SlowModeActivatedEventObject
>;

export type SlowModeActivatedEventFilter =
  TypedEventFilter<SlowModeActivatedEvent>;

export interface SnapshotRootSavedEventObject {
  snapshotId: BigNumber;
  root: string;
  count: BigNumber;
}
export type SnapshotRootSavedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SnapshotRootSavedEventObject
>;

export type SnapshotRootSavedEventFilter =
  TypedEventFilter<SnapshotRootSavedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WatcherManagerChangedEventObject {
  watcherManager: string;
}
export type WatcherManagerChangedEvent = TypedEvent<
  [string],
  WatcherManagerChangedEventObject
>;

export type WatcherManagerChangedEventFilter =
  TypedEventFilter<WatcherManagerChangedEvent>;

export interface ScrollSpokeConnector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ScrollSpokeConnectorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AMB(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN(overrides?: CallOverrides): Promise<[number]>;

    FINALIZED_HASH(overrides?: CallOverrides): Promise<[string]>;

    L2_SCROLL_MESSENGER(overrides?: CallOverrides): Promise<[string]>;

    MERKLE(overrides?: CallOverrides): Promise<[string]>;

    MIRROR_DOMAIN(overrides?: CallOverrides): Promise<[number]>;

    PROCESS_GAS(overrides?: CallOverrides): Promise<[BigNumber]>;

    RESERVE_GAS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROOT_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    ZERO_MSG_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateOptimisticMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateSlowMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSender(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowlistedProposers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowlistedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    delay(overrides?: CallOverrides): Promise<[BigNumber]>;

    delayBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    dispatch(
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _recipientAddress: PromiseOrValue<BytesLike>,
      _messageBody: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disputeBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gasCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastCompletedSnapshotId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _lastCompletedSnapshotId: BigNumber }>;

    getSnapshotDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _snapshotDuration: BigNumber }>;

    home(overrides?: CallOverrides): Promise<[string]>;

    isReplica(
      _potentialReplica: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastSentBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    minDisputeBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    mirrorConnector(overrides?: CallOverrides): Promise<[string]>;

    optimisticMode(overrides?: CallOverrides): Promise<[boolean]>;

    outboundRoot(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingAggregateRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    processMessage(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposed(overrides?: CallOverrides): Promise<[string]>;

    proposedAggregateRootHash(overrides?: CallOverrides): Promise<[string]>;

    proposedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    proveAndProcess(
      _proofs: SpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    provenAggregateRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    provenMessageRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rateLimitBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    removePendingAggregateRoot(
      _fraudulentRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSender(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<[void]>;

    renounced(overrides?: CallOverrides): Promise<[boolean]>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sentMessageRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setDelayBlocks(
      _delayBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisputeBlocks(
      _disputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGasCap(
      _gasCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinDisputeBlocks(
      _minDisputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMirrorConnector(
      _mirrorConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRateLimitBlocks(
      _rateLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWatcherManager(
      _watcherManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    snapshotRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifySender(
      _expected: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    watcherManager(overrides?: CallOverrides): Promise<[string]>;

    withdrawFunds(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AMB(overrides?: CallOverrides): Promise<string>;

  DOMAIN(overrides?: CallOverrides): Promise<number>;

  FINALIZED_HASH(overrides?: CallOverrides): Promise<string>;

  L2_SCROLL_MESSENGER(overrides?: CallOverrides): Promise<string>;

  MERKLE(overrides?: CallOverrides): Promise<string>;

  MIRROR_DOMAIN(overrides?: CallOverrides): Promise<number>;

  PROCESS_GAS(overrides?: CallOverrides): Promise<BigNumber>;

  RESERVE_GAS(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT_MANAGER(overrides?: CallOverrides): Promise<string>;

  ZERO_MSG_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  acceptProposedOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateOptimisticMode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateSlowMode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProposer(
    _proposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSender(
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowlistedProposers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowlistedSenders(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  delay(overrides?: CallOverrides): Promise<BigNumber>;

  delayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  dispatch(
    _destinationDomain: PromiseOrValue<BigNumberish>,
    _recipientAddress: PromiseOrValue<BytesLike>,
    _messageBody: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  finalize(
    _proposedAggregateRoot: PromiseOrValue<BytesLike>,
    _rootTimestamp: PromiseOrValue<BigNumberish>,
    _endOfDispute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gasCap(overrides?: CallOverrides): Promise<BigNumber>;

  getLastCompletedSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  getSnapshotDuration(overrides?: CallOverrides): Promise<BigNumber>;

  home(overrides?: CallOverrides): Promise<string>;

  isReplica(
    _potentialReplica: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastSentBlock(overrides?: CallOverrides): Promise<BigNumber>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  minDisputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  mirrorConnector(overrides?: CallOverrides): Promise<string>;

  optimisticMode(overrides?: CallOverrides): Promise<boolean>;

  outboundRoot(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingAggregateRoots(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  processMessage(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeAggregateRoot(
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _rootTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeNewOwner(
    newlyProposed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposed(overrides?: CallOverrides): Promise<string>;

  proposedAggregateRootHash(overrides?: CallOverrides): Promise<string>;

  proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  proveAndProcess(
    _proofs: SpokeConnector.ProofStruct[],
    _aggregateRoot: PromiseOrValue<BytesLike>,
    _aggregatePath: PromiseOrValue<BytesLike>[],
    _aggregateIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  provenAggregateRoots(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  provenMessageRoots(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rateLimitBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  removePendingAggregateRoot(
    _fraudulentRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeProposer(
    _proposer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSender(
    _sender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  renounced(overrides?: CallOverrides): Promise<boolean>;

  send(
    _encodedData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sentMessageRoots(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setDelayBlocks(
    _delayBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisputeBlocks(
    _disputeBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGasCap(
    _gasCap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinDisputeBlocks(
    _minDisputeBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMirrorConnector(
    _mirrorConnector: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRateLimitBlocks(
    _rateLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWatcherManager(
    _watcherManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  snapshotRoots(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifySender(
    _expected: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  watcherManager(overrides?: CallOverrides): Promise<string>;

  withdrawFunds(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AMB(overrides?: CallOverrides): Promise<string>;

    DOMAIN(overrides?: CallOverrides): Promise<number>;

    FINALIZED_HASH(overrides?: CallOverrides): Promise<string>;

    L2_SCROLL_MESSENGER(overrides?: CallOverrides): Promise<string>;

    MERKLE(overrides?: CallOverrides): Promise<string>;

    MIRROR_DOMAIN(overrides?: CallOverrides): Promise<number>;

    PROCESS_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    RESERVE_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_MANAGER(overrides?: CallOverrides): Promise<string>;

    ZERO_MSG_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedOwner(overrides?: CallOverrides): Promise<void>;

    activateOptimisticMode(overrides?: CallOverrides): Promise<void>;

    activateSlowMode(overrides?: CallOverrides): Promise<void>;

    addProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSender(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowlistedProposers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowlistedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    delayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    dispatch(
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _recipientAddress: PromiseOrValue<BytesLike>,
      _messageBody: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    disputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gasCap(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCompletedSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    getSnapshotDuration(overrides?: CallOverrides): Promise<BigNumber>;

    home(overrides?: CallOverrides): Promise<string>;

    isReplica(
      _potentialReplica: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastSentBlock(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    minDisputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    mirrorConnector(overrides?: CallOverrides): Promise<string>;

    optimisticMode(overrides?: CallOverrides): Promise<boolean>;

    outboundRoot(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingAggregateRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processMessage(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposed(overrides?: CallOverrides): Promise<string>;

    proposedAggregateRootHash(overrides?: CallOverrides): Promise<string>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proveAndProcess(
      _proofs: SpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    provenAggregateRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    provenMessageRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rateLimitBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    removePendingAggregateRoot(
      _fraudulentRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSender(
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounced(overrides?: CallOverrides): Promise<boolean>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    sentMessageRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDelayBlocks(
      _delayBlocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisputeBlocks(
      _disputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGasCap(
      _gasCap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinDisputeBlocks(
      _minDisputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMirrorConnector(
      _mirrorConnector: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRateLimitBlocks(
      _rateLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWatcherManager(
      _watcherManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    snapshotRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    verifySender(
      _expected: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    watcherManager(overrides?: CallOverrides): Promise<string>;

    withdrawFunds(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AggregateRootProposed(bytes32,uint256,uint256,uint32)"(
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      rootTimestamp?: PromiseOrValue<BigNumberish> | null,
      endOfDispute?: PromiseOrValue<BigNumberish> | null,
      domain?: null
    ): AggregateRootProposedEventFilter;
    AggregateRootProposed(
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      rootTimestamp?: PromiseOrValue<BigNumberish> | null,
      endOfDispute?: PromiseOrValue<BigNumberish> | null,
      domain?: null
    ): AggregateRootProposedEventFilter;

    "AggregateRootReceived(bytes32)"(
      root?: PromiseOrValue<BytesLike> | null
    ): AggregateRootReceivedEventFilter;
    AggregateRootReceived(
      root?: PromiseOrValue<BytesLike> | null
    ): AggregateRootReceivedEventFilter;

    "AggregateRootRemoved(bytes32)"(
      root?: PromiseOrValue<BytesLike> | null
    ): AggregateRootRemovedEventFilter;
    AggregateRootRemoved(
      root?: PromiseOrValue<BytesLike> | null
    ): AggregateRootRemovedEventFilter;

    "AggregateRootVerified(bytes32)"(
      root?: PromiseOrValue<BytesLike> | null
    ): AggregateRootVerifiedEventFilter;
    AggregateRootVerified(
      root?: PromiseOrValue<BytesLike> | null
    ): AggregateRootVerifiedEventFilter;

    "DelayBlocksUpdated(uint256,address)"(
      updated?: PromiseOrValue<BigNumberish> | null,
      caller?: null
    ): DelayBlocksUpdatedEventFilter;
    DelayBlocksUpdated(
      updated?: PromiseOrValue<BigNumberish> | null,
      caller?: null
    ): DelayBlocksUpdatedEventFilter;

    "Dispatch(bytes32,uint256,bytes32,bytes)"(
      leaf?: PromiseOrValue<BytesLike> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): DispatchEventFilter;
    Dispatch(
      leaf?: PromiseOrValue<BytesLike> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null,
      message?: null
    ): DispatchEventFilter;

    "DisputeBlocksUpdated(uint256,uint256)"(
      previous?: null,
      updated?: null
    ): DisputeBlocksUpdatedEventFilter;
    DisputeBlocksUpdated(
      previous?: null,
      updated?: null
    ): DisputeBlocksUpdatedEventFilter;

    "FundsWithdrawn(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;

    "GasCapUpdated(uint256,uint256)"(
      _previous?: null,
      _updated?: null
    ): GasCapUpdatedEventFilter;
    GasCapUpdated(_previous?: null, _updated?: null): GasCapUpdatedEventFilter;

    "MessageProcessed(bytes,address)"(
      data?: null,
      caller?: null
    ): MessageProcessedEventFilter;
    MessageProcessed(data?: null, caller?: null): MessageProcessedEventFilter;

    "MessageProven(bytes32,bytes32,uint256)"(
      leaf?: PromiseOrValue<BytesLike> | null,
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      aggregateIndex?: null
    ): MessageProvenEventFilter;
    MessageProven(
      leaf?: PromiseOrValue<BytesLike> | null,
      aggregateRoot?: PromiseOrValue<BytesLike> | null,
      aggregateIndex?: null
    ): MessageProvenEventFilter;

    "MessageSent(bytes,bytes,address)"(
      data?: null,
      encodedData?: null,
      caller?: null
    ): MessageSentEventFilter;
    MessageSent(
      data?: null,
      encodedData?: null,
      caller?: null
    ): MessageSentEventFilter;

    "MinDisputeBlocksUpdated(uint256,uint256)"(
      previous?: null,
      updated?: null
    ): MinDisputeBlocksUpdatedEventFilter;
    MinDisputeBlocksUpdated(
      previous?: null,
      updated?: null
    ): MinDisputeBlocksUpdatedEventFilter;

    "MirrorConnectorUpdated(address,address)"(
      previous?: null,
      current?: null
    ): MirrorConnectorUpdatedEventFilter;
    MirrorConnectorUpdated(
      previous?: null,
      current?: null
    ): MirrorConnectorUpdatedEventFilter;

    "NewConnector(uint32,uint32,address,address,address)"(
      domain?: PromiseOrValue<BigNumberish> | null,
      mirrorDomain?: PromiseOrValue<BigNumberish> | null,
      amb?: null,
      rootManager?: null,
      mirrorConnector?: null
    ): NewConnectorEventFilter;
    NewConnector(
      domain?: PromiseOrValue<BigNumberish> | null,
      mirrorDomain?: PromiseOrValue<BigNumberish> | null,
      amb?: null,
      rootManager?: null,
      mirrorConnector?: null
    ): NewConnectorEventFilter;

    "OptimisticModeActivated()"(): OptimisticModeActivatedEventFilter;
    OptimisticModeActivated(): OptimisticModeActivatedEventFilter;

    "OwnershipProposed(address)"(
      proposedOwner?: PromiseOrValue<string> | null
    ): OwnershipProposedEventFilter;
    OwnershipProposed(
      proposedOwner?: PromiseOrValue<string> | null
    ): OwnershipProposedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PendingAggregateRootDeleted(bytes32)"(
      aggregateRoot?: PromiseOrValue<BytesLike> | null
    ): PendingAggregateRootDeletedEventFilter;
    PendingAggregateRootDeleted(
      aggregateRoot?: PromiseOrValue<BytesLike> | null
    ): PendingAggregateRootDeletedEventFilter;

    "Process(bytes32,bool,bytes)"(
      leaf?: PromiseOrValue<BytesLike> | null,
      success?: null,
      returnData?: null
    ): ProcessEventFilter;
    Process(
      leaf?: PromiseOrValue<BytesLike> | null,
      success?: null,
      returnData?: null
    ): ProcessEventFilter;

    "ProposedRootFinalized(bytes32)"(
      aggregateRoot?: null
    ): ProposedRootFinalizedEventFilter;
    ProposedRootFinalized(
      aggregateRoot?: null
    ): ProposedRootFinalizedEventFilter;

    "ProposerAdded(address)"(
      proposer?: PromiseOrValue<string> | null
    ): ProposerAddedEventFilter;
    ProposerAdded(
      proposer?: PromiseOrValue<string> | null
    ): ProposerAddedEventFilter;

    "ProposerRemoved(address)"(
      proposer?: PromiseOrValue<string> | null
    ): ProposerRemovedEventFilter;
    ProposerRemoved(
      proposer?: PromiseOrValue<string> | null
    ): ProposerRemovedEventFilter;

    "SendRateLimitUpdated(address,uint256)"(
      updater?: null,
      newRateLimit?: null
    ): SendRateLimitUpdatedEventFilter;
    SendRateLimitUpdated(
      updater?: null,
      newRateLimit?: null
    ): SendRateLimitUpdatedEventFilter;

    "SenderAdded(address)"(
      sender?: PromiseOrValue<string> | null
    ): SenderAddedEventFilter;
    SenderAdded(sender?: PromiseOrValue<string> | null): SenderAddedEventFilter;

    "SenderRemoved(address)"(
      sender?: PromiseOrValue<string> | null
    ): SenderRemovedEventFilter;
    SenderRemoved(
      sender?: PromiseOrValue<string> | null
    ): SenderRemovedEventFilter;

    "SlowModeActivated(address)"(
      watcher?: PromiseOrValue<string> | null
    ): SlowModeActivatedEventFilter;
    SlowModeActivated(
      watcher?: PromiseOrValue<string> | null
    ): SlowModeActivatedEventFilter;

    "SnapshotRootSaved(uint256,bytes32,uint256)"(
      snapshotId?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null,
      count?: PromiseOrValue<BigNumberish> | null
    ): SnapshotRootSavedEventFilter;
    SnapshotRootSaved(
      snapshotId?: PromiseOrValue<BigNumberish> | null,
      root?: PromiseOrValue<BytesLike> | null,
      count?: PromiseOrValue<BigNumberish> | null
    ): SnapshotRootSavedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WatcherManagerChanged(address)"(
      watcherManager?: null
    ): WatcherManagerChangedEventFilter;
    WatcherManagerChanged(
      watcherManager?: null
    ): WatcherManagerChangedEventFilter;
  };

  estimateGas: {
    AMB(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN(overrides?: CallOverrides): Promise<BigNumber>;

    FINALIZED_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    L2_SCROLL_MESSENGER(overrides?: CallOverrides): Promise<BigNumber>;

    MERKLE(overrides?: CallOverrides): Promise<BigNumber>;

    MIRROR_DOMAIN(overrides?: CallOverrides): Promise<BigNumber>;

    PROCESS_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    RESERVE_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    ZERO_MSG_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateOptimisticMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateSlowMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSender(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowlistedProposers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowlistedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delay(overrides?: CallOverrides): Promise<BigNumber>;

    delayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    dispatch(
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _recipientAddress: PromiseOrValue<BytesLike>,
      _messageBody: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gasCap(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCompletedSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    getSnapshotDuration(overrides?: CallOverrides): Promise<BigNumber>;

    home(overrides?: CallOverrides): Promise<BigNumber>;

    isReplica(
      _potentialReplica: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSentBlock(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    minDisputeBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    mirrorConnector(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticMode(overrides?: CallOverrides): Promise<BigNumber>;

    outboundRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingAggregateRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processMessage(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposed(overrides?: CallOverrides): Promise<BigNumber>;

    proposedAggregateRootHash(overrides?: CallOverrides): Promise<BigNumber>;

    proposedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    proveAndProcess(
      _proofs: SpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    provenAggregateRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provenMessageRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rateLimitBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    removePendingAggregateRoot(
      _fraudulentRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSender(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    renounced(overrides?: CallOverrides): Promise<BigNumber>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sentMessageRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDelayBlocks(
      _delayBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisputeBlocks(
      _disputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGasCap(
      _gasCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinDisputeBlocks(
      _minDisputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMirrorConnector(
      _mirrorConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRateLimitBlocks(
      _rateLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWatcherManager(
      _watcherManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    snapshotRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifySender(
      _expected: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    watcherManager(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AMB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FINALIZED_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    L2_SCROLL_MESSENGER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MERKLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIRROR_DOMAIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROCESS_GAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESERVE_GAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZERO_MSG_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptProposedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateOptimisticMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateSlowMode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSender(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowlistedProposers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowlistedSenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delayBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dispatch(
      _destinationDomain: PromiseOrValue<BigNumberish>,
      _recipientAddress: PromiseOrValue<BytesLike>,
      _messageBody: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disputeBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalize(
      _proposedAggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      _endOfDispute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gasCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastCompletedSnapshotId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSnapshotDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    home(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isReplica(
      _potentialReplica: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSentBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDisputeBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mirrorConnector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimisticMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outboundRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingAggregateRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processMessage(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeAggregateRoot(
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _rootTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeNewOwner(
      newlyProposed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposedAggregateRootHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proveAndProcess(
      _proofs: SpokeConnector.ProofStruct[],
      _aggregateRoot: PromiseOrValue<BytesLike>,
      _aggregatePath: PromiseOrValue<BytesLike>[],
      _aggregateIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    provenAggregateRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provenMessageRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateLimitBlocks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePendingAggregateRoot(
      _fraudulentRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeProposer(
      _proposer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSender(
      _sender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounced(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    send(
      _encodedData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sentMessageRoots(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDelayBlocks(
      _delayBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisputeBlocks(
      _disputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGasCap(
      _gasCap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinDisputeBlocks(
      _minDisputeBlocks: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMirrorConnector(
      _mirrorConnector: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRateLimitBlocks(
      _rateLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWatcherManager(
      _watcherManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    snapshotRoots(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifySender(
      _expected: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    watcherManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFunds(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
