[
  "error BaseConnextFacet__getAdoptedAsset_assetNotFound()",
  "error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted()",
  "error BaseConnextFacet__nonReentrant_reentrantCall()",
  "error BaseConnextFacet__nonXCallReentrant_reentrantCall()",
  "error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin()",
  "error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter()",
  "error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher()",
  "error BaseConnextFacet__onlyOwner_notOwner()",
  "error BaseConnextFacet__onlyProposed_notProposedOwner()",
  "error BaseConnextFacet__whenNotPaused_paused()",
  "error BridgeFacet__addRemote_invalidDomain()",
  "error BridgeFacet__addRemote_invalidRouter()",
  "error BridgeFacet__addSequencer_alreadyApproved()",
  "error BridgeFacet__addSequencer_invalidSequencer()",
  "error BridgeFacet__bumpTransfer_noRelayerVault()",
  "error BridgeFacet__bumpTransfer_valueIsZero()",
  "error BridgeFacet__excecute_insufficientGas()",
  "error BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn()",
  "error BridgeFacet__execute_badFastLiquidityStatus()",
  "error BridgeFacet__execute_externalCallFailed()",
  "error BridgeFacet__execute_invalidRouterSignature()",
  "error BridgeFacet__execute_invalidSequencerSignature()",
  "error BridgeFacet__execute_maxRoutersExceeded()",
  "error BridgeFacet__execute_notApprovedForPortals()",
  "error BridgeFacet__execute_notReconciled()",
  "error BridgeFacet__execute_notSupportedRouter()",
  "error BridgeFacet__execute_notSupportedSequencer()",
  "error BridgeFacet__execute_unapprovedSender()",
  "error BridgeFacet__execute_wrongDomain()",
  "error BridgeFacet__forceReceiveLocal_notDestination()",
  "error BridgeFacet__forceUpdateSlippage_invalidSlippage()",
  "error BridgeFacet__forceUpdateSlippage_notDestination()",
  "error BridgeFacet__mustHaveRemote_destinationNotSupported()",
  "error BridgeFacet__onlyDelegate_notDelegate()",
  "error BridgeFacet__removeSequencer_notApproved()",
  "error BridgeFacet__setXAppConnectionManager_domainsDontMatch()",
  "error BridgeFacet__xcall_capReached()",
  "error BridgeFacet__xcall_emptyTo()",
  "error BridgeFacet__xcall_invalidSlippage()",
  "error BridgeFacet__xcall_nativeAssetNotSupported()",
  "error BridgeFacet_xcall__emptyLocalAsset()",
  "event AavePortalMintUnbacked(bytes32 indexed transferId, address indexed router, address asset, uint256 amount)",
  "event Executed(bytes32 indexed transferId, address indexed to, address indexed asset, tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) args, address local, uint256 amount, address caller)",
  "event ExternalCalldataExecuted(bytes32 indexed transferId, bool success, bytes returnData)",
  "event ForceReceiveLocal(bytes32 indexed transferId)",
  "event RemoteAdded(uint32 domain, address remote, address caller)",
  "event SequencerAdded(address sequencer, address caller)",
  "event SequencerRemoved(address sequencer, address caller)",
  "event SlippageUpdated(bytes32 indexed transferId, uint256 slippage)",
  "event TransferRelayerFeesIncreased(bytes32 indexed transferId, uint256 increase, address asset, address caller)",
  "event XAppConnectionManagerSet(address updated, address caller)",
  "event XCalled(bytes32 indexed transferId, uint256 indexed nonce, bytes32 indexed messageHash, tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address asset, uint256 amount, address local, bytes messageBody)",
  "function addSequencer(address _sequencer)",
  "function approvedSequencers(address _sequencer) view returns (bool)",
  "function bumpTransfer(bytes32 _transferId) payable",
  "function bumpTransfer(bytes32 _transferId, address _relayerFeeAsset, uint256 _relayerFee)",
  "function domain() view returns (uint32)",
  "function enrollRemoteRouter(uint32 _domain, bytes32 _router)",
  "function handle(uint32 _origin, uint32 _nonce, bytes32 _sender, bytes _message)",
  "function execute(tuple(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) params, address[] routers, bytes[] routerSignatures, address sequencer, bytes sequencerSignature) _args) returns (bytes32)",
  "function forceReceiveLocal(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params)",
  "function forceUpdateSlippage(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, uint256 _slippage)",
  "function nonce() view returns (uint256)",
  "function remote(uint32 _domain) view returns (address)",
  "function removeSequencer(address _sequencer)",
  "function routedTransfers(bytes32 _transferId) view returns (address[])",
  "function setXAppConnectionManager(address _xAppConnectionManager)",
  "function transferStatus(bytes32 _transferId) view returns (uint8)",
  "function xAppConnectionManager() view returns (address)",
  "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)",
  "function xcall(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
  "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData, uint256 _relayerFee) returns (bytes32)",
  "function xcallIntoLocal(uint32 _destination, address _to, address _asset, address _delegate, uint256 _amount, uint256 _slippage, bytes _callData) payable returns (bytes32)",
  "event DiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
  "event DiamondCutProposed(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata, uint256 deadline)",
  "event DiamondCutRescinded(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
  "function diamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
  "function getAcceptanceTime(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata) view returns (uint256)",
  "function proposeDiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
  "function rescindDiamondCut(tuple(address facetAddress, uint8 action, bytes4[] functionSelectors)[] _diamondCut, address _init, bytes _calldata)",
  "function facetAddress(bytes4 _functionSelector) view returns (address facetAddress_)",
  "function facetAddresses() view returns (address[] facetAddresses_)",
  "function facetFunctionSelectors(address _facet) view returns (bytes4[] facetFunctionSelectors_)",
  "function facets() view returns (tuple(address facetAddress, bytes4[] functionSelectors)[] facets_)",
  "function supportsInterface(bytes4 _interfaceId) view returns (bool)",
  "error PortalFacet__repayAavePortalFor_invalidAsset()",
  "error PortalFacet__repayAavePortalFor_zeroAmount()",
  "error PortalFacet__repayAavePortal_assetNotApproved()",
  "error PortalFacet__repayAavePortal_insufficientFunds()",
  "error PortalFacet__setAavePortalFee_invalidFee()",
  "event AavePoolUpdated(address updated, address caller)",
  "event AavePortalFeeUpdated(uint256 updated, address caller)",
  "event AavePortalRepayment(bytes32 indexed transferId, address asset, uint256 amount, uint256 fee, address caller)",
  "function aavePool() view returns (address)",
  "function aavePortalFee() view returns (uint256)",
  "function getAavePortalDebt(bytes32 _transferId) view returns (uint256)",
  "function getAavePortalFeeDebt(bytes32 _transferId) view returns (uint256)",
  "function repayAavePortal(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, uint256 _backingAmount, uint256 _feeAmount, uint256 _maxIn)",
  "function repayAavePortalFor(tuple(uint32 originDomain, uint32 destinationDomain, uint32 canonicalDomain, address to, address delegate, bool receiveLocal, bytes callData, uint256 slippage, address originSender, uint256 bridgedAmt, uint256 normalizedIn, uint256 nonce, bytes32 canonicalId) _params, address _portalAsset, uint256 _backingAmount, uint256 _feeAmount) payable",
  "function setAavePool(address _aavePool)",
  "function setAavePortalFee(uint256 _aavePortalFeeNumerator)",
  "error ProposedOwnableFacet__acceptProposedOwner_noOwnershipChange()",
  "error ProposedOwnableFacet__assignRoleAdmin_invalidInput()",
  "error ProposedOwnableFacet__assignRoleRouter_invalidInput()",
  "error ProposedOwnableFacet__assignRoleWatcher_invalidInput()",
  "error ProposedOwnableFacet__delayElapsed_delayNotElapsed()",
  "error ProposedOwnableFacet__proposeAssetAllowlistRemoval_noOwnershipChange()",
  "error ProposedOwnableFacet__proposeNewOwner_invalidProposal()",
  "error ProposedOwnableFacet__proposeNewOwner_noOwnershipChange()",
  "error ProposedOwnableFacet__proposeRouterAllowlistRemoval_noOwnershipChange()",
  "error ProposedOwnableFacet__removeAssetAllowlist_noOwnershipChange()",
  "error ProposedOwnableFacet__removeAssetAllowlist_noProposal()",
  "error ProposedOwnableFacet__removeRouterAllowlist_noOwnershipChange()",
  "error ProposedOwnableFacet__removeRouterAllowlist_noProposal()",
  "error ProposedOwnableFacet__revokeRole_invalidInput()",
  "event AssignRoleAdmin(address admin)",
  "event AssignRoleRouter(address router)",
  "event AssignRoleWatcher(address watcher)",
  "event OwnershipProposed(address indexed proposedOwner)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event Paused()",
  "event RevokeRole(address revokedAddress, uint8 revokedRole)",
  "event RouterAllowlistRemovalProposed(uint256 timestamp)",
  "event RouterAllowlistRemoved(bool renounced)",
  "event Unpaused()",
  "function acceptProposedOwner()",
  "function assignRoleAdmin(address _admin)",
  "function assignRoleRouterAdmin(address _router)",
  "function assignRoleWatcher(address _watcher)",
  "function delay() view returns (uint256)",
  "function owner() view returns (address)",
  "function pause()",
  "function paused() view returns (bool)",
  "function proposeNewOwner(address newlyProposed)",
  "function proposeRouterAllowlistRemoval()",
  "function proposed() view returns (address)",
  "function proposedTimestamp() view returns (uint256)",
  "function queryRole(address _role) view returns (uint8)",
  "function removeRouterAllowlist()",
  "function revokeRole(address _revoke)",
  "function routerAllowlistRemoved() view returns (bool)",
  "function routerAllowlistTimestamp() view returns (uint256)",
  "function unpause()",
  "error RelayerFacet__addRelayer_alreadyApproved()",
  "error RelayerFacet__removeRelayer_notApproved()",
  "error RelayerFacet__setRelayerFeeVault_invalidRelayerFeeVault()",
  "event RelayerAdded(address relayer, address caller)",
  "event RelayerFeeVaultUpdated(address oldVault, address newVault, address caller)",
  "event RelayerRemoved(address relayer, address caller)",
  "function addRelayer(address _relayer)",
  "function approvedRelayers(address _relayer) view returns (bool)",
  "function relayerFeeVault() view returns (address)",
  "function removeRelayer(address _relayer)",
  "function setRelayerFeeVault(address _relayerFeeVault)",
  "error RoutersFacet__acceptProposedRouterOwner_badCaller()",
  "error RoutersFacet__acceptProposedRouterOwner_notElapsed()",
  "error RoutersFacet__addLiquidityForRouter_amountIsZero()",
  "error RoutersFacet__addLiquidityForRouter_badRouter()",
  "error RoutersFacet__addLiquidityForRouter_capReached()",
  "error RoutersFacet__addLiquidityForRouter_routerEmpty()",
  "error RoutersFacet__approveRouterForPortal_alreadyApproved()",
  "error RoutersFacet__approveRouterForPortal_notAdded()",
  "error RoutersFacet__approveRouter_alreadyAdded()",
  "error RoutersFacet__approveRouter_routerEmpty()",
  "error RoutersFacet__initializeRouter_configNotEmpty()",
  "error RoutersFacet__onlyRouterOwner_notRouterOwner()",
  "error RoutersFacet__proposeRouterOwner_badRouter()",
  "error RoutersFacet__proposeRouterOwner_notNewOwner()",
  "error RoutersFacet__removeRouterLiquidityFor_notOwner()",
  "error RoutersFacet__removeRouterLiquidity_amountIsZero()",
  "error RoutersFacet__removeRouterLiquidity_insufficientFunds()",
  "error RoutersFacet__removeRouterLiquidity_recipientEmpty()",
  "error RoutersFacet__setLiquidityFeeNumerator_tooLarge()",
  "error RoutersFacet__setLiquidityFeeNumerator_tooSmall()",
  "error RoutersFacet__setMaxRoutersPerTransfer_invalidMaxRoutersPerTransfer()",
  "error RoutersFacet__setRouterOwner_noChange()",
  "error RoutersFacet__setRouterRecipient_notNewRecipient()",
  "error RoutersFacet__unapproveRouterForPortal_notApproved()",
  "error RoutersFacet__unapproveRouter_notAdded()",
  "error RoutersFacet__unapproveRouter_routerEmpty()",
  "event LiquidityFeeNumeratorUpdated(uint256 liquidityFeeNumerator, address caller)",
  "event MaxRoutersPerTransferUpdated(uint256 maxRoutersPerTransfer, address caller)",
  "event RouterAdded(address indexed router, address caller)",
  "event RouterApprovedForPortal(address router, address caller)",
  "event RouterInitialized(address indexed router)",
  "event RouterLiquidityAdded(address indexed router, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterLiquidityRemoved(address indexed router, address to, address local, bytes32 key, uint256 amount, address caller)",
  "event RouterOwnerAccepted(address indexed router, address indexed prevOwner, address indexed newOwner)",
  "event RouterOwnerProposed(address indexed router, address indexed prevProposed, address indexed newProposed)",
  "event RouterRecipientSet(address indexed router, address indexed prevRecipient, address indexed newRecipient)",
  "event RouterRemoved(address indexed router, address caller)",
  "event RouterUnapprovedForPortal(address router, address caller)",
  "function LIQUIDITY_FEE_DENOMINATOR() pure returns (uint256)",
  "function LIQUIDITY_FEE_NUMERATOR() view returns (uint256)",
  "function acceptProposedRouterOwner(address _router)",
  "function addRouterLiquidity(uint256 _amount, address _local) payable",
  "function addRouterLiquidityFor(uint256 _amount, address _local, address _router) payable",
  "function approveRouter(address _router)",
  "function approveRouterForPortal(address _router)",
  "function getProposedRouterOwner(address _router) view returns (address)",
  "function getProposedRouterOwnerTimestamp(address _router) view returns (uint256)",
  "function getRouterApproval(address _router) view returns (bool)",
  "function getRouterApprovalForPortal(address _router) view returns (bool)",
  "function getRouterOwner(address _router) view returns (address)",
  "function getRouterRecipient(address _router) view returns (address)",
  "function initializeRouter(address _owner, address _recipient)",
  "function maxRoutersPerTransfer() view returns (uint256)",
  "function proposeRouterOwner(address _router, address _proposed)",
  "function removeRouterLiquidity(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to)",
  "function removeRouterLiquidityFor(tuple(uint32 domain, bytes32 id) _canonical, uint256 _amount, address _to, address _router)",
  "function routerBalances(address _router, address _asset) view returns (uint256)",
  "function setLiquidityFeeNumerator(uint256 _numerator)",
  "function setMaxRoutersPerTransfer(uint256 _newMaxRouters)",
  "function setRouterRecipient(address _router, address _recipient)",
  "function unapproveRouter(address _router)",
  "function unapproveRouterForPortal(address _router)",
  "error StableSwapFacet__deadlineCheck_deadlineNotMet()",
  "error StableSwapFacet__getSwapTokenBalance_indexOutOfRange()",
  "error StableSwapFacet__getSwapTokenIndex_notExist()",
  "error StableSwapFacet__getSwapToken_outOfRange()",
  "event AddLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
  "event NewAdminFee(bytes32 indexed key, uint256 newAdminFee)",
  "event NewSwapFee(bytes32 indexed key, uint256 newSwapFee)",
  "event RemoveLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply)",
  "event RemoveLiquidityImbalance(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256[] fees, uint256 invariant, uint256 lpTokenSupply)",
  "event RemoveLiquidityOne(bytes32 indexed key, address indexed provider, uint256 lpTokenAmount, uint256 lpTokenSupply, uint256 boughtId, uint256 tokensBought)",
  "event TokenSwap(bytes32 indexed key, address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId)",
  "function addSwapLiquidity(bytes32 key, uint256[] amounts, uint256 minToMint, uint256 deadline) returns (uint256)",
  "function calculateRemoveSwapLiquidity(bytes32 key, uint256 amount) view returns (uint256[])",
  "function calculateRemoveSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex) view returns (uint256 availableTokenAmount)",
  "function calculateSwap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx) view returns (uint256)",
  "function calculateSwapTokenAmount(bytes32 key, uint256[] amounts, bool deposit) view returns (uint256)",
  "function getSwapA(bytes32 key) view returns (uint256)",
  "function getSwapAPrecise(bytes32 key) view returns (uint256)",
  "function getSwapAdminBalance(bytes32 key, uint256 index) view returns (uint256)",
  "function getSwapLPToken(bytes32 key) view returns (address)",
  "function getSwapStorage(bytes32 key) view returns (tuple(bytes32 key, uint256 initialA, uint256 futureA, uint256 initialATime, uint256 futureATime, uint256 swapFee, uint256 adminFee, address lpToken, address[] pooledTokens, uint256[] tokenPrecisionMultipliers, uint256[] balances, uint256[] adminFees, bool disabled, uint256 removeTime))",
  "function getSwapToken(bytes32 key, uint8 index) view returns (address)",
  "function getSwapTokenBalance(bytes32 key, uint8 index) view returns (uint256)",
  "function getSwapTokenIndex(bytes32 key, address tokenAddress) view returns (uint8)",
  "function getSwapVirtualPrice(bytes32 key) view returns (uint256)",
  "function removeSwapLiquidity(bytes32 key, uint256 amount, uint256[] minAmounts, uint256 deadline) returns (uint256[])",
  "function removeSwapLiquidityImbalance(bytes32 key, uint256[] amounts, uint256 maxBurnAmount, uint256 deadline) returns (uint256)",
  "function removeSwapLiquidityOneToken(bytes32 key, uint256 tokenAmount, uint8 tokenIndex, uint256 minAmount, uint256 deadline) returns (uint256)",
  "function swap(bytes32 key, uint8 tokenIndexFrom, uint8 tokenIndexTo, uint256 dx, uint256 minDy, uint256 deadline) returns (uint256)",
  "function swapExact(bytes32 key, uint256 amountIn, address assetIn, address assetOut, uint256 minAmountOut, uint256 deadline) returns (uint256)",
  "function swapExactOut(bytes32 key, uint256 amountOut, address assetIn, address assetOut, uint256 maxAmountIn, uint256 deadline) returns (uint256)",
  "error TokenFacet__addAssetId_alreadyAdded()",
  "error TokenFacet__addAssetId_badBurn()",
  "error TokenFacet__addAssetId_badMint()",
  "error TokenFacet__enrollAdoptedAndLocalAssets_emptyCanonical()",
  "error TokenFacet__removeAssetId_invalidParams()",
  "error TokenFacet__removeAssetId_notAdded()",
  "error TokenFacet__removeAssetId_remainsCustodied()",
  "error TokenFacet__setLiquidityCap_notCanonicalDomain()",
  "error TokenFacet__setupAssetWithDeployedRepresentation_invalidRepresentation()",
  "error TokenFacet__setupAssetWithDeployedRepresentation_onCanonicalDomain()",
  "error TokenFacet__setupAsset_invalidCanonicalConfiguration()",
  "error TokenFacet__setupAsset_representationListed()",
  "error TokenFacet__updateDetails_localNotFound()",
  "error TokenFacet__updateDetails_notApproved()",
  "error TokenFacet__updateDetails_onlyRemote()",
  "event AssetAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address adoptedAsset, address localAsset, address caller)",
  "event AssetRemoved(bytes32 indexed key, address caller)",
  "event LiquidityCapUpdated(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, uint256 cap, address caller)",
  "event StableSwapAdded(bytes32 indexed key, bytes32 indexed canonicalId, uint32 indexed domain, address swapPool, address caller)",
  "event TokenDeployed(uint32 indexed domain, bytes32 indexed id, address indexed representation)",
  "function addStableSwapPool(tuple(uint32 domain, bytes32 id) _canonical, address _stableSwapPool)",
  "function adoptedToCanonical(address _adopted) view returns (tuple(uint32 domain, bytes32 id))",
  "function adoptedToLocalExternalPools(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
  "function adoptedToLocalExternalPools(bytes32 _key) view returns (address)",
  "function approvedAssets(bytes32 _key) view returns (bool)",
  "function approvedAssets(tuple(uint32 domain, bytes32 id) _canonical) view returns (bool)",
  "function canonicalToAdopted(bytes32 _key) view returns (address)",
  "function canonicalToAdopted(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
  "function canonicalToRepresentation(bytes32 _key) view returns (address)",
  "function canonicalToRepresentation(tuple(uint32 domain, bytes32 id) _canonical) view returns (address)",
  "function getCustodiedAmount(bytes32 _key) view returns (uint256)",
  "function getLocalAndAdoptedToken(bytes32 _id, uint32 _domain) view returns (address, address)",
  "function getTokenId(address _candidate) view returns (tuple(uint32 domain, bytes32 id))",
  "function removeAssetId(tuple(uint32 domain, bytes32 id) _canonical, address _adoptedAssetId, address _representation)",
  "function removeAssetId(bytes32 _key, address _adoptedAssetId, address _representation)",
  "function representationToCanonical(address _representation) view returns (tuple(uint32 domain, bytes32 id))",
  "function setupAsset(tuple(uint32 domain, bytes32 id) _canonical, uint8 _canonicalDecimals, string _representationName, string _representationSymbol, address _adoptedAssetId, address _stableSwapPool, uint256 _cap) returns (address _local)",
  "function setupAssetWithDeployedRepresentation(tuple(uint32 domain, bytes32 id) _canonical, address _representation, address _adoptedAssetId, address _stableSwapPool) returns (address)",
  "function updateDetails(tuple(uint32 domain, bytes32 id) _canonical, string _name, string _symbol)",
  "function updateLiquidityCap(tuple(uint32 domain, bytes32 id) _canonical, uint256 _updated)"
]
