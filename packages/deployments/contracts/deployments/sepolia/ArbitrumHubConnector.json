{
  "address": "0x0c80D9C14c6E6e443389312d647cF48FbA38bBE2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_mirrorDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_amb",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outbox",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSubmissionCostCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxGasCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPriceCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Connector__processMessage_notUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCrossChainCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__ownershipDelayElapsed_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TypedMemView__index_indexMoreThan32Bytes",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loc",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "len",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slice",
          "type": "uint256"
        }
      ],
      "name": "TypedMemView__index_overrun",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_previous",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_updated",
          "type": "uint256"
        }
      ],
      "name": "GasPriceCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_previous",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_updated",
          "type": "uint256"
        }
      ],
      "name": "MaxGasCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_previous",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_updated",
          "type": "uint256"
        }
      ],
      "name": "MaxSubmissionCapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encodedData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "current",
          "type": "address"
        }
      ],
      "name": "MirrorConnectorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "mirrorDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "amb",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rootManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "mirrorConnector",
          "type": "address"
        }
      ],
      "name": "NewConnector",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "RetryableTicketCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIRROR_DOMAIN",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_MANAGER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasPriceCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGasCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSubmissionCostCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mirrorConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outbox",
      "outputs": [
        {
          "internalType": "contract IArbitrumOutbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "processMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_nodeNum",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_sendRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "l2Sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "l2Block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "l1Block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "l2Timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct L2Message",
          "name": "_message",
          "type": "tuple"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "processed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollup",
      "outputs": [
        {
          "internalType": "contract IArbitrumRollup",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedData",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_updated",
          "type": "uint256"
        }
      ],
      "name": "setGasPriceCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_updated",
          "type": "uint256"
        }
      ],
      "name": "setMaxGasCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_updated",
          "type": "uint256"
        }
      ],
      "name": "setMaxSubmissionCostCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mirrorConnector",
          "type": "address"
        }
      ],
      "name": "setMirrorConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_expected",
          "type": "address"
        }
      ],
      "name": "verifySender",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfb14dc1e91891a950b462bb93db4ba1ce2da71e4ef8436ee34ef78a2508fd06f",
  "receipt": {
    "to": null,
    "from": "0xa2Ee8DCd2A8A3A54Cf37F6590E5108BbE502B006",
    "contractAddress": "0x0c80D9C14c6E6e443389312d647cF48FbA38bBE2",
    "transactionIndex": 81,
    "gasUsed": "1960454",
    "logsBloom": "0x00000000000000000000004000000000000000000000001000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001001000000000000008000000000000000000000020000000000000000000800000000000010000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000001000000000020000000000000000000040000000000400000000000020002000000000000010010",
    "blockHash": "0xcb3608753e4bd7262afc7e67046424864ffc46d66c3b2c640aabfad122a2e5e6",
    "transactionHash": "0xfb14dc1e91891a950b462bb93db4ba1ce2da71e4ef8436ee34ef78a2508fd06f",
    "logs": [
      {
        "transactionIndex": 81,
        "blockNumber": 5287640,
        "transactionHash": "0xfb14dc1e91891a950b462bb93db4ba1ce2da71e4ef8436ee34ef78a2508fd06f",
        "address": "0x0c80D9C14c6E6e443389312d647cF48FbA38bBE2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a2ee8dcd2a8a3a54cf37f6590e5108bbe502b006"
        ],
        "data": "0x",
        "logIndex": 155,
        "blockHash": "0xcb3608753e4bd7262afc7e67046424864ffc46d66c3b2c640aabfad122a2e5e6"
      },
      {
        "transactionIndex": 81,
        "blockNumber": 5287640,
        "transactionHash": "0xfb14dc1e91891a950b462bb93db4ba1ce2da71e4ef8436ee34ef78a2508fd06f",
        "address": "0x0c80D9C14c6E6e443389312d647cF48FbA38bBE2",
        "topics": [
          "0x4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f0",
          "0x000000000000000000000000000000000000000000000000000000007365706f",
          "0x0000000000000000000000000000000000000000000000000000000061627365"
        ],
        "data": "0x000000000000000000000000aae29b0366299461418f5324a79afc425be5ae2100000000000000000000000037b118dfc50981738b59b7e640135f41813a50a90000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 156,
        "blockHash": "0xcb3608753e4bd7262afc7e67046424864ffc46d66c3b2c640aabfad122a2e5e6"
      }
    ],
    "blockNumber": 5287640,
    "cumulativeGasUsed": "10372810",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1936027759",
    "1633842021",
    "0xaAe29B0366299461418F5324a79Afc425BE5ae21",
    "0x37B118dFc50981738B59b7E640135F41813a50A9",
    "0x0000000000000000000000000000000000000000",
    "0x65f07C7D521164a4d5DaC6eB8Fac8DA067A3B78F",
    "100000000000000",
    "850000",
    "20000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f27fc0c5a728e8290f4e343b9381d1ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_mirrorDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_amb\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSubmissionCostCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPriceCap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Connector__processMessage_notUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCrossChainCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__ownershipDelayElapsed_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TypedMemView__index_indexMoreThan32Bytes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slice\",\"type\":\"uint256\"}],\"name\":\"TypedMemView__index_overrun\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_updated\",\"type\":\"uint256\"}],\"name\":\"GasPriceCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_updated\",\"type\":\"uint256\"}],\"name\":\"MaxGasCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_previous\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_updated\",\"type\":\"uint256\"}],\"name\":\"MaxSubmissionCapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"MirrorConnectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"mirrorDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"amb\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rootManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mirrorConnector\",\"type\":\"address\"}],\"name\":\"NewConnector\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"RetryableTicketCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIRROR_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_MANAGER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasPriceCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSubmissionCostCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mirrorConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outbox\",\"outputs\":[{\"internalType\":\"contract IArbitrumOutbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"processMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_nodeNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_sendRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"l2Sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"l2Block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l1Block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"l2Timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct L2Message\",\"name\":\"_message\",\"type\":\"tuple\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollup\",\"outputs\":[{\"internalType\":\"contract IArbitrumRollup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedData\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updated\",\"type\":\"uint256\"}],\"name\":\"setGasPriceCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updated\",\"type\":\"uint256\"}],\"name\":\"setMaxGasCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updated\",\"type\":\"uint256\"}],\"name\":\"setMaxSubmissionCostCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mirrorConnector\",\"type\":\"address\"}],\"name\":\"setMirrorConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_expected\",\"type\":\"address\"}],\"name\":\"verifySender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"GasPriceCapUpdated(uint256,uint256)\":{\"params\":{\"_previous\":\"The starting value\",\"_updated\":\"The final value\"}},\"MaxGasCapUpdated(uint256,uint256)\":{\"params\":{\"_previous\":\"The starting value\",\"_updated\":\"The final value\"}},\"MaxSubmissionCapUpdated(uint256,uint256)\":{\"params\":{\"_previous\":\"The starting value\",\"_updated\":\"The final value\"}}},\"kind\":\"dev\",\"methods\":{\"processMessage(bytes)\":{\"details\":\"This is called by AMBs to process messages originating from mirror connector\"},\"sendMessage(bytes,bytes)\":{\"details\":\"This is called by the root manager *only* on mainnet to propagate the aggregate root\"},\"setGasPriceCap(uint256)\":{\"params\":{\"_updated\":\"The new value\"}},\"setMaxGasCap(uint256)\":{\"params\":{\"_updated\":\"The new value\"}},\"setMaxSubmissionCostCap(uint256)\":{\"params\":{\"_updated\":\"The new value\"}},\"withdrawFunds(address)\":{\"details\":\"Withdraws the entire balance of the contract.\",\"params\":{\"_to\":\"The recipient of the funds withdrawn\"}}},\"stateVariables\":{\"gasPriceCap\":{\"details\":\"The value used in `createRetryableTicket` is the lesser of the cap or a value passed in via `_encodedData` in `_sendMessage`. This value represents L2 gas price bid for immediate L2 execution attempt\"},\"maxGasCap\":{\"details\":\"The value used in `createRetryableTicket` is the lesser of the cap or a value passed in via `_encodedData` in `_sendMessage`. This value represents gas limit for immediate L2 execution attempt\"},\"maxSubmissionCostCap\":{\"details\":\"The value used in `createRetryableTicket` is the lesser of the cap or a value passed in via `_encodedData` in `_sendMessage`. This value represents amount of ETH allocated to pay for the base submission fee\"}},\"version\":1},\"userdoc\":{\"events\":{\"FundsWithdrawn(address,uint256)\":{\"notice\":\"Emitted when funds are withdrawn by the admin\"},\"GasPriceCapUpdated(uint256,uint256)\":{\"notice\":\"Emitted when admin updates the gasPriceCap\"},\"MaxGasCapUpdated(uint256,uint256)\":{\"notice\":\"Emitted when admin updates the maxGasCap\"},\"MaxSubmissionCapUpdated(uint256,uint256)\":{\"notice\":\"Emitted when admin updates the maxSubmissionCap\"},\"MessageProcessed(bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully received over an AMB\"},\"MessageSent(bytes,bytes,address)\":{\"notice\":\"Emitted whenever a message is successfully sent over an AMB\"}},\"kind\":\"user\",\"methods\":{\"AMB()\":{\"notice\":\"Address of the AMB on this domain.\"},\"DOMAIN()\":{\"notice\":\"The domain of this Messaging (i.e. Connector) contract.\"},\"MIRROR_DOMAIN()\":{\"notice\":\"The domain of the corresponding messaging (i.e. Connector) contract.\"},\"ROOT_MANAGER()\":{\"notice\":\"RootManager contract address.\"},\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"gasPriceCap()\":{\"notice\":\"Sets cap on gasPrice used in `createRetryableTicket`\"},\"maxGasCap()\":{\"notice\":\"Sets cap on maxGas used in `createRetryableTicket`\"},\"maxSubmissionCostCap()\":{\"notice\":\"Sets cap on maxSubmissionCost used in `createRetryableTicket`\"},\"mirrorConnector()\":{\"notice\":\"Connector on L2 for L1 connectors, and vice versa.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"processMessage(bytes)\":{\"notice\":\"Processes a message received by an AMB\"},\"processed(uint256)\":{\"notice\":\"Tracks which messages have been processed from bridge\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"sendMessage(bytes,bytes)\":{\"notice\":\"Sends a message over the amb\"},\"setGasPriceCap(uint256)\":{\"notice\":\"Used (by admin) to update the gasPriceCap\"},\"setMaxGasCap(uint256)\":{\"notice\":\"Used (by admin) to update the maxGasCap\"},\"setMaxSubmissionCostCap(uint256)\":{\"notice\":\"Used (by admin) to update the maxSubmissionCostCap\"},\"setMirrorConnector(address)\":{\"notice\":\"Sets the address of the l2Connector for this domain\"},\"verifySender(address)\":{\"notice\":\"Checks the cross domain sender for a given address\"},\"withdrawFunds(address)\":{\"notice\":\"This function should be callable by owner, and send funds trapped on a connector to the provided recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol\":\"ArbitrumHubConnector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/crosschain/arbitrum/LibArbitrumL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (crosschain/arbitrum/LibArbitrumL1.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport {IBridge as ArbitrumL1_Bridge} from \\\"../../vendor/arbitrum/IBridge.sol\\\";\\nimport {IOutbox as ArbitrumL1_Outbox} from \\\"../../vendor/arbitrum/IOutbox.sol\\\";\\nimport \\\"../errors.sol\\\";\\n\\n/**\\n * @dev Primitives for cross-chain aware contracts for\\n * https://arbitrum.io/[Arbitrum].\\n *\\n * This version should only be used on L1 to process cross-chain messages\\n * originating from L2. For the other side, use {LibArbitrumL2}.\\n */\\nlibrary LibArbitrumL1 {\\n    /**\\n     * @dev Returns whether the current function call is the result of a\\n     * cross-chain message relayed by the `bridge`.\\n     */\\n    function isCrossChain(address bridge) internal view returns (bool) {\\n        return msg.sender == bridge;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the sender that triggered the current\\n     * cross-chain message through the `bridge`.\\n     *\\n     * NOTE: {isCrossChain} should be checked before trying to recover the\\n     * sender, as it will revert with `NotCrossChainCall` if the current\\n     * function call is not the result of a cross-chain message.\\n     */\\n    function crossChainSender(address bridge) internal view returns (address) {\\n        if (!isCrossChain(bridge)) revert NotCrossChainCall();\\n\\n        address sender = ArbitrumL1_Outbox(ArbitrumL1_Bridge(bridge).activeOutbox()).l2ToL1Sender();\\n        require(sender != address(0), \\\"LibArbitrumL1: system messages without sender\\\");\\n\\n        return sender;\\n    }\\n}\\n\",\"keccak256\":\"0x364ef776375bac74a5f4f2fd1dc1d4a089915ea0fe720249bb71431e7b2f787f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/crosschain/errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/errors.sol)\\n\\npragma solidity ^0.8.4;\\n\\nerror NotCrossChainCall();\\nerror InvalidCrossChainSender(address actual, address expected);\\n\",\"keccak256\":\"0xa1e9b651a2427925598b49ef35da5930abc07859cfac5b9dfb1912f063a024b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/vendor/arbitrum/IBridge.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts (last updated v4.8.0) (vendor/arbitrum/IBridge.sol)\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.6.9 <0.9.0;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash,\\n        uint256 baseFeeL1,\\n        uint64 timestamp\\n    );\\n\\n    event BridgeCallTriggered(address indexed outbox, address indexed to, uint256 value, bytes data);\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    event SequencerInboxUpdated(address newSequencerInbox);\\n\\n    function allowedDelayedInboxList(uint256) external returns (address);\\n\\n    function allowedOutboxList(uint256) external returns (address);\\n\\n    /// @dev Accumulator for delayed inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\\n    function delayedInboxAccs(uint256) external view returns (bytes32);\\n\\n    /// @dev Accumulator for sequencer inbox messages; tail represents hash of the current state; each element represents the inclusion of a new message.\\n    function sequencerInboxAccs(uint256) external view returns (bytes32);\\n\\n    // OpenZeppelin: changed return type from IOwnable\\n    function rollup() external view returns (address);\\n\\n    function sequencerInbox() external view returns (address);\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedDelayedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function sequencerReportedSubMessageCount() external view returns (uint256);\\n\\n    /**\\n     * @dev Enqueue a message in the delayed inbox accumulator.\\n     *      These messages are later sequenced in the SequencerInbox, either\\n     *      by the sequencer as part of a normal batch, or by force inclusion.\\n     */\\n    function enqueueDelayedMessage(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    function delayedMessageCount() external view returns (uint256);\\n\\n    function sequencerMessageCount() external view returns (uint256);\\n\\n    // ---------- onlySequencerInbox functions ----------\\n\\n    function enqueueSequencerMessage(\\n        bytes32 dataHash,\\n        uint256 afterDelayedMessagesRead,\\n        uint256 prevMessageCount,\\n        uint256 newMessageCount\\n    )\\n        external\\n        returns (\\n            uint256 seqMessageIndex,\\n            bytes32 beforeAcc,\\n            bytes32 delayedAcc,\\n            bytes32 acc\\n        );\\n\\n    /**\\n     * @dev Allows the sequencer inbox to submit a delayed message of the batchPostingReport type\\n     *      This is done through a separate function entrypoint instead of allowing the sequencer inbox\\n     *      to call `enqueueDelayedMessage` to avoid the gas overhead of an extra SLOAD in either\\n     *      every delayed inbox or every sequencer inbox call.\\n     */\\n    function submitBatchSpendingReport(address batchPoster, bytes32 dataHash) external returns (uint256 msgNum);\\n\\n    // ---------- onlyRollupOrOwner functions ----------\\n\\n    function setSequencerInbox(address _sequencerInbox) external;\\n\\n    function setDelayedInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // ---------- initializer ----------\\n\\n    // OpenZeppelin: changed rollup_ type from IOwnable\\n    function initialize(address rollup_) external;\\n}\\n\",\"keccak256\":\"0xdc8847efc0ca74c9f708d9bbd26592b4d21ccbcece6c1ce547d411891cdfe62d\",\"license\":\"BUSL-1.1\"},\"@openzeppelin/contracts/vendor/arbitrum/IOutbox.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts (last updated v4.8.0) (vendor/arbitrum/IOutbox.sol)\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.6.9 <0.9.0;\\n\\nimport \\\"./IBridge.sol\\\";\\n\\ninterface IOutbox {\\n    event SendRootUpdated(bytes32 indexed blockHash, bytes32 indexed outputRoot);\\n    event OutBoxTransactionExecuted(\\n        address indexed to,\\n        address indexed l2Sender,\\n        uint256 indexed zero,\\n        uint256 transactionIndex\\n    );\\n\\n    function rollup() external view returns (address); // the rollup contract\\n\\n    function bridge() external view returns (IBridge); // the bridge contract\\n\\n    function spent(uint256) external view returns (bytes32); // packed spent bitmap\\n\\n    function roots(bytes32) external view returns (bytes32); // maps root hashes => L2 block hash\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function OUTBOX_VERSION() external view returns (uint128); // the outbox version\\n\\n    function updateSendRoot(bytes32 sendRoot, bytes32 l2BlockHash) external;\\n\\n    /// @notice When l2ToL1Sender returns a nonzero address, the message was originated by an L2 account\\n    ///         When the return value is zero, that means this is a system message\\n    /// @dev the l2ToL1Sender behaves as the tx.origin, the msg.sender should be validated to protect against reentrancies\\n    function l2ToL1Sender() external view returns (address);\\n\\n    /// @return l2Block return L2 block when the L2 tx was initiated or 0 if no L2 to L1 transaction is active\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    /// @return l1Block return L1 block when the L2 tx was initiated or 0 if no L2 to L1 transaction is active\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    /// @return timestamp return L2 timestamp when the L2 tx was initiated or 0 if no L2 to L1 transaction is active\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    /// @return outputId returns the unique output identifier of the L2 to L1 tx or 0 if no L2 to L1 transaction is active\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    /**\\n     * @notice Executes a messages in an Outbox entry.\\n     * @dev Reverts if dispute period hasn't expired, since the outbox entry\\n     *      is only created once the rollup confirms the respective assertion.\\n     * @dev it is not possible to execute any L2-to-L1 transaction which contains data\\n     *      to a contract address without any code (as enforced by the Bridge contract).\\n     * @param proof Merkle proof of message inclusion in send root\\n     * @param index Merkle path to message\\n     * @param l2Sender sender if original message (i.e., caller of ArbSys.sendTxToL1)\\n     * @param to destination address for L1 contract call\\n     * @param l2Block l2 block number at which sendTxToL1 call was made\\n     * @param l1Block l1 block number at which sendTxToL1 call was made\\n     * @param l2Timestamp l2 Timestamp at which sendTxToL1 call was made\\n     * @param value wei in L1 message\\n     * @param data abi-encoded L1 message data\\n     */\\n    function executeTransaction(\\n        bytes32[] calldata proof,\\n        uint256 index,\\n        address l2Sender,\\n        address to,\\n        uint256 l2Block,\\n        uint256 l1Block,\\n        uint256 l2Timestamp,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     *  @dev function used to simulate the result of a particular function call from the outbox\\n     *       it is useful for things such as gas estimates. This function includes all costs except for\\n     *       proof validation (which can be considered offchain as a somewhat of a fixed cost - it's\\n     *       not really a fixed cost, but can be treated as so with a fixed overhead for gas estimation).\\n     *       We can't include the cost of proof validation since this is intended to be used to simulate txs\\n     *       that are included in yet-to-be confirmed merkle roots. The simulation entrypoint could instead pretend\\n     *       to confirm a pending merkle root, but that would be less practical for integrating with tooling.\\n     *       It is only possible to trigger it when the msg sender is address zero, which should be impossible\\n     *       unless under simulation in an eth_call or eth_estimateGas\\n     */\\n    function executeTransactionSimulation(\\n        uint256 index,\\n        address l2Sender,\\n        address to,\\n        uint256 l2Block,\\n        uint256 l1Block,\\n        uint256 l2Timestamp,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @param index Merkle path to message\\n     * @return true if the message has been spent\\n     */\\n    function isSpent(uint256 index) external view returns (bool);\\n\\n    function calculateItemHash(\\n        address l2Sender,\\n        address to,\\n        uint256 l2Block,\\n        uint256 l1Block,\\n        uint256 l2Timestamp,\\n        uint256 value,\\n        bytes calldata data\\n    ) external pure returns (bytes32);\\n\\n    function calculateMerkleRoot(\\n        bytes32[] memory proof,\\n        uint256 path,\\n        bytes32 item\\n    ) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf11685613c2ca2e87e9ad7e93bff2bd966aa16f11599371878dff047be17d945\",\"license\":\"BUSL-1.1\"},\"contracts/messaging/connectors/Connector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ProposedOwnable} from \\\"../../shared/ProposedOwnable.sol\\\";\\nimport {IConnector} from \\\"../interfaces/IConnector.sol\\\";\\n\\n/**\\n * @title Connector\\n * @author Connext Labs, Inc.\\n * @notice This contract has the messaging interface functions used by all connectors.\\n *\\n * @dev This contract stores information about mirror connectors, but can be used as a\\n * base for contracts that do not have a mirror (i.e. the connector handling messaging on\\n * mainnet). In this case, the `mirrorConnector` and `MIRROR_DOMAIN`\\n * will be empty\\n *\\n * @dev If ownership is renounced, this contract will be unable to update its `mirrorConnector`\\n * or `mirrorGas`\\n */\\nabstract contract Connector is ProposedOwnable, IConnector {\\n  // ========== Custom Errors ===========\\n\\n  error Connector__processMessage_notUsed();\\n\\n  // ============ Events ============\\n\\n  event NewConnector(\\n    uint32 indexed domain,\\n    uint32 indexed mirrorDomain,\\n    address amb,\\n    address rootManager,\\n    address mirrorConnector\\n  );\\n\\n  event MirrorConnectorUpdated(address previous, address current);\\n\\n  /**\\n   * @notice Emitted when funds are withdrawn by the admin\\n   * @dev See comments in `withdrawFunds`\\n   * @param to The recipient of the funds\\n   * @param amount The amount withdrawn\\n   */\\n  event FundsWithdrawn(address indexed to, uint256 amount);\\n\\n  // ============ Public Storage ============\\n\\n  /**\\n   * @notice The domain of this Messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable DOMAIN;\\n\\n  /**\\n   * @notice Address of the AMB on this domain.\\n   */\\n  address public immutable AMB;\\n\\n  /**\\n   * @notice RootManager contract address.\\n   */\\n  address public immutable ROOT_MANAGER;\\n\\n  /**\\n   * @notice The domain of the corresponding messaging (i.e. Connector) contract.\\n   */\\n  uint32 public immutable MIRROR_DOMAIN;\\n\\n  /**\\n   * @notice Connector on L2 for L1 connectors, and vice versa.\\n   */\\n  address public mirrorConnector;\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered AMB\\n   */\\n  modifier onlyAMB() {\\n    require(msg.sender == AMB, \\\"!AMB\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Errors if the msg.sender is not the registered ROOT_MANAGER\\n   */\\n  modifier onlyRootManager() {\\n    // NOTE: RootManager will be zero address for spoke connectors.\\n    // Only root manager can dispatch a message to spokes/L2s via the hub connector.\\n    require(msg.sender == ROOT_MANAGER, \\\"!rootManager\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new HubConnector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector\\n  ) ProposedOwnable() {\\n    // set the owner\\n    _setOwner(msg.sender);\\n\\n    // sanity checks on values\\n    require(_domain != 0, \\\"empty domain\\\");\\n    require(_rootManager != address(0), \\\"empty rootManager\\\");\\n    // see note at top of contract on why the mirror values are not sanity checked\\n\\n    // set immutables\\n    DOMAIN = _domain;\\n    AMB = _amb;\\n    ROOT_MANAGER = _rootManager;\\n    MIRROR_DOMAIN = _mirrorDomain;\\n    // set mutables if defined\\n    if (_mirrorConnector != address(0)) {\\n      _setMirrorConnector(_mirrorConnector);\\n    }\\n\\n    emit NewConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector);\\n  }\\n\\n  // ============ Receivable ============\\n  /**\\n   * @notice Connectors may need to receive native asset to handle fees when sending a\\n   * message\\n   */\\n  receive() external payable {}\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Sets the address of the l2Connector for this domain\\n   */\\n  function setMirrorConnector(address _mirrorConnector) public onlyOwner {\\n    _setMirrorConnector(_mirrorConnector);\\n  }\\n\\n  /**\\n   * @notice This function should be callable by owner, and send funds trapped on\\n   * a connector to the provided recipient.\\n   * @dev Withdraws the entire balance of the contract.\\n   *\\n   * @param _to The recipient of the funds withdrawn\\n   */\\n  function withdrawFunds(address _to) public onlyOwner {\\n    uint256 amount = address(this).balance;\\n    Address.sendValue(payable(_to), amount);\\n    emit FundsWithdrawn(_to, amount);\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Processes a message received by an AMB\\n   * @dev This is called by AMBs to process messages originating from mirror connector\\n   */\\n  function processMessage(bytes memory _data) external virtual onlyAMB {\\n    _processMessage(_data);\\n    emit MessageProcessed(_data, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Checks the cross domain sender for a given address\\n   */\\n  function verifySender(address _expected) external returns (bool) {\\n    return _verifySender(_expected);\\n  }\\n\\n  // ============ Virtual Functions ============\\n\\n  /**\\n   * @notice This function is used by the Connext contract on the l2 domain to send a message to the\\n   * l1 domain (i.e. called by Connext on optimism to send a message to mainnet with roots)\\n   * @param _data The contents of the message\\n   * @param _encodedData Data used to send the message; specific to connector\\n   */\\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal virtual;\\n\\n  /**\\n   * @notice This function is used by the AMBs to handle incoming messages. Should store the latest\\n   * root generated on the l2 domain.\\n   */\\n  function _processMessage(\\n    bytes memory /* _data */\\n  ) internal virtual {\\n    // By default, reverts. This is to ensure the call path is not used unless this function is\\n    // overridden by the inheriting class\\n    revert Connector__processMessage_notUsed();\\n  }\\n\\n  /**\\n   * @notice Verify that the msg.sender is the correct AMB contract, and that the message's origin sender\\n   * is the expected address.\\n   * @dev Should be overridden by the implementing Connector contract.\\n   */\\n  function _verifySender(address _expected) internal virtual returns (bool);\\n\\n  // ============ Private Functions ============\\n\\n  function _setMirrorConnector(address _mirrorConnector) internal virtual {\\n    emit MirrorConnectorUpdated(mirrorConnector, _mirrorConnector);\\n    mirrorConnector = _mirrorConnector;\\n  }\\n}\\n\",\"keccak256\":\"0x11b9785b7c3ce1296c4bea0b30f3ab28d9834121c63ab1b364cb54992f8fd90c\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/HubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Connector} from \\\"./Connector.sol\\\";\\n\\n/**\\n * @title HubConnector\\n * @author Connext Labs, Inc.\\n * @notice This contract implements the messaging functions needed on the hub-side of a given AMB.\\n * The HubConnector has a limited set of functionality compared to the SpokeConnector, namely that\\n * it contains no logic to store or prove messages.\\n *\\n * @dev This contract should be deployed on the hub-side of an AMB (i.e. on L1), and contracts\\n * which extend this should implement the virtual functions defined in the BaseConnector class\\n */\\nabstract contract HubConnector is Connector {\\n  /**\\n   * @notice Creates a new HubConnector instance\\n   * @dev The connectors are deployed such that there is one on each side of an AMB (i.e.\\n   * for optimism, there is one connector on optimism and one connector on mainnet)\\n   * @param _domain The domain this connector lives on\\n   * @param _mirrorDomain The spoke domain\\n   * @param _amb The address of the amb on the domain this connector lives on\\n   * @param _rootManager The address of the RootManager on mainnet\\n   * @param _mirrorConnector The address of the spoke connector\\n   */\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector\\n  ) Connector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector) {}\\n\\n  // ============ Public fns ============\\n  /**\\n   * @notice Sends a message over the amb\\n   * @dev This is called by the root manager *only* on mainnet to propagate the aggregate root\\n   */\\n  function sendMessage(bytes memory _data, bytes memory _encodedData) external payable onlyRootManager {\\n    _sendMessage(_data, _encodedData);\\n    emit MessageSent(_data, _encodedData, msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0xc35621419ca872ed0550b0943a577b39942f3d2c9b54de008fee382d5ad290e4\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {LibArbitrumL1} from \\\"@openzeppelin/contracts/crosschain/arbitrum/LibArbitrumL1.sol\\\";\\n\\nimport {TypedMemView} from \\\"../../../shared/libraries/TypedMemView.sol\\\";\\n\\nimport {IRootManager} from \\\"../../interfaces/IRootManager.sol\\\";\\nimport {IArbitrumInbox} from \\\"../../interfaces/ambs/arbitrum/IArbitrumInbox.sol\\\";\\nimport {IArbitrumOutbox} from \\\"../../interfaces/ambs/arbitrum/IArbitrumOutbox.sol\\\";\\nimport {IArbitrumRollup, Node} from \\\"../../interfaces/ambs/arbitrum/IArbitrumRollup.sol\\\";\\n\\nimport {HubConnector} from \\\"../HubConnector.sol\\\";\\nimport {Connector} from \\\"../Connector.sol\\\";\\n\\nstruct L2Message {\\n  address l2Sender;\\n  address to;\\n  uint256 l2Block;\\n  uint256 l1Block;\\n  uint256 l2Timestamp;\\n  uint256 value;\\n  bytes callData;\\n}\\n\\ncontract ArbitrumHubConnector is HubConnector {\\n  // ============ Libraries ============\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Storage ============\\n\\n  IArbitrumOutbox public outbox;\\n  IArbitrumRollup public rollup;\\n\\n  /**\\n   * @notice Sets cap on maxSubmissionCost used in `createRetryableTicket`\\n   * @dev The value used in `createRetryableTicket` is the lesser of the cap or\\n   * a value passed in via `_encodedData` in `_sendMessage`.\\n   *\\n   * This value represents amount of ETH allocated to pay for the base submission fee\\n   */\\n  uint256 public maxSubmissionCostCap;\\n\\n  /**\\n   * @notice Sets cap on maxGas used in `createRetryableTicket`\\n   * @dev The value used in `createRetryableTicket` is the lesser of the cap or\\n   * a value passed in via `_encodedData` in `_sendMessage`.\\n   *\\n   * This value represents gas limit for immediate L2 execution attempt\\n   */\\n  uint256 public maxGasCap;\\n\\n  /**\\n   * @notice Sets cap on gasPrice used in `createRetryableTicket`\\n   * @dev The value used in `createRetryableTicket` is the lesser of the cap or\\n   * a value passed in via `_encodedData` in `_sendMessage`.\\n   *\\n   * This value represents L2 gas price bid for immediate L2 execution attempt\\n   */\\n  uint256 public gasPriceCap;\\n\\n  /**\\n   * @notice Tracks which messages have been processed from bridge\\n   */\\n  mapping(uint256 => bool) public processed;\\n\\n  // ============ Events ============\\n  // TODO: do we need any other information from the ticket to link to message?\\n  event RetryableTicketCreated(uint256 indexed ticketId);\\n\\n  /**\\n   * @notice Emitted when admin updates the maxSubmissionCap\\n   * @param _previous The starting value\\n   * @param _updated The final value\\n   */\\n  event MaxSubmissionCapUpdated(uint256 _previous, uint256 _updated);\\n\\n  /**\\n   * @notice Emitted when admin updates the maxGasCap\\n   * @param _previous The starting value\\n   * @param _updated The final value\\n   */\\n  event MaxGasCapUpdated(uint256 _previous, uint256 _updated);\\n\\n  /**\\n   * @notice Emitted when admin updates the gasPriceCap\\n   * @param _previous The starting value\\n   * @param _updated The final value\\n   */\\n  event GasPriceCapUpdated(uint256 _previous, uint256 _updated);\\n\\n  // ============ Constructor ============\\n  constructor(\\n    uint32 _domain,\\n    uint32 _mirrorDomain,\\n    address _amb,\\n    address _rootManager,\\n    address _mirrorConnector,\\n    address _outbox,\\n    uint256 _maxSubmissionCostCap,\\n    uint256 _maxGasCap,\\n    uint256 _gasPriceCap\\n  ) HubConnector(_domain, _mirrorDomain, _amb, _rootManager, _mirrorConnector) {\\n    outbox = IArbitrumOutbox(_outbox);\\n    rollup = IArbitrumRollup(outbox.rollup());\\n\\n    // Set initial caps for L1 -> L2 messages\\n    maxSubmissionCostCap = _maxSubmissionCostCap;\\n    maxGasCap = _maxGasCap;\\n    gasPriceCap = _gasPriceCap;\\n  }\\n\\n  // ============ Admin fns ============\\n\\n  /**\\n   * @notice Used (by admin) to update the maxSubmissionCostCap\\n   * @param _updated The new value\\n   */\\n  function setMaxSubmissionCostCap(uint256 _updated) public onlyOwner {\\n    emit MaxSubmissionCapUpdated(maxSubmissionCostCap, _updated);\\n    maxSubmissionCostCap = _updated;\\n  }\\n\\n  /**\\n   * @notice Used (by admin) to update the maxGasCap\\n   * @param _updated The new value\\n   */\\n  function setMaxGasCap(uint256 _updated) public onlyOwner {\\n    emit MaxGasCapUpdated(maxGasCap, _updated);\\n    maxGasCap = _updated;\\n  }\\n\\n  /**\\n   * @notice Used (by admin) to update the gasPriceCap\\n   * @param _updated The new value\\n   */\\n  function setGasPriceCap(uint256 _updated) public onlyOwner {\\n    emit GasPriceCapUpdated(maxSubmissionCostCap, _updated);\\n    gasPriceCap = _updated;\\n  }\\n\\n  // ============ Private fns ============\\n\\n  function _verifySender(address _expected) internal view override returns (bool) {\\n    return _expected == LibArbitrumL1.crossChainSender(AMB);\\n  }\\n\\n  /**\\n   * @notice Helper to return the lesser of two values\\n   * @param _a Some number\\n   * @param _b Some number\\n   */\\n  function _lesserOf(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n    return _a < _b ? _a : _b;\\n  }\\n\\n  function _sendMessage(bytes memory _data, bytes memory _encodedData) internal override {\\n    // Should always be dispatching the aggregate root\\n    require(_data.length == 32, \\\"!length\\\");\\n    // Get the calldata\\n    bytes memory _calldata = abi.encodeWithSelector(Connector.processMessage.selector, _data);\\n\\n    // Should include specialized calldata\\n    require(_encodedData.length == (32 * 3), \\\"!data length\\\");\\n\\n    // Decode all of the gas-related parameters\\n    (uint256 maxSubmissionCost, uint256 maxGas, uint256 gasPrice) = abi.decode(\\n      _encodedData,\\n      (uint256, uint256, uint256)\\n    );\\n\\n    // dispatch to l2\\n    uint256 ticketID = IArbitrumInbox(AMB).createRetryableTicket{value: msg.value}(\\n      mirrorConnector, // destAddr\\n      0, // arbTxCallValue\\n      _lesserOf(maxSubmissionCost, maxSubmissionCostCap), // maxSubmissionCost: Amount of ETH allocated to pay for the base submission fee\\n      mirrorConnector, // submissionRefundAddress: Address to which all excess gas is credited on L2\\n      mirrorConnector, // valueRefundAddress: Address to which CallValue will be credited to on L2 if the retryable ticket times out or is cancelled\\n      _lesserOf(maxGas, maxGasCap), // maxGas: Gas limit for immediate L2 execution attempt\\n      _lesserOf(gasPrice, gasPriceCap), // gasPriceBid: L2 Gas price bid for immediate L2 execution attempt\\n      _calldata // data\\n    );\\n    emit RetryableTicketCreated(ticketID);\\n  }\\n\\n  // DO NOT override _processMessage, should revert from `Connector` class. All messages must use the\\n  // `processMessageFromRoot` flow.\\n\\n  function processMessageFromRoot(\\n    uint64 _nodeNum,\\n    bytes32 _sendRoot,\\n    bytes32 _blockHash,\\n    bytes32[] calldata _proof,\\n    uint256 _index,\\n    L2Message calldata _message\\n  ) external {\\n    // Ensure the send root corresponds to an arbitrum node that exists onchain\\n    _validateSendRoot(_nodeNum, _sendRoot, _blockHash);\\n\\n    // Ensure the given l2 message is included in the send root\\n    _validateMessage(_sendRoot, _proof, _index, _message);\\n\\n    // Message has been proven within the send root, process the message\\n    // data itself. The message data is defined in the spoke connector as:\\n    //\\n    // `abi.encodeWithSelector(Connector.processMessage.selector, _data);`\\n    //\\n    // so to get the root data, we need to decode the _calldata. we can do this\\n    // by dropping the 4-byte selector, then using the rest as the raw _data.\\n    require(_message.callData.length == 100, \\\"!length\\\");\\n\\n    // NOTE: TypedMemView only loads 32-byte chunks onto stack, which is fine in this case\\n    // the calldata is 100 bytes long, the last 32 bytes represent the root to be aggregated.\\n    bytes32 _data = _message.callData.ref(0).index(68, 32);\\n\\n    // Update root manager\\n    IRootManager(ROOT_MANAGER).aggregate(MIRROR_DOMAIN, _data);\\n\\n    // Emit event\\n    emit MessageProcessed(abi.encode(_data), msg.sender);\\n  }\\n\\n  function _validateSendRoot(\\n    uint64 _nodeNum,\\n    bytes32 _sendRoot,\\n    bytes32 _blockHash\\n  ) internal view {\\n    // Get the confirm data to ensure the node has been put on L1 with\\n    // the given block hash and send root\\n    bytes32 confirmData = _confirmHash(_blockHash, _sendRoot);\\n\\n    // Validate inputs by checking against the stored none confirm data\\n    Node memory node = rollup.getNode(_nodeNum);\\n    require(node.confirmData == confirmData, \\\"!confirmData\\\");\\n\\n    // Validate the node is staked / not in dispute\\n    // NOTE: a dispute can happen at any point within the timeout window, so the closest\\n    // we can get is to ensure the staker count > 0 and that there have been stakes on child\\n    // nodes as well, meaning the node is less likely to be staked incorrectly (and thus less\\n    // likely to be disputed)\\n    require(node.stakerCount > 0 && node.childStakerCount > 0, \\\"!staked\\\");\\n  }\\n\\n  // prove the message was included in the given send root\\n  function _validateMessage(\\n    bytes32 _sendRoot,\\n    bytes32[] calldata _proof,\\n    uint256 _index,\\n    L2Message calldata _msg\\n  ) internal {\\n    // Check that the l2sender is the mirror connector\\n    require(_msg.l2Sender == mirrorConnector, \\\"!mirrorConnector\\\");\\n\\n    // Generate the message sent through from L2 (included in sendRoot)\\n    bytes32 userTx = outbox.calculateItemHash(\\n      _msg.l2Sender,\\n      _msg.to,\\n      _msg.l2Block,\\n      _msg.l1Block,\\n      _msg.l2Timestamp,\\n      _msg.value,\\n      _msg.callData\\n    );\\n\\n    // Prove message is included in the send root\\n    _recordOutputAsSpent(_proof, _index, userTx, _sendRoot);\\n  }\\n\\n  // taken from: https://github.com/OffchainLabs/nitro/blob/208d9d50f250e9b4948f867d3795548256583b17/contracts/src/rollup/RollupLib.sol#L128-L130\\n  function _confirmHash(bytes32 _blockHash, bytes32 _sendRoot) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_blockHash, _sendRoot));\\n  }\\n\\n  // modified from: https://github.com/OffchainLabs/nitro/blob/fbaa96d6d6246b427629be176499e1d5c5013d89/contracts/src/bridge/Outbox.sol#L219-L235\\n  function _recordOutputAsSpent(\\n    bytes32[] memory _proof,\\n    uint256 _index,\\n    bytes32 _item,\\n    bytes32 _sendRoot\\n  ) internal {\\n    require(_proof.length < 256, \\\"proof length\\\");\\n    require((_index >> _proof.length) == 0, \\\"!minimal proof\\\");\\n\\n    // NOTE: in the arbitrum contracts, they check that the message index is not yet spent\\n    // Because the spoke connector calls `processMessage`, which does nothing, it is important\\n    // to check out own internal mapping to ensure the message is not played twice. this forces\\n    // all messages from l2 to be processed using the `processMessageFromRoot` fn path.\\n    require(!processed[_index], \\\"spent\\\");\\n\\n    // Calculate the root\\n    bytes32 calcRoot = outbox.calculateMerkleRoot(_proof, _index, _item);\\n\\n    // Assert the sendRoot is correct\\n    // NOTE: this send root will *not* yet be stored on the `Outbox`\\n    // contract (fraud period has not yet elapsed);\\n    require(calcRoot == _sendRoot, \\\"!proof\\\");\\n\\n    // Mark as spent\\n    processed[_index] = true;\\n  }\\n}\\n\",\"keccak256\":\"0xf9b29dc12f5ed6a99517d1e891e382c46554e930589437f2c79f115145a04606\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"../../shared/interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This interface is what the Connext contract will send and receive messages through.\\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\\n * could be Nomad or a generic AMB under the hood).\\n *\\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\\n *\\n * Flow from transfer from polygon to optimism:\\n * 1. User calls `xcall` with destination specified\\n * 2. This will swap in to the bridge assets\\n * 3. The swapped assets will get burned\\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\\n *    to the root\\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\\n *    mainnet. This is done on all \\\"spoke\\\" domains.\\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\\n *    root from all of the AMBs\\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\\n *      tree root\\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\\n *    process on the `Connext` contract\\n * 9. Takes minted bridge tokens and credits the LP\\n *\\n * AMB requirements:\\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\\n * - Ability to read *our root* from the AMB\\n *\\n * AMBs:\\n * - PoS bridge from polygon\\n * - arbitrum bridge\\n * - optimism bridge\\n * - gnosis chain\\n * - bsc (use multichain for messaging)\\n */\\ninterface IConnector is IProposedOwnable {\\n  // ============ Events ============\\n  /**\\n   * @notice Emitted whenever a message is successfully sent over an AMB\\n   * @param data The contents of the message\\n   * @param encodedData Data used to send the message; specific to connector\\n   * @param caller Who called the function (sent the message)\\n   */\\n  event MessageSent(bytes data, bytes encodedData, address caller);\\n\\n  /**\\n   * @notice Emitted whenever a message is successfully received over an AMB\\n   * @param data The contents of the message\\n   * @param caller Who called the function\\n   */\\n  event MessageProcessed(bytes data, address caller);\\n\\n  // ============ Public fns ============\\n\\n  function processMessage(bytes memory _data) external;\\n\\n  function verifySender(address _expected) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfba166354b442fa72b05be07aed38400b47f68498e8dfdd94fc43df00c401ed1\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IRootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\ninterface IRootManager {\\n  /**\\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to\\n   * spoke domains.\\n   * @dev This must read information for the root from the registered AMBs.\\n   */\\n  function propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData\\n  ) external payable;\\n\\n  /**\\n   * @notice Called by the connectors for various domains on the hub to aggregate their latest\\n   * inbound root.\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function aggregate(uint32 _domain, bytes32 _outbound) external;\\n}\\n\",\"keccak256\":\"0xa895dfaa4baad37a636e7e7e7da72a0a4badfd2d3d8256f975e5101cd5a98236\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/ambs/arbitrum/IArbitrumInbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice Interface for sending L1 -> L2 messagesto Arbitrum.\\n * @dev Arbitrum uses an inbox to aggregate messages going from L1 -> L2, source:\\n * https://github.com/OffchainLabs/nitro/blob/master/contracts/src/bridge/Inbox.sol\\n *\\n */\\ninterface IArbitrumInbox {\\n  function createRetryableTicket(\\n    address destAddr,\\n    uint256 arbTxCallValue,\\n    uint256 maxSubmissionCost,\\n    address submissionRefundAddress,\\n    address valueRefundAddress,\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    bytes calldata data\\n  ) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d4839148bce5c2e4309817f10bae3e1f7a30f71ee1e37078263b30444da2223\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/ambs/arbitrum/IArbitrumOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice Interface for sending L1 -> L2 messagesto Arbitrum.\\n * @dev Arbitrum uses an inbox to aggregate messages going from L1 -> L2, source:\\n * https://github.com/OffchainLabs/nitro/blob/master/contracts/src/bridge/Inbox.sol\\n *\\n */\\ninterface IArbitrumOutbox {\\n  event SendRootUpdated(bytes32 indexed blockHash, bytes32 indexed outputRoot);\\n  event OutBoxTransactionExecuted(\\n    address indexed to,\\n    address indexed l2Sender,\\n    uint256 indexed zero,\\n    uint256 transactionIndex\\n  );\\n\\n  function rollup() external view returns (address); // the rollup contract\\n\\n  // function bridge() external view returns (IBridge); // the bridge contract\\n\\n  function spent(uint256) external view returns (bytes32); // packed spent bitmap\\n\\n  function roots(bytes32) external view returns (bytes32); // maps root hashes => L2 block hash\\n\\n  // solhint-disable-next-line func-name-mixedcase\\n  function OUTBOX_VERSION() external view returns (uint128); // the outbox version\\n\\n  function updateSendRoot(bytes32 sendRoot, bytes32 l2BlockHash) external;\\n\\n  /// @notice When l2ToL1Sender returns a nonzero address, the message was originated by an L2 account\\n  ///         When the return value is zero, that means this is a system message\\n  /// @dev the l2ToL1Sender behaves as the tx.origin, the msg.sender should be validated to protect against reentrancies\\n  function l2ToL1Sender() external view returns (address);\\n\\n  /// @return l2Block return L2 block when the L2 tx was initiated or 0 if no L2 to L1 transaction is active\\n  function l2ToL1Block() external view returns (uint256);\\n\\n  /// @return l1Block return L1 block when the L2 tx was initiated or 0 if no L2 to L1 transaction is active\\n  function l2ToL1EthBlock() external view returns (uint256);\\n\\n  /// @return timestamp return L2 timestamp when the L2 tx was initiated or 0 if no L2 to L1 transaction is active\\n  function l2ToL1Timestamp() external view returns (uint256);\\n\\n  /// @return outputId returns the unique output identifier of the L2 to L1 tx or 0 if no L2 to L1 transaction is active\\n  function l2ToL1OutputId() external view returns (bytes32);\\n\\n  /**\\n   * @notice Executes a messages in an Outbox entry.\\n   * @dev Reverts if dispute period hasn't expired, since the outbox entry\\n   *      is only created once the rollup confirms the respective assertion.\\n   * @dev it is not possible to execute any L2-to-L1 transaction which contains data\\n   *      to a contract address without any code (as enforced by the Bridge contract).\\n   * @param proof Merkle proof of message inclusion in send root\\n   * @param index Merkle path to message\\n   * @param l2Sender sender if original message (i.e., caller of ArbSys.sendTxToL1)\\n   * @param to destination address for L1 contract call\\n   * @param l2Block l2 block number at which sendTxToL1 call was made\\n   * @param l1Block l1 block number at which sendTxToL1 call was made\\n   * @param l2Timestamp l2 Timestamp at which sendTxToL1 call was made\\n   * @param value wei in L1 message\\n   * @param data abi-encoded L1 message data\\n   */\\n  function executeTransaction(\\n    bytes32[] calldata proof,\\n    uint256 index,\\n    address l2Sender,\\n    address to,\\n    uint256 l2Block,\\n    uint256 l1Block,\\n    uint256 l2Timestamp,\\n    uint256 value,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   *  @dev function used to simulate the result of a particular function call from the outbox\\n   *       it is useful for things such as gas estimates. This function includes all costs except for\\n   *       proof validation (which can be considered offchain as a somewhat of a fixed cost - it's\\n   *       not really a fixed cost, but can be treated as so with a fixed overhead for gas estimation).\\n   *       We can't include the cost of proof validation since this is intended to be used to simulate txs\\n   *       that are included in yet-to-be confirmed merkle roots. The simulation entrypoint could instead pretend\\n   *       to confirm a pending merkle root, but that would be less pratical for integrating with tooling.\\n   *       It is only possible to trigger it when the msg sender is address zero, which should be impossible\\n   *       unless under simulation in an eth_call or eth_estimateGas\\n   */\\n  function executeTransactionSimulation(\\n    uint256 index,\\n    address l2Sender,\\n    address to,\\n    uint256 l2Block,\\n    uint256 l1Block,\\n    uint256 l2Timestamp,\\n    uint256 value,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @param index Merkle path to message\\n   * @return true if the message has been spent\\n   */\\n  function isSpent(uint256 index) external view returns (bool);\\n\\n  function calculateItemHash(\\n    address l2Sender,\\n    address to,\\n    uint256 l2Block,\\n    uint256 l1Block,\\n    uint256 l2Timestamp,\\n    uint256 value,\\n    bytes calldata data\\n  ) external pure returns (bytes32);\\n\\n  function calculateMerkleRoot(\\n    bytes32[] memory proof,\\n    uint256 path,\\n    bytes32 item\\n  ) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd047fddc2c35a59593ba5cc717f5ed8ca1437241ba23762a498f55e51629135c\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/ambs/arbitrum/IArbitrumRollup.sol\":{\"content\":\"pragma solidity 0.8.17;\\n\\n// modified from: https://github.com/OffchainLabs/nitro/blob/master/contracts/src/rollup/Node.sol\\nstruct Node {\\n  // Hash of the state of the chain as of this node\\n  bytes32 stateHash;\\n  // Hash of the data that can be challenged\\n  bytes32 challengeHash;\\n  // Hash of the data that will be committed if this node is confirmed\\n  bytes32 confirmData;\\n  // Index of the node previous to this one\\n  uint64 prevNum;\\n  // Deadline at which this node can be confirmed\\n  uint64 deadlineBlock;\\n  // Deadline at which a child of this node can be confirmed\\n  uint64 noChildConfirmedBeforeBlock;\\n  // Number of stakers staked on this node. This includes real stakers and zombies\\n  uint64 stakerCount;\\n  // Number of stakers staked on a child node. This includes real stakers and zombies\\n  uint64 childStakerCount;\\n  // This value starts at zero and is set to a value when the first child is created. After that it is constant until the node is destroyed or the owner destroys pending nodes\\n  uint64 firstChildBlock;\\n  // The number of the latest child of this node to be created\\n  uint64 latestChildNumber;\\n  // The block number when this node was created\\n  uint64 createdAtBlock;\\n  // A hash of all the data needed to determine this node's validity, to protect against reorgs\\n  bytes32 nodeHash;\\n}\\n\\n// modified from: https://github.com/OffchainLabs/nitro/blob/master/contracts/src/rollup/IRollupCore.sol\\ninterface IArbitrumRollup {\\n  /**\\n   * @notice Get the Node for the given index.\\n   */\\n  function getNode(uint64 nodeNum) external view returns (Node memory);\\n}\\n\",\"keccak256\":\"0xb393c714fd6a4592f72fd5ad32732f77f12f6b6399f1033d6d14a7a7b6c98001\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if the ownership delay has not elapsed\\n   */\\n  modifier ownershipDelayElapsed() {\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && _proposedOwnershipTimestamp != 0)\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner ownershipDelayElapsed {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(address(0));\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed ownershipDelayElapsed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n    delete _proposedOwnershipTimestamp;\\n    delete _proposed;\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\",\"keccak256\":\"0xa96eff4fdff55ffa29cda5c18285a9af04c3cbaf55f83696085cdd2251a8d6c0\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0x4ec1aa589d37d0c1eac9966e26d2d3540d1661b81763e678f14d2c6fa0682323\",\"license\":\"MIT\"},\"contracts/shared/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint256 constant TWENTY_SEVEN_BYTES = 8 * 27;\\n  uint256 private constant _27_BYTES_IN_BITS = 8 * 27; // <--- also used this named constant where ever 216 is used.\\n  uint256 private constant LOW_27_BYTES_MASK = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff; // (1 << _27_BYTES_IN_BITS) - 1;\\n\\n  // ========== Custom Errors ===========\\n\\n  error TypedMemView__assertType_typeAssertionFailed(uint256 actual, uint256 expected);\\n  error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice);\\n  error TypedMemView__index_indexMoreThan32Bytes();\\n  error TypedMemView__unsafeCopyTo_nullPointer();\\n  error TypedMemView__unsafeCopyTo_invalidPointer();\\n  error TypedMemView__unsafeCopyTo_identityOOG();\\n  error TypedMemView__assertValid_validityAssertionFailed();\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a invalid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is invalid\\n   */\\n  function isNotValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return true;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := gt(_end, mload(0x40))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    if (isNotValid(memView)) revert TypedMemView__assertValid_validityAssertionFailed();\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      revert TypedMemView__assertType_typeAssertionFailed(uint256(typeOf(memView)), uint256(_expected));\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(and(memView, LOW_27_BYTES_MASK), shl(_27_BYTES_IN_BITS, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    uint256 _uint96Bits = 96;\\n    uint256 _emptyBits = 24;\\n\\n    // Cast params to ensure input is of correct length\\n    uint96 len_ = uint96(_len);\\n    uint96 loc_ = uint96(_loc);\\n    require(len_ == _len && loc_ == _loc, \\\"!truncated\\\");\\n\\n    assembly {\\n      // solium-disable-previous-line security/no-inline-assembly\\n      newView := shl(_uint96Bits, _type) // insert type\\n      newView := shl(_uint96Bits, or(newView, loc_)) // insert loc\\n      newView := shl(_emptyBits, or(newView, len_)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(_27_BYTES_IN_BITS, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 31) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      // \\\"TypedMemView/index - Overran the view. Slice is at {loc} with length {len}. Attempted to index at offset {index} with length {slice},\\n      revert TypedMemView__index_overrun(loc(memView), len(memView), _index, uint256(_bytes));\\n    }\\n    if (_bytes > 32) revert TypedMemView__index_indexMoreThan32Bytes();\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    if (isNull(memView)) revert TypedMemView__unsafeCopyTo_nullPointer();\\n    if (isNotValid(memView)) revert TypedMemView__unsafeCopyTo_invalidPointer();\\n\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    bool res;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      res := staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len)\\n    }\\n    if (!res) revert TypedMemView__unsafeCopyTo_identityOOG();\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    uint256 _len = memViews.length;\\n    for (uint256 i = 0; i < _len; ) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n        ++i;\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x17e335daf53b9cd26f13d480b2f1e4f6babf202e39a14089d97b23b1d5d737ff\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620023c7380380620023c7833981016040819052620000359162000335565b888888888884848484846200004a3362000235565b8463ffffffff16600003620000955760405162461bcd60e51b815260206004820152600c60248201526b32b6b83a3c903237b6b0b4b760a11b60448201526064015b60405180910390fd5b6001600160a01b038216620000e15760405162461bcd60e51b815260206004820152601160248201527032b6b83a3c903937b7ba26b0b730b3b2b960791b60448201526064016200008c565b63ffffffff8086166080526001600160a01b0380851660a05283811660c05290851660e052811615620001195762000119816200029a565b604080516001600160a01b0385811682528481166020830152831681830152905163ffffffff86811692908816917f4f9c27c2fe3f84576ea469d367d044da53c45e951617e8389f2b5ed8db9d25f09181900360600190a35050600480546001600160a01b0319166001600160a01b038e1690811782556040805163cb23bcb560e01b81529051919a5063cb23bcb599508083019850602097509095508590030192508391508790505afa158015620001d6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fc9190620003d5565b600580546001600160a01b0319166001600160a01b039290921691909117905560069290925560075560085550620003fa945050505050565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b805163ffffffff811681146200031857600080fd5b919050565b80516001600160a01b03811681146200031857600080fd5b60008060008060008060008060006101208a8c0312156200035557600080fd5b620003608a62000303565b98506200037060208b0162000303565b97506200038060408b016200031d565b96506200039060608b016200031d565b9550620003a060808b016200031d565b9450620003b060a08b016200031d565b935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b600060208284031215620003e857600080fd5b620003f3826200031d565b9392505050565b60805160a05160c05160e051611f696200045e600039600081816102420152610a11015260008181610349015281816106150152610a42015260008181610526015281816106ca01528181610d8101526114e1015260006102f50152611f696000f3fe6080604052600436106101bb5760003560e01c80639ab0563b116100ec578063ce11e6ab1161008a578063d69f9d6111610064578063d69f9d6114610514578063db1b765914610548578063e2ce3c6414610568578063fbd4006b1461057e57600080fd5b8063ce11e6ab146104b7578063d1851c92146104d7578063d232c220146104f557600080fd5b8063b64d327e116100c6578063b64d327e1461044c578063c5b350df14610462578063cb23bcb514610477578063cc3942831461049757600080fd5b80639ab0563b146103ec5780639d4373a41461040c578063b1f8100d1461042c57600080fd5b806352a9674b1161015957806368742da61161013357806368742da6146103835780636a42b8f8146103a3578063715018a6146103b95780638da5cb5b146103ce57600080fd5b806352a9674b146102e35780635bd11efc146103175780635f61e3ec1461033757600080fd5b80633327998d116101955780633327998d146102795780633cf52ffb1461029b57806348e6fa23146102b05780634ff746f6146102c357600080fd5b806305a79e06146101c75780630fca49cd1461020c578063141684161461023057600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b506101f76101e23660046118e1565b60096020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561021857600080fd5b5061022260065481565b604051908152602001610203565b34801561023c57600080fd5b506102647f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610203565b34801561028557600080fd5b506102996102943660046118e1565b61059e565b005b3480156102a757600080fd5b50600254610222565b6102996102be3660046119c7565b61060a565b3480156102cf57600080fd5b506102996102de366004611a2b565b6106bf565b3480156102ef57600080fd5b506102647f000000000000000000000000000000000000000000000000000000000000000081565b34801561032357600080fd5b50610299610332366004611a7d565b610765565b34801561034357600080fd5b5061036b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610203565b34801561038f57600080fd5b5061029961039e366004611a7d565b61079c565b3480156103af57600080fd5b5062093a80610222565b3480156103c557600080fd5b50610299610819565b3480156103da57600080fd5b506000546001600160a01b031661036b565b3480156103f857600080fd5b506102996104073660046118e1565b6108cd565b34801561041857600080fd5b50610299610427366004611ac8565b610939565b34801561043857600080fd5b50610299610447366004611a7d565b610b08565b34801561045857600080fd5b5061022260075481565b34801561046e57600080fd5b50610299610ba6565b34801561048357600080fd5b5060055461036b906001600160a01b031681565b3480156104a357600080fd5b5060035461036b906001600160a01b031681565b3480156104c357600080fd5b5060045461036b906001600160a01b031681565b3480156104e357600080fd5b506001546001600160a01b031661036b565b34801561050157600080fd5b506000546001600160a01b0316156101f7565b34801561052057600080fd5b5061036b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561055457600080fd5b506101f7610563366004611a7d565b610c16565b34801561057457600080fd5b5061022260085481565b34801561058a57600080fd5b506102996105993660046118e1565b610c27565b6000546001600160a01b031633146105c9576040516311a8a1bb60e31b815260040160405180910390fd5b60065460408051918252602082018390527f8826388bbfa56ae5df40ee5607d9d354fa66549d854624242c77b5af2a5e4c3b910160405180910390a1600655565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106765760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b60448201526064015b60405180910390fd5b6106808282610c93565b7fdcaa37a042a0087de79018c629bbd29cee82ca80bd9be394e1696bf9e93550778282336040516106b393929190611bd8565b60405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107205760405162461bcd60e51b815260040161066d9060208082526004908201526310a0a6a160e11b604082015260600190565b61072981610e9c565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced813360405161075a929190611c16565b60405180910390a150565b6000546001600160a01b03163314610790576040516311a8a1bb60e31b815260040160405180910390fd5b61079981610eb5565b50565b6000546001600160a01b031633146107c7576040516311a8a1bb60e31b815260040160405180910390fd5b476107d28282610f1e565b816001600160a01b03167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d8260405161080d91815260200190565b60405180910390a25050565b6000546001600160a01b03163314610844576040516311a8a1bb60e31b815260040160405180910390fd5b62093a80600254426108569190611c56565b11610874576040516324e0285f60e21b815260040160405180910390fd5b60025460000361089757604051630e4b303f60e21b815260040160405180910390fd5b6001546001600160a01b0316156108c1576040516323295ef960e01b815260040160405180910390fd5b6108cb600061103c565b565b6000546001600160a01b031633146108f8576040516311a8a1bb60e31b815260040160405180910390fd5b60075460408051918252602082018390527f57bffb29c4c6b672a2e334fa00ea826dba286d6cb34d61bebc6c667abb579c62910160405180910390a1600755565b6109448787876110a1565b61095186858585856111f6565b61095e60c0820182611c69565b90506064146109995760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b604482015260640161066d565b60006109fd604460206109f0846109b360c0880188611c69565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506113599050565b62ffffff1916919061137d565b60405163473ec9fd60e11b815263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e7d93fa90604401600060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b505050507fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced81604051602001610ada91815260200190565b60408051601f1981840301815290829052610af6913390611c16565b60405180910390a15050505050505050565b6000546001600160a01b03163314610b33576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610b51575060025415155b15610b6f576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b03808316911603610b9d57604051634a2fb73f60e11b815260040160405180910390fd5b6107998161148c565b6001546001600160a01b03163314610bd1576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610be39190611c56565b11610c01576040516324e0285f60e21b815260040160405180910390fd5b6001546108cb906001600160a01b031661103c565b6000610c21826114da565b92915050565b6000546001600160a01b03163314610c52576040516311a8a1bb60e31b815260040160405180910390fd5b60065460408051918252602082018390527f7f46895145f361561c5e9bbaf45b71269a4399dc3064511f123ebf4c6f04e357910160405180910390a1600855565b8151602014610cce5760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b604482015260640161066d565b6000634ff746f660e01b83604051602401610ce99190611cb7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091528251909150606014610d5e5760405162461bcd60e51b815260206004820152600c60248201526b042c8c2e8c240d8cadccee8d60a31b604482015260640161066d565b600080600084806020019051810190610d779190611cca565b92509250925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663679b6ded34600360009054906101000a90046001600160a01b03166000610dd389600654611520565b6003546007546001600160a01b03909116908190610df2908c90611520565b610dfe8b600854611520565b8e6040518a63ffffffff1660e01b8152600401610e22989796959493929190611cf8565b60206040518083038185885af1158015610e40573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610e659190611d53565b60405190915081907fde92b5b7839f4a2c640f5e3bbb66d415458dadc57a487b0c7fa562ed7c9c896f90600090a250505050505050565b6040516316c2fdb560e21b815260040160405180910390fd5b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b80471015610f6e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610fbb576040519150601f19603f3d011682016040523d82523d6000602084013e610fc0565b606091505b50509050806110375760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066d565b505050565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b604080516020808201849052818301859052825180830384018152606090920190925280519101206000906005546040516324b204d360e21b815267ffffffffffffffff871660048201529192506000916001600160a01b03909116906392c8134c9060240161018060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111499190611d7c565b90508181604001511461118d5760405162461bcd60e51b815260206004820152600c60248201526b21636f6e6669726d4461746160a01b604482015260640161066d565b60008160c0015167ffffffffffffffff161180156111b9575060008160e0015167ffffffffffffffff16115b6111ef5760405162461bcd60e51b8152602060048201526007602482015266085cdd185ad95960ca1b604482015260640161066d565b5050505050565b6003546001600160a01b031661120f6020830183611a7d565b6001600160a01b0316146112585760405162461bcd60e51b815260206004820152601060248201526f10b6b4b93937b921b7b73732b1ba37b960811b604482015260640161066d565b6004546000906001600160a01b0316639f0c04bf6112796020850185611a7d565b6112896040860160208701611a7d565b60408601356060870135608088013560a08901356112aa60c08b018b611c69565b6040518963ffffffff1660e01b81526004016112cd989796959493929190611e4e565b602060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190611d53565b90506113518585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792508591508a9050611536565b505050505050565b81516000906020840161137464ffffffffff851682846116cf565b95945050505050565b60008160ff1660000361139257506000611485565b6113a58460181c6001600160601b031690565b6001600160601b03166113bb60ff841685611eb6565b1115611423576113d48460781c6001600160601b031690565b6113e78560181c6001600160601b031690565b6040516378218d2960e01b81526001600160601b039283166004820152911660248201526044810184905260ff8316606482015260840161066d565b60208260ff1611156114485760405163045df3f960e01b815260040160405180910390fd5b6008820260006114618660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91860151909116925050505b9392505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b60006115057f000000000000000000000000000000000000000000000000000000000000000061170c565b6001600160a01b0316826001600160a01b0316149050919050565b600081831061152f5781611485565b5090919050565b6101008451106115775760405162461bcd60e51b815260206004820152600c60248201526b0e0e4dedecc40d8cadccee8d60a31b604482015260640161066d565b835183901c156115ba5760405162461bcd60e51b815260206004820152600e60248201526d10b6b4b734b6b0b610383937b7b360911b604482015260640161066d565b60008381526009602052604090205460ff16156116015760405162461bcd60e51b81526020600482015260056024820152641cdc195b9d60da1b604482015260640161066d565b60048054604051627436d360e01b81526000926001600160a01b0390921691627436d3916116359189918991899101611ec9565b602060405180830381865afa158015611652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116769190611d53565b90508181146116b05760405162461bcd60e51b815260206004820152600660248201526510b83937b7b360d11b604482015260640161066d565b5050506000908152600960205260409020805460ff1916600117905550565b6000806116dc8385611eb6565b90506040518111156116ec575060005b806000036117015762ffffff19915050611485565b61137485858561186a565b60006001600160a01b03821633146117375760405163253a6fc960e11b815260040160405180910390fd5b6000826001600160a01b031663ab5d89436040518163ffffffff1660e01b8152600401602060405180830381865afa158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b9190611f16565b6001600160a01b03166380648b026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fc9190611f16565b90506001600160a01b038116610c215760405162461bcd60e51b815260206004820152602d60248201527f4c6962417262697472756d4c313a2073797374656d206d65737361676573207760448201526c34ba3437baba1039b2b73232b960991b606482015260840161066d565b60006060601883856001600160601b03821682148015611892575086816001600160601b0316145b6118cb5760405162461bcd60e51b815260206004820152600a602482015269085d1c9d5b98d85d195960b21b604482015260640161066d565b96831b90961790911b90941790931b9392505050565b6000602082840312156118f357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611934576119346118fa565b60405290565b600082601f83011261194b57600080fd5b813567ffffffffffffffff80821115611966576119666118fa565b604051601f8301601f19908116603f0116810190828211818310171561198e5761198e6118fa565b816040528381528660208588010111156119a757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156119da57600080fd5b823567ffffffffffffffff808211156119f257600080fd5b6119fe8683870161193a565b93506020850135915080821115611a1457600080fd5b50611a218582860161193a565b9150509250929050565b600060208284031215611a3d57600080fd5b813567ffffffffffffffff811115611a5457600080fd5b611a608482850161193a565b949350505050565b6001600160a01b038116811461079957600080fd5b600060208284031215611a8f57600080fd5b813561148581611a68565b67ffffffffffffffff8116811461079957600080fd5b600060e08284031215611ac257600080fd5b50919050565b600080600080600080600060c0888a031215611ae357600080fd5b8735611aee81611a9a565b96506020880135955060408801359450606088013567ffffffffffffffff80821115611b1957600080fd5b818a0191508a601f830112611b2d57600080fd5b813581811115611b3c57600080fd5b8b60208260051b8501011115611b5157600080fd5b6020830196508095505060808a0135935060a08a0135915080821115611b7657600080fd5b50611b838a828b01611ab0565b91505092959891949750929550565b6000815180845260005b81811015611bb857602081850181015186830182015201611b9c565b506000602082860101526020601f19601f83011685010191505092915050565b606081526000611beb6060830186611b92565b8281036020840152611bfd8186611b92565b91505060018060a01b0383166040830152949350505050565b604081526000611c296040830185611b92565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c2157610c21611c40565b6000808335601e19843603018112611c8057600080fd5b83018035915067ffffffffffffffff821115611c9b57600080fd5b602001915036819003821315611cb057600080fd5b9250929050565b6020815260006114856020830184611b92565b600080600060608486031215611cdf57600080fd5b8351925060208401519150604084015190509250925092565b600061010060018060a01b03808c1684528a602085015289604085015280891660608501528088166080850152508560a08401528460c08401528060e0840152611d4481840185611b92565b9b9a5050505050505050505050565b600060208284031215611d6557600080fd5b5051919050565b8051611d7781611a9a565b919050565b60006101808284031215611d8f57600080fd5b611d97611910565b825181526020830151602082015260408301516040820152611dbb60608401611d6c565b6060820152611dcc60808401611d6c565b6080820152611ddd60a08401611d6c565b60a0820152611dee60c08401611d6c565b60c0820152611dff60e08401611d6c565b60e0820152610100611e12818501611d6c565b90820152610120611e24848201611d6c565b90820152610140611e36848201611d6c565b90820152610160928301519281019290925250919050565b600060018060a01b03808b168352808a166020840152508760408301528660608301528560808301528460a083015260e060c08301528260e08301526101008385828501376000838501820152601f909301601f191690910190910198975050505050505050565b80820180821115610c2157610c21611c40565b606080825284519082018190526000906020906080840190828801845b82811015611f0257815184529284019290840190600101611ee6565b505050908301949094525060400152919050565b600060208284031215611f2857600080fd5b815161148581611a6856fea26469706673582212202e360d4767dd4b4817476a122d4ff58bdfc9f2542a15a6a466d0b80ca59f4b6364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80639ab0563b116100ec578063ce11e6ab1161008a578063d69f9d6111610064578063d69f9d6114610514578063db1b765914610548578063e2ce3c6414610568578063fbd4006b1461057e57600080fd5b8063ce11e6ab146104b7578063d1851c92146104d7578063d232c220146104f557600080fd5b8063b64d327e116100c6578063b64d327e1461044c578063c5b350df14610462578063cb23bcb514610477578063cc3942831461049757600080fd5b80639ab0563b146103ec5780639d4373a41461040c578063b1f8100d1461042c57600080fd5b806352a9674b1161015957806368742da61161013357806368742da6146103835780636a42b8f8146103a3578063715018a6146103b95780638da5cb5b146103ce57600080fd5b806352a9674b146102e35780635bd11efc146103175780635f61e3ec1461033757600080fd5b80633327998d116101955780633327998d146102795780633cf52ffb1461029b57806348e6fa23146102b05780634ff746f6146102c357600080fd5b806305a79e06146101c75780630fca49cd1461020c578063141684161461023057600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b506101f76101e23660046118e1565b60096020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561021857600080fd5b5061022260065481565b604051908152602001610203565b34801561023c57600080fd5b506102647f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610203565b34801561028557600080fd5b506102996102943660046118e1565b61059e565b005b3480156102a757600080fd5b50600254610222565b6102996102be3660046119c7565b61060a565b3480156102cf57600080fd5b506102996102de366004611a2b565b6106bf565b3480156102ef57600080fd5b506102647f000000000000000000000000000000000000000000000000000000000000000081565b34801561032357600080fd5b50610299610332366004611a7d565b610765565b34801561034357600080fd5b5061036b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610203565b34801561038f57600080fd5b5061029961039e366004611a7d565b61079c565b3480156103af57600080fd5b5062093a80610222565b3480156103c557600080fd5b50610299610819565b3480156103da57600080fd5b506000546001600160a01b031661036b565b3480156103f857600080fd5b506102996104073660046118e1565b6108cd565b34801561041857600080fd5b50610299610427366004611ac8565b610939565b34801561043857600080fd5b50610299610447366004611a7d565b610b08565b34801561045857600080fd5b5061022260075481565b34801561046e57600080fd5b50610299610ba6565b34801561048357600080fd5b5060055461036b906001600160a01b031681565b3480156104a357600080fd5b5060035461036b906001600160a01b031681565b3480156104c357600080fd5b5060045461036b906001600160a01b031681565b3480156104e357600080fd5b506001546001600160a01b031661036b565b34801561050157600080fd5b506000546001600160a01b0316156101f7565b34801561052057600080fd5b5061036b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561055457600080fd5b506101f7610563366004611a7d565b610c16565b34801561057457600080fd5b5061022260085481565b34801561058a57600080fd5b506102996105993660046118e1565b610c27565b6000546001600160a01b031633146105c9576040516311a8a1bb60e31b815260040160405180910390fd5b60065460408051918252602082018390527f8826388bbfa56ae5df40ee5607d9d354fa66549d854624242c77b5af2a5e4c3b910160405180910390a1600655565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106765760405162461bcd60e51b815260206004820152600c60248201526b10b937b7ba26b0b730b3b2b960a11b60448201526064015b60405180910390fd5b6106808282610c93565b7fdcaa37a042a0087de79018c629bbd29cee82ca80bd9be394e1696bf9e93550778282336040516106b393929190611bd8565b60405180910390a15050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107205760405162461bcd60e51b815260040161066d9060208082526004908201526310a0a6a160e11b604082015260600190565b61072981610e9c565b7fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced813360405161075a929190611c16565b60405180910390a150565b6000546001600160a01b03163314610790576040516311a8a1bb60e31b815260040160405180910390fd5b61079981610eb5565b50565b6000546001600160a01b031633146107c7576040516311a8a1bb60e31b815260040160405180910390fd5b476107d28282610f1e565b816001600160a01b03167feaff4b37086828766ad3268786972c0cd24259d4c87a80f9d3963a3c3d999b0d8260405161080d91815260200190565b60405180910390a25050565b6000546001600160a01b03163314610844576040516311a8a1bb60e31b815260040160405180910390fd5b62093a80600254426108569190611c56565b11610874576040516324e0285f60e21b815260040160405180910390fd5b60025460000361089757604051630e4b303f60e21b815260040160405180910390fd5b6001546001600160a01b0316156108c1576040516323295ef960e01b815260040160405180910390fd5b6108cb600061103c565b565b6000546001600160a01b031633146108f8576040516311a8a1bb60e31b815260040160405180910390fd5b60075460408051918252602082018390527f57bffb29c4c6b672a2e334fa00ea826dba286d6cb34d61bebc6c667abb579c62910160405180910390a1600755565b6109448787876110a1565b61095186858585856111f6565b61095e60c0820182611c69565b90506064146109995760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b604482015260640161066d565b60006109fd604460206109f0846109b360c0880188611c69565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506113599050565b62ffffff1916919061137d565b60405163473ec9fd60e11b815263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638e7d93fa90604401600060405180830381600087803b158015610a8e57600080fd5b505af1158015610aa2573d6000803e3d6000fd5b505050507fb3abc57bfeebd2cac918901db582f71972a8e628bccf19f5ae3e3482b98a5ced81604051602001610ada91815260200190565b60408051601f1981840301815290829052610af6913390611c16565b60405180910390a15050505050505050565b6000546001600160a01b03163314610b33576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610b51575060025415155b15610b6f576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b03808316911603610b9d57604051634a2fb73f60e11b815260040160405180910390fd5b6107998161148c565b6001546001600160a01b03163314610bd1576040516311a7f27160e11b815260040160405180910390fd5b62093a8060025442610be39190611c56565b11610c01576040516324e0285f60e21b815260040160405180910390fd5b6001546108cb906001600160a01b031661103c565b6000610c21826114da565b92915050565b6000546001600160a01b03163314610c52576040516311a8a1bb60e31b815260040160405180910390fd5b60065460408051918252602082018390527f7f46895145f361561c5e9bbaf45b71269a4399dc3064511f123ebf4c6f04e357910160405180910390a1600855565b8151602014610cce5760405162461bcd60e51b8152602060048201526007602482015266042d8cadccee8d60cb1b604482015260640161066d565b6000634ff746f660e01b83604051602401610ce99190611cb7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091528251909150606014610d5e5760405162461bcd60e51b815260206004820152600c60248201526b042c8c2e8c240d8cadccee8d60a31b604482015260640161066d565b600080600084806020019051810190610d779190611cca565b92509250925060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663679b6ded34600360009054906101000a90046001600160a01b03166000610dd389600654611520565b6003546007546001600160a01b03909116908190610df2908c90611520565b610dfe8b600854611520565b8e6040518a63ffffffff1660e01b8152600401610e22989796959493929190611cf8565b60206040518083038185885af1158015610e40573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610e659190611d53565b60405190915081907fde92b5b7839f4a2c640f5e3bbb66d415458dadc57a487b0c7fa562ed7c9c896f90600090a250505050505050565b6040516316c2fdb560e21b815260040160405180910390fd5b600354604080516001600160a01b03928316815291831660208301527fc77bec288fc88f168427f2f7da682eadb26cac89d8d591af6e443da98dff2bbc910160405180910390a1600380546001600160a01b0319166001600160a01b0392909216919091179055565b80471015610f6e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066d565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610fbb576040519150601f19603f3d011682016040523d82523d6000602084013e610fc0565b606091505b50509050806110375760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066d565b505050565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b604080516020808201849052818301859052825180830384018152606090920190925280519101206000906005546040516324b204d360e21b815267ffffffffffffffff871660048201529192506000916001600160a01b03909116906392c8134c9060240161018060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111499190611d7c565b90508181604001511461118d5760405162461bcd60e51b815260206004820152600c60248201526b21636f6e6669726d4461746160a01b604482015260640161066d565b60008160c0015167ffffffffffffffff161180156111b9575060008160e0015167ffffffffffffffff16115b6111ef5760405162461bcd60e51b8152602060048201526007602482015266085cdd185ad95960ca1b604482015260640161066d565b5050505050565b6003546001600160a01b031661120f6020830183611a7d565b6001600160a01b0316146112585760405162461bcd60e51b815260206004820152601060248201526f10b6b4b93937b921b7b73732b1ba37b960811b604482015260640161066d565b6004546000906001600160a01b0316639f0c04bf6112796020850185611a7d565b6112896040860160208701611a7d565b60408601356060870135608088013560a08901356112aa60c08b018b611c69565b6040518963ffffffff1660e01b81526004016112cd989796959493929190611e4e565b602060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190611d53565b90506113518585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508792508591508a9050611536565b505050505050565b81516000906020840161137464ffffffffff851682846116cf565b95945050505050565b60008160ff1660000361139257506000611485565b6113a58460181c6001600160601b031690565b6001600160601b03166113bb60ff841685611eb6565b1115611423576113d48460781c6001600160601b031690565b6113e78560181c6001600160601b031690565b6040516378218d2960e01b81526001600160601b039283166004820152911660248201526044810184905260ff8316606482015260840161066d565b60208260ff1611156114485760405163045df3f960e01b815260040160405180910390fd5b6008820260006114618660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91860151909116925050505b9392505050565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b60006115057f000000000000000000000000000000000000000000000000000000000000000061170c565b6001600160a01b0316826001600160a01b0316149050919050565b600081831061152f5781611485565b5090919050565b6101008451106115775760405162461bcd60e51b815260206004820152600c60248201526b0e0e4dedecc40d8cadccee8d60a31b604482015260640161066d565b835183901c156115ba5760405162461bcd60e51b815260206004820152600e60248201526d10b6b4b734b6b0b610383937b7b360911b604482015260640161066d565b60008381526009602052604090205460ff16156116015760405162461bcd60e51b81526020600482015260056024820152641cdc195b9d60da1b604482015260640161066d565b60048054604051627436d360e01b81526000926001600160a01b0390921691627436d3916116359189918991899101611ec9565b602060405180830381865afa158015611652573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116769190611d53565b90508181146116b05760405162461bcd60e51b815260206004820152600660248201526510b83937b7b360d11b604482015260640161066d565b5050506000908152600960205260409020805460ff1916600117905550565b6000806116dc8385611eb6565b90506040518111156116ec575060005b806000036117015762ffffff19915050611485565b61137485858561186a565b60006001600160a01b03821633146117375760405163253a6fc960e11b815260040160405180910390fd5b6000826001600160a01b031663ab5d89436040518163ffffffff1660e01b8152600401602060405180830381865afa158015611777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179b9190611f16565b6001600160a01b03166380648b026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fc9190611f16565b90506001600160a01b038116610c215760405162461bcd60e51b815260206004820152602d60248201527f4c6962417262697472756d4c313a2073797374656d206d65737361676573207760448201526c34ba3437baba1039b2b73232b960991b606482015260840161066d565b60006060601883856001600160601b03821682148015611892575086816001600160601b0316145b6118cb5760405162461bcd60e51b815260206004820152600a602482015269085d1c9d5b98d85d195960b21b604482015260640161066d565b96831b90961790911b90941790931b9392505050565b6000602082840312156118f357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611934576119346118fa565b60405290565b600082601f83011261194b57600080fd5b813567ffffffffffffffff80821115611966576119666118fa565b604051601f8301601f19908116603f0116810190828211818310171561198e5761198e6118fa565b816040528381528660208588010111156119a757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156119da57600080fd5b823567ffffffffffffffff808211156119f257600080fd5b6119fe8683870161193a565b93506020850135915080821115611a1457600080fd5b50611a218582860161193a565b9150509250929050565b600060208284031215611a3d57600080fd5b813567ffffffffffffffff811115611a5457600080fd5b611a608482850161193a565b949350505050565b6001600160a01b038116811461079957600080fd5b600060208284031215611a8f57600080fd5b813561148581611a68565b67ffffffffffffffff8116811461079957600080fd5b600060e08284031215611ac257600080fd5b50919050565b600080600080600080600060c0888a031215611ae357600080fd5b8735611aee81611a9a565b96506020880135955060408801359450606088013567ffffffffffffffff80821115611b1957600080fd5b818a0191508a601f830112611b2d57600080fd5b813581811115611b3c57600080fd5b8b60208260051b8501011115611b5157600080fd5b6020830196508095505060808a0135935060a08a0135915080821115611b7657600080fd5b50611b838a828b01611ab0565b91505092959891949750929550565b6000815180845260005b81811015611bb857602081850181015186830182015201611b9c565b506000602082860101526020601f19601f83011685010191505092915050565b606081526000611beb6060830186611b92565b8281036020840152611bfd8186611b92565b91505060018060a01b0383166040830152949350505050565b604081526000611c296040830185611b92565b905060018060a01b03831660208301529392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610c2157610c21611c40565b6000808335601e19843603018112611c8057600080fd5b83018035915067ffffffffffffffff821115611c9b57600080fd5b602001915036819003821315611cb057600080fd5b9250929050565b6020815260006114856020830184611b92565b600080600060608486031215611cdf57600080fd5b8351925060208401519150604084015190509250925092565b600061010060018060a01b03808c1684528a602085015289604085015280891660608501528088166080850152508560a08401528460c08401528060e0840152611d4481840185611b92565b9b9a5050505050505050505050565b600060208284031215611d6557600080fd5b5051919050565b8051611d7781611a9a565b919050565b60006101808284031215611d8f57600080fd5b611d97611910565b825181526020830151602082015260408301516040820152611dbb60608401611d6c565b6060820152611dcc60808401611d6c565b6080820152611ddd60a08401611d6c565b60a0820152611dee60c08401611d6c565b60c0820152611dff60e08401611d6c565b60e0820152610100611e12818501611d6c565b90820152610120611e24848201611d6c565b90820152610140611e36848201611d6c565b90820152610160928301519281019290925250919050565b600060018060a01b03808b168352808a166020840152508760408301528660608301528560808301528460a083015260e060c08301528260e08301526101008385828501376000838501820152601f909301601f191690910190910198975050505050505050565b80820180821115610c2157610c21611c40565b606080825284519082018190526000906020906080840190828801845b82811015611f0257815184529284019290840190600101611ee6565b505050908301949094525060400152919050565b600060208284031215611f2857600080fd5b815161148581611a6856fea26469706673582212202e360d4767dd4b4817476a122d4ff58bdfc9f2542a15a6a466d0b80ca59f4b6364736f6c63430008110033",
  "devdoc": {
    "events": {
      "GasPriceCapUpdated(uint256,uint256)": {
        "params": {
          "_previous": "The starting value",
          "_updated": "The final value"
        }
      },
      "MaxGasCapUpdated(uint256,uint256)": {
        "params": {
          "_previous": "The starting value",
          "_updated": "The final value"
        }
      },
      "MaxSubmissionCapUpdated(uint256,uint256)": {
        "params": {
          "_previous": "The starting value",
          "_updated": "The final value"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "processMessage(bytes)": {
        "details": "This is called by AMBs to process messages originating from mirror connector"
      },
      "sendMessage(bytes,bytes)": {
        "details": "This is called by the root manager *only* on mainnet to propagate the aggregate root"
      },
      "setGasPriceCap(uint256)": {
        "params": {
          "_updated": "The new value"
        }
      },
      "setMaxGasCap(uint256)": {
        "params": {
          "_updated": "The new value"
        }
      },
      "setMaxSubmissionCostCap(uint256)": {
        "params": {
          "_updated": "The new value"
        }
      },
      "withdrawFunds(address)": {
        "details": "Withdraws the entire balance of the contract.",
        "params": {
          "_to": "The recipient of the funds withdrawn"
        }
      }
    },
    "stateVariables": {
      "gasPriceCap": {
        "details": "The value used in `createRetryableTicket` is the lesser of the cap or a value passed in via `_encodedData` in `_sendMessage`. This value represents L2 gas price bid for immediate L2 execution attempt"
      },
      "maxGasCap": {
        "details": "The value used in `createRetryableTicket` is the lesser of the cap or a value passed in via `_encodedData` in `_sendMessage`. This value represents gas limit for immediate L2 execution attempt"
      },
      "maxSubmissionCostCap": {
        "details": "The value used in `createRetryableTicket` is the lesser of the cap or a value passed in via `_encodedData` in `_sendMessage`. This value represents amount of ETH allocated to pay for the base submission fee"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "FundsWithdrawn(address,uint256)": {
        "notice": "Emitted when funds are withdrawn by the admin"
      },
      "GasPriceCapUpdated(uint256,uint256)": {
        "notice": "Emitted when admin updates the gasPriceCap"
      },
      "MaxGasCapUpdated(uint256,uint256)": {
        "notice": "Emitted when admin updates the maxGasCap"
      },
      "MaxSubmissionCapUpdated(uint256,uint256)": {
        "notice": "Emitted when admin updates the maxSubmissionCap"
      },
      "MessageProcessed(bytes,address)": {
        "notice": "Emitted whenever a message is successfully received over an AMB"
      },
      "MessageSent(bytes,bytes,address)": {
        "notice": "Emitted whenever a message is successfully sent over an AMB"
      }
    },
    "kind": "user",
    "methods": {
      "AMB()": {
        "notice": "Address of the AMB on this domain."
      },
      "DOMAIN()": {
        "notice": "The domain of this Messaging (i.e. Connector) contract."
      },
      "MIRROR_DOMAIN()": {
        "notice": "The domain of the corresponding messaging (i.e. Connector) contract."
      },
      "ROOT_MANAGER()": {
        "notice": "RootManager contract address."
      },
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "gasPriceCap()": {
        "notice": "Sets cap on gasPrice used in `createRetryableTicket`"
      },
      "maxGasCap()": {
        "notice": "Sets cap on maxGas used in `createRetryableTicket`"
      },
      "maxSubmissionCostCap()": {
        "notice": "Sets cap on maxSubmissionCost used in `createRetryableTicket`"
      },
      "mirrorConnector()": {
        "notice": "Connector on L2 for L1 connectors, and vice versa."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "processMessage(bytes)": {
        "notice": "Processes a message received by an AMB"
      },
      "processed(uint256)": {
        "notice": "Tracks which messages have been processed from bridge"
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "sendMessage(bytes,bytes)": {
        "notice": "Sends a message over the amb"
      },
      "setGasPriceCap(uint256)": {
        "notice": "Used (by admin) to update the gasPriceCap"
      },
      "setMaxGasCap(uint256)": {
        "notice": "Used (by admin) to update the maxGasCap"
      },
      "setMaxSubmissionCostCap(uint256)": {
        "notice": "Used (by admin) to update the maxSubmissionCostCap"
      },
      "setMirrorConnector(address)": {
        "notice": "Sets the address of the l2Connector for this domain"
      },
      "verifySender(address)": {
        "notice": "Checks the cross domain sender for a given address"
      },
      "withdrawFunds(address)": {
        "notice": "This function should be callable by owner, and send funds trapped on a connector to the provided recipient."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 49365,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 49367,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 49369,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 34491,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "mirrorConnector",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 36754,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "outbox",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IArbitrumOutbox)46824"
      },
      {
        "astId": 36757,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "rollup",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IArbitrumRollup)46861"
      },
      {
        "astId": 36760,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "maxSubmissionCostCap",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 36763,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "maxGasCap",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 36766,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "gasPriceCap",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 36771,
        "contract": "contracts/messaging/connectors/arbitrum/ArbitrumHubConnector.sol:ArbitrumHubConnector",
        "label": "processed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IArbitrumOutbox)46824": {
        "encoding": "inplace",
        "label": "contract IArbitrumOutbox",
        "numberOfBytes": "20"
      },
      "t_contract(IArbitrumRollup)46861": {
        "encoding": "inplace",
        "label": "contract IArbitrumRollup",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}