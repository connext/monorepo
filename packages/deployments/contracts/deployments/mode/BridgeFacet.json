{
  "address": "0xaC161cF406fF3c70f0BbdaE9cA37076D1c85AF4b",
  "abi": [
    {
      "inputs": [],
      "name": "AssetLogic__getConfig_notRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__getTokenIndexFromStableSwapPool_notExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__handleIncomingAsset_feeOnTransferNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__handleIncomingAsset_nativeAssetNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AssetLogic__handleOutgoingAsset_notNative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__getAdoptedAsset_assetNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__getApprovedCanonicalId_notAllowlisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__nonReentrant_reentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__nonXCallReentrant_reentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BaseConnextFacet__whenNotPaused_paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__addRemote_invalidDomain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__addRemote_invalidRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__addSequencer_alreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__addSequencer_invalidSequencer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__bumpTransfer_noRelayerVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__bumpTransfer_valueIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__excecute_insufficientGas",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_badFastLiquidityStatus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_externalCallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_invalidRouterSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_invalidSequencerSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_maxRoutersExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_notApprovedForPortals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_notReconciled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_notSupportedRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_notSupportedSequencer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_unapprovedSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__execute_wrongDomain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__forceReceiveLocal_notDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__forceUpdateSlippage_invalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__forceUpdateSlippage_notDestination",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__mustHaveRemote_destinationNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__onlyDelegate_notDelegate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__removeSequencer_notApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__setXAppConnectionManager_domainsDontMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__xcall_capReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__xcall_emptyTo",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__xcall_invalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet__xcall_nativeAssetNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgeFacet_xcall__emptyLocalAsset",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AavePortalMintUnbacked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "canonicalDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "receiveLocal",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "slippage",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "originSender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bridgedAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "normalizedIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "canonicalId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct TransferInfo",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "routers",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "routerSignatures",
              "type": "bytes[]"
            },
            {
              "internalType": "address",
              "name": "sequencer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sequencerSignature",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct ExecuteArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "local",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ExternalCalldataExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        }
      ],
      "name": "ForceReceiveLocal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "domain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "remote",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "RemoteAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sequencer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SequencerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sequencer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "SequencerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slippage",
          "type": "uint256"
        }
      ],
      "name": "SlippageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "TransferRelayerFeesIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "XAppConnectionManagerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "originDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "canonicalDomain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "receiveLocal",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bridgedAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "normalizedIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "canonicalId",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct TransferInfo",
          "name": "params",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "local",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "messageBody",
          "type": "bytes"
        }
      ],
      "name": "XCalled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencer",
          "type": "address"
        }
      ],
      "name": "addSequencer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencer",
          "type": "address"
        }
      ],
      "name": "approvedSequencers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "bumpTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_relayerFeeAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_relayerFee",
          "type": "uint256"
        }
      ],
      "name": "bumpTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_router",
          "type": "bytes32"
        }
      ],
      "name": "enrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "canonicalDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "receiveLocal",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "slippage",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "originSender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bridgedAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "normalizedIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "canonicalId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct TransferInfo",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "routers",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "routerSignatures",
              "type": "bytes[]"
            },
            {
              "internalType": "address",
              "name": "sequencer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sequencerSignature",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExecuteArgs",
          "name": "_args",
          "type": "tuple"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "originDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "canonicalDomain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "receiveLocal",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bridgedAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "normalizedIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "canonicalId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct TransferInfo",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "name": "forceReceiveLocal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "originDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "destinationDomain",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "canonicalDomain",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "receiveLocal",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "slippage",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bridgedAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "normalizedIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "canonicalId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct TransferInfo",
          "name": "_params",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "forceUpdateSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        }
      ],
      "name": "remote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sequencer",
          "type": "address"
        }
      ],
      "name": "removeSequencer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "routedTransfers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xAppConnectionManager",
          "type": "address"
        }
      ],
      "name": "setXAppConnectionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        }
      ],
      "name": "transferStatus",
      "outputs": [
        {
          "internalType": "enum DestinationTransferStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xAppConnectionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xcall",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_relayerFee",
          "type": "uint256"
        }
      ],
      "name": "xcall",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_relayerFee",
          "type": "uint256"
        }
      ],
      "name": "xcallIntoLocal",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xcallIntoLocal",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f27fc0c5a728e8290f4e343b9381d1ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AssetLogic__getConfig_notRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__getTokenIndexFromStableSwapPool_notExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__handleIncomingAsset_feeOnTransferNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__handleIncomingAsset_nativeAssetNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AssetLogic__handleOutgoingAsset_notNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__getAdoptedAsset_assetNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__getApprovedCanonicalId_notAllowlisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__nonReentrant_reentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__nonXCallReentrant_reentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BaseConnextFacet__whenNotPaused_paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__addRemote_invalidDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__addRemote_invalidRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__addSequencer_alreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__addSequencer_invalidSequencer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__bumpTransfer_noRelayerVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__bumpTransfer_valueIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__excecute_insufficientGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_badFastLiquidityStatus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_externalCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_invalidRouterSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_invalidSequencerSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_maxRoutersExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_notApprovedForPortals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_notReconciled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_notSupportedRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_notSupportedSequencer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_unapprovedSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__execute_wrongDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__forceReceiveLocal_notDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__forceUpdateSlippage_invalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__forceUpdateSlippage_notDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__mustHaveRemote_destinationNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__onlyDelegate_notDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__removeSequencer_notApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__setXAppConnectionManager_domainsDontMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__xcall_capReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__xcall_emptyTo\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__xcall_invalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet__xcall_nativeAssetNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgeFacet_xcall__emptyLocalAsset\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AavePortalMintUnbacked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"internalType\":\"struct TransferInfo\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"routerSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sequencerSignature\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct ExecuteArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ExternalCalldataExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"name\":\"ForceReceiveLocal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"remote\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"RemoteAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SequencerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SequencerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"SlippageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TransferRelayerFeesIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"XAppConnectionManagerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct TransferInfo\",\"name\":\"params\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"local\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"XCalled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"}],\"name\":\"addSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"}],\"name\":\"approvedSequencers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"bumpTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_relayerFeeAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_relayerFee\",\"type\":\"uint256\"}],\"name\":\"bumpTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_router\",\"type\":\"bytes32\"}],\"name\":\"enrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"internalType\":\"struct TransferInfo\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"routerSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sequencerSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecuteArgs\",\"name\":\"_args\",\"type\":\"tuple\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"internalType\":\"struct TransferInfo\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"forceReceiveLocal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"internalType\":\"struct TransferInfo\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"forceUpdateSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"remote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"}],\"name\":\"removeSequencer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"routedTransfers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xAppConnectionManager\",\"type\":\"address\"}],\"name\":\"setXAppConnectionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"}],\"name\":\"transferStatus\",\"outputs\":[{\"internalType\":\"enum DestinationTransferStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xAppConnectionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xcall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_relayerFee\",\"type\":\"uint256\"}],\"name\":\"xcall\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_relayerFee\",\"type\":\"uint256\"}],\"name\":\"xcallIntoLocal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xcallIntoLocal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AavePortalMintUnbacked(bytes32,address,address,uint256)\":{\"params\":{\"amount\":\"- The amount of asset that was provided by Aave Portal\",\"asset\":\"- The asset that was provided by Aave Portal\",\"router\":\"- The authorized router that used Aave Portal liquidity\",\"transferId\":\"- The unique identifier of the crosschain transaction\"}},\"Executed(bytes32,address,address,((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),address,uint256,address)\":{\"details\":\"`execute` may be called when providing fast liquidity or when processing a reconciled (slow) transfer.\",\"params\":{\"amount\":\"- The amount of transferring asset the recipient address receives or the external call is executed with.\",\"args\":\"- The `ExecuteArgs` provided to the function.\",\"asset\":\"- The asset the recipient is given or the external call is executed with. Should be the adopted asset on that chain.\",\"caller\":\"- The account that called the function.\",\"local\":\"- The local asset that was either supplied by the router for a fast-liquidity transfer or minted by the bridge in a reconciled (slow) transfer. Could be the same as the adopted `asset` param.\",\"to\":\"- The recipient `TransferInfo.to` provided, created as indexed parameter.\",\"transferId\":\"- The unique identifier of the crosschain transfer.\"}},\"ExternalCalldataExecuted(bytes32,bool,bytes)\":{\"params\":{\"returnData\":\"- Return bytes from the IXReceiver\",\"success\":\"- Whether calldata succeeded\",\"transferId\":\"- The unique identifier of the crosschain transfer.\"}},\"ForceReceiveLocal(bytes32)\":{\"params\":{\"transferId\":\"- The unique identifier of the crosschain transaction\"}},\"RemoteAdded(uint32,address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"domain\":\"- The domain the remote instance is on\",\"remote\":\"- The address of the remote instance\"}},\"SequencerAdded(address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"sequencer\":\"- The sequencer address to be added or removed\"}},\"SequencerRemoved(address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"sequencer\":\"- The sequencer address to be added or removed\"}},\"SlippageUpdated(bytes32,uint256)\":{\"params\":{\"slippage\":\"- The updated slippage boundary\",\"transferId\":\"- The unique identifier of the crosschain transaction\"}},\"TransferRelayerFeesIncreased(bytes32,uint256,address,address)\":{\"params\":{\"asset\":\"- The asset the fee was increased with\",\"caller\":\"- The account that called the function\",\"increase\":\"- The additional amount fees increased by\",\"transferId\":\"- The unique identifier of the crosschain transaction\"}},\"XAppConnectionManagerSet(address,address)\":{\"params\":{\"caller\":\"- The account that called the function\",\"updated\":\"- The updated address\"}},\"XCalled(bytes32,uint256,bytes32,(uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address,uint256,address,bytes)\":{\"params\":{\"amount\":\"- The amount sent in with xcall\",\"asset\":\"- The asset sent in with xcall\",\"local\":\"- The local asset that is controlled by the bridge and can be burned/minted\",\"messageHash\":\"- The hash of the message bytes (containing all transfer info) that were bridged.\",\"nonce\":\"- The bridge nonce of the transfer on the origin domain.\",\"params\":\"- The `TransferInfo` provided to the function.\",\"transferId\":\"- The unique identifier of the crosschain transfer.\"}}},\"kind\":\"dev\",\"methods\":{\"addSequencer(address)\":{\"params\":{\"_sequencer\":\"- The sequencer address to add.\"}},\"bumpTransfer(bytes32)\":{\"params\":{\"_transferId\":\"- The unique identifier of the crosschain transaction\"}},\"bumpTransfer(bytes32,address,uint256)\":{\"params\":{\"_relayerFee\":\"- The amount you want to bump transfer fee with\",\"_relayerFeeAsset\":\"- The asset you are bumping fee with\",\"_transferId\":\"- The unique identifier of the crosschain transaction\"}},\"enrollRemoteRouter(uint32,bytes32)\":{\"params\":{\"_domain\":\"The domain of the remote xApp Router\",\"_router\":\"The address of the remote xApp Router\"}},\"execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))\":{\"details\":\"Can be called before or after `handle` [reconcile] is called (regarding the same transfer), depending on whether the fast liquidity route (i.e. funds provided by routers) is being used for this transfer. As a result, executed calldata (including properties like `originSender`) may or may not be verified depending on whether the reconcile has been completed (i.e. the optimistic confirmation period has elapsed).\",\"params\":{\"_args\":\"- ExecuteArgs arguments.\"},\"returns\":{\"_0\":\"bytes32 - The transfer ID of the crosschain transfer. Should match the xcall's transfer ID in order for reconciliation to occur.\"}},\"forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))\":{\"details\":\"Calldata will still be executed with the local asset. `IXReceiver` contracts should be able to handle local assets in event of failures.\",\"params\":{\"_params\":\"TransferInfo associated with the transfer\"}},\"forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)\":{\"params\":{\"_params\":\"TransferInfo associated with the transfer\",\"_slippage\":\"The updated slippage\"}},\"removeSequencer(address)\":{\"params\":{\"_sequencer\":\"- The sequencer address to remove.\"}},\"setXAppConnectionManager(address)\":{\"params\":{\"_xAppConnectionManager\":\"The address of the xAppConnectionManager contract\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AavePortalMintUnbacked(bytes32,address,address,uint256)\":{\"notice\":\"Emitted when a router used Aave Portal liquidity for fast transfer\"},\"Executed(bytes32,address,address,((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),address,uint256,address)\":{\"notice\":\"Emitted when `execute` is called on the destination domain of a transfer.\"},\"ExternalCalldataExecuted(bytes32,bool,bytes)\":{\"notice\":\"Emitted when a transfer has its external data executed\"},\"ForceReceiveLocal(bytes32)\":{\"notice\":\"Emitted when `forceReceiveLocal` is called by a user-delegated EOA on the destination domain\"},\"RemoteAdded(uint32,address,address)\":{\"notice\":\"Emitted when a new remote instance is added\"},\"SequencerAdded(address,address)\":{\"notice\":\"Emitted when a sequencer is added or removed from allowlists\"},\"SequencerRemoved(address,address)\":{\"notice\":\"Emitted when a sequencer is added or removed from allowlists\"},\"SlippageUpdated(bytes32,uint256)\":{\"notice\":\"Emitted when `forceUpdateSlippage` is called by user-delegated EOA on the destination domain\"},\"TransferRelayerFeesIncreased(bytes32,uint256,address,address)\":{\"notice\":\"Emitted when `_bumpTransfer` is called by an user on the origin domain both in `xcall` and `bumpTransfer`\"},\"XAppConnectionManagerSet(address,address)\":{\"notice\":\"Emitted `xAppConnectionManager` is updated\"},\"XCalled(bytes32,uint256,bytes32,(uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address,uint256,address,bytes)\":{\"notice\":\"Emitted when `xcall` is called on the origin domain of a transfer.\"}},\"kind\":\"user\",\"methods\":{\"addSequencer(address)\":{\"notice\":\"Used to add an approved sequencer to the allowlist.\"},\"bumpTransfer(bytes32)\":{\"notice\":\"Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\"},\"bumpTransfer(bytes32,address,uint256)\":{\"notice\":\"Anyone can call this function on the origin domain t o increase the relayer fee for a given transfer using a specific asset.\"},\"enrollRemoteRouter(uint32,bytes32)\":{\"notice\":\"Register the address of a Router contract for the same xApp on a remote chain\"},\"execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))\":{\"notice\":\"Called on a destination domain to disburse correct assets to end recipient and execute any included calldata.\"},\"forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))\":{\"notice\":\"Allows a user-specified account to withdraw the local asset directly\"},\"forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)\":{\"notice\":\"Allows a user-specified account to update the slippage they are willing to take on destination transfers.\"},\"removeSequencer(address)\":{\"notice\":\"Used to remove an approved sequencer from the allowlist.\"},\"setXAppConnectionManager(address)\":{\"notice\":\"Modify the contract the xApp uses to validate Replica contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/connext/facets/BridgeFacet.sol\":\"BridgeFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/core/connext/facets/BaseConnextFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {TransferInfo, AppStorage, Role} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {AssetLogic} from \\\"../libraries/AssetLogic.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\n\\ncontract BaseConnextFacet {\\n  AppStorage internal s;\\n\\n  // ========== Custom Errors ===========\\n\\n  error BaseConnextFacet__onlyOwner_notOwner();\\n  error BaseConnextFacet__onlyProposed_notProposedOwner();\\n  error BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter();\\n  error BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher();\\n  error BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin();\\n  error BaseConnextFacet__whenNotPaused_paused();\\n  error BaseConnextFacet__nonReentrant_reentrantCall();\\n  error BaseConnextFacet__nonXCallReentrant_reentrantCall();\\n  error BaseConnextFacet__getAdoptedAsset_assetNotFound();\\n  error BaseConnextFacet__getApprovedCanonicalId_notAllowlisted();\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and making it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    if (s._status == Constants.ENTERED) revert BaseConnextFacet__nonReentrant_reentrantCall();\\n\\n    // Any calls to nonReentrant after this point will fail\\n    s._status = Constants.ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    s._status = Constants.NOT_ENTERED;\\n  }\\n\\n  modifier nonXCallReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    if (s._xcallStatus == Constants.ENTERED) revert BaseConnextFacet__nonXCallReentrant_reentrantCall();\\n\\n    // Any calls to nonReentrant after this point will fail\\n    s._xcallStatus = Constants.ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    s._xcallStatus = Constants.NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (LibDiamond.contractOwner() != msg.sender) revert BaseConnextFacet__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (s._proposed != msg.sender) revert BaseConnextFacet__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner and router role.\\n   */\\n  modifier onlyOwnerOrRouter() {\\n    if (LibDiamond.contractOwner() != msg.sender && s.roles[msg.sender] != Role.RouterAdmin)\\n      revert BaseConnextFacet__onlyOwnerOrRouter_notOwnerOrRouter();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner and watcher role.\\n   */\\n  modifier onlyOwnerOrWatcher() {\\n    if (LibDiamond.contractOwner() != msg.sender && s.roles[msg.sender] != Role.Watcher)\\n      revert BaseConnextFacet__onlyOwnerOrWatcher_notOwnerOrWatcher();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner and admin role.\\n   */\\n  modifier onlyOwnerOrAdmin() {\\n    if (LibDiamond.contractOwner() != msg.sender && s.roles[msg.sender] != Role.Admin)\\n      revert BaseConnextFacet__onlyOwnerOrAdmin_notOwnerOrAdmin();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if all functionality is paused\\n   */\\n  modifier whenNotPaused() {\\n    if (s._paused) revert BaseConnextFacet__whenNotPaused_paused();\\n    _;\\n  }\\n\\n  // ============ Internal functions ============\\n  /**\\n   * @notice Indicates if the router allowlist has been removed\\n   */\\n  function _isRouterAllowlistRemoved() internal view returns (bool) {\\n    return LibDiamond.contractOwner() == address(0) || s._routerAllowlistRemoved;\\n  }\\n\\n  /**\\n   * @notice Returns the adopted assets for given canonical information\\n   */\\n  function _getAdoptedAsset(bytes32 _key) internal view returns (address) {\\n    address adopted = AssetLogic.getConfig(_key).adopted;\\n    if (adopted == address(0)) {\\n      revert BaseConnextFacet__getAdoptedAsset_assetNotFound();\\n    }\\n    return adopted;\\n  }\\n\\n  /**\\n   * @notice Returns the adopted assets for given canonical information\\n   */\\n  function _getRepresentationAsset(bytes32 _key) internal view returns (address) {\\n    address representation = AssetLogic.getConfig(_key).representation;\\n    // If this is address(0), then there is no mintable token for this asset on this\\n    // domain\\n    return representation;\\n  }\\n\\n  /**\\n   * @notice Calculates a transferId\\n   */\\n  function _calculateTransferId(TransferInfo memory _params) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(_params));\\n  }\\n\\n  /**\\n   * @notice Internal utility function that combines\\n   *         `_origin` and `_nonce`.\\n   * @dev Both origin and nonce should be less than 2^32 - 1\\n   * @param _origin Domain of chain where the transfer originated\\n   * @param _nonce The unique identifier for the message from origin to destination\\n   * @return Returns (`_origin` << 32) & `_nonce`\\n   */\\n  function _originAndNonce(uint32 _origin, uint32 _nonce) internal pure returns (uint64) {\\n    return (uint64(_origin) << 32) | _nonce;\\n  }\\n\\n  function _getLocalAsset(\\n    bytes32 _key,\\n    bytes32 _id,\\n    uint32 _domain\\n  ) internal view returns (address) {\\n    return AssetLogic.getLocalAsset(_key, _id, _domain, s);\\n  }\\n\\n  function _getCanonicalTokenId(address _candidate) internal view returns (TokenId memory) {\\n    return AssetLogic.getCanonicalTokenId(_candidate, s);\\n  }\\n\\n  function _getLocalAndAdoptedToken(\\n    bytes32 _key,\\n    bytes32 _id,\\n    uint32 _domain\\n  ) internal view returns (address, address) {\\n    address _local = AssetLogic.getLocalAsset(_key, _id, _domain, s);\\n    address _adopted = _getAdoptedAsset(_key);\\n    return (_local, _adopted);\\n  }\\n\\n  function _isLocalOrigin(address _token) internal view returns (bool) {\\n    return AssetLogic.isLocalOrigin(_token, s);\\n  }\\n\\n  function _getApprovedCanonicalId(address _candidate) internal view returns (TokenId memory, bytes32) {\\n    TokenId memory _canonical = _getCanonicalTokenId(_candidate);\\n    bytes32 _key = AssetLogic.calculateCanonicalHash(_canonical.id, _canonical.domain);\\n    if (!AssetLogic.getConfig(_key).approval) {\\n      revert BaseConnextFacet__getApprovedCanonicalId_notAllowlisted();\\n    }\\n    return (_canonical, _key);\\n  }\\n}\\n\",\"keccak256\":\"0x94069cb811ec1c79b2c31080a6a299797684f43a9e7df7ef034a58942433b98c\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/facets/BridgeFacet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ExcessivelySafeCall} from \\\"../../../shared/libraries/ExcessivelySafeCall.sol\\\";\\nimport {TypedMemView} from \\\"../../../shared/libraries/TypedMemView.sol\\\";\\nimport {TypeCasts} from \\\"../../../shared/libraries/TypeCasts.sol\\\";\\n\\nimport {IOutbox} from \\\"../../../messaging/interfaces/IOutbox.sol\\\";\\nimport {IConnectorManager} from \\\"../../../messaging/interfaces/IConnectorManager.sol\\\";\\n\\nimport {BaseConnextFacet} from \\\"./BaseConnextFacet.sol\\\";\\n\\nimport {AssetLogic} from \\\"../libraries/AssetLogic.sol\\\";\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus, TokenConfig} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {BridgeMessage} from \\\"../libraries/BridgeMessage.sol\\\";\\nimport {Constants} from \\\"../libraries/Constants.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\nimport {IXReceiver} from \\\"../interfaces/IXReceiver.sol\\\";\\nimport {IAavePool} from \\\"../interfaces/IAavePool.sol\\\";\\nimport {IBridgeToken} from \\\"../interfaces/IBridgeToken.sol\\\";\\n\\n/**\\n * @notice Defines the fields needed for an asset transfer\\n * @param asset - The address of the asset\\n * @param amount - The amount of the asset\\n */\\nstruct AssetTransfer {\\n  address asset;\\n  uint256 amount;\\n}\\n\\ncontract BridgeFacet is BaseConnextFacet {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n  using BridgeMessage for bytes29;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  // ========== Custom Errors ===========\\n\\n  error BridgeFacet__addRemote_invalidRouter();\\n  error BridgeFacet__addRemote_invalidDomain();\\n  error BridgeFacet__onlyDelegate_notDelegate();\\n  error BridgeFacet__addSequencer_invalidSequencer();\\n  error BridgeFacet__addSequencer_alreadyApproved();\\n  error BridgeFacet__removeSequencer_notApproved();\\n  error BridgeFacet__setXAppConnectionManager_domainsDontMatch();\\n  error BridgeFacet__xcall_nativeAssetNotSupported();\\n  error BridgeFacet__xcall_emptyTo();\\n  error BridgeFacet__xcall_invalidSlippage();\\n  error BridgeFacet_xcall__emptyLocalAsset();\\n  error BridgeFacet__xcall_capReached();\\n  error BridgeFacet__execute_unapprovedSender();\\n  error BridgeFacet__execute_wrongDomain();\\n  error BridgeFacet__execute_notSupportedSequencer();\\n  error BridgeFacet__execute_invalidSequencerSignature();\\n  error BridgeFacet__execute_maxRoutersExceeded();\\n  error BridgeFacet__execute_notSupportedRouter();\\n  error BridgeFacet__execute_invalidRouterSignature();\\n  error BridgeFacet__execute_notApprovedForPortals();\\n  error BridgeFacet__execute_badFastLiquidityStatus();\\n  error BridgeFacet__execute_notReconciled();\\n  error BridgeFacet__execute_externalCallFailed();\\n  error BridgeFacet__excecute_insufficientGas();\\n  error BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn();\\n  error BridgeFacet__bumpTransfer_valueIsZero();\\n  error BridgeFacet__bumpTransfer_noRelayerVault();\\n  error BridgeFacet__forceUpdateSlippage_invalidSlippage();\\n  error BridgeFacet__forceUpdateSlippage_notDestination();\\n  error BridgeFacet__forceReceiveLocal_notDestination();\\n  error BridgeFacet__mustHaveRemote_destinationNotSupported();\\n\\n  // ============ Properties ============\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when `xcall` is called on the origin domain of a transfer.\\n   * @param transferId - The unique identifier of the crosschain transfer.\\n   * @param nonce - The bridge nonce of the transfer on the origin domain.\\n   * @param messageHash - The hash of the message bytes (containing all transfer info) that were bridged.\\n   * @param params - The `TransferInfo` provided to the function.\\n   * @param asset - The asset sent in with xcall\\n   * @param amount - The amount sent in with xcall\\n   * @param local - The local asset that is controlled by the bridge and can be burned/minted\\n   */\\n  event XCalled(\\n    bytes32 indexed transferId,\\n    uint256 indexed nonce,\\n    bytes32 indexed messageHash,\\n    TransferInfo params,\\n    address asset,\\n    uint256 amount,\\n    address local,\\n    bytes messageBody\\n  );\\n\\n  /**\\n   * @notice Emitted when a transfer has its external data executed\\n   * @param transferId - The unique identifier of the crosschain transfer.\\n   * @param success - Whether calldata succeeded\\n   * @param returnData - Return bytes from the IXReceiver\\n   */\\n  event ExternalCalldataExecuted(bytes32 indexed transferId, bool success, bytes returnData);\\n\\n  /**\\n   * @notice Emitted when `execute` is called on the destination domain of a transfer.\\n   * @dev `execute` may be called when providing fast liquidity or when processing a reconciled (slow) transfer.\\n   * @param transferId - The unique identifier of the crosschain transfer.\\n   * @param to - The recipient `TransferInfo.to` provided, created as indexed parameter.\\n   * @param asset - The asset the recipient is given or the external call is executed with. Should be the\\n   * adopted asset on that chain.\\n   * @param args - The `ExecuteArgs` provided to the function.\\n   * @param local - The local asset that was either supplied by the router for a fast-liquidity transfer or\\n   * minted by the bridge in a reconciled (slow) transfer. Could be the same as the adopted `asset` param.\\n   * @param amount - The amount of transferring asset the recipient address receives or the external call is\\n   * executed with.\\n   * @param caller - The account that called the function.\\n   */\\n  event Executed(\\n    bytes32 indexed transferId,\\n    address indexed to,\\n    address indexed asset,\\n    ExecuteArgs args,\\n    address local,\\n    uint256 amount,\\n    address caller\\n  );\\n\\n  /**\\n   * @notice Emitted when `_bumpTransfer` is called by an user on the origin domain both in\\n   * `xcall` and `bumpTransfer`\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param increase - The additional amount fees increased by\\n   * @param asset - The asset the fee was increased with\\n   * @param caller - The account that called the function\\n   */\\n  event TransferRelayerFeesIncreased(bytes32 indexed transferId, uint256 increase, address asset, address caller);\\n\\n  /**\\n   * @notice Emitted when `forceUpdateSlippage` is called by user-delegated EOA\\n   * on the destination domain\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param slippage - The updated slippage boundary\\n   */\\n  event SlippageUpdated(bytes32 indexed transferId, uint256 slippage);\\n\\n  /**\\n   * @notice Emitted when `forceReceiveLocal` is called by a user-delegated EOA\\n   * on the destination domain\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   */\\n  event ForceReceiveLocal(bytes32 indexed transferId);\\n\\n  /**\\n   * @notice Emitted when a router used Aave Portal liquidity for fast transfer\\n   * @param transferId - The unique identifier of the crosschain transaction\\n   * @param router - The authorized router that used Aave Portal liquidity\\n   * @param asset - The asset that was provided by Aave Portal\\n   * @param amount - The amount of asset that was provided by Aave Portal\\n   */\\n  event AavePortalMintUnbacked(bytes32 indexed transferId, address indexed router, address asset, uint256 amount);\\n\\n  /**\\n   * @notice Emitted when a new remote instance is added\\n   * @param domain - The domain the remote instance is on\\n   * @param remote - The address of the remote instance\\n   * @param caller - The account that called the function\\n   */\\n  event RemoteAdded(uint32 domain, address remote, address caller);\\n\\n  /**\\n   * @notice Emitted when a sequencer is added or removed from allowlists\\n   * @param sequencer - The sequencer address to be added or removed\\n   * @param caller - The account that called the function\\n   */\\n  event SequencerAdded(address sequencer, address caller);\\n\\n  /**\\n   * @notice Emitted when a sequencer is added or removed from allowlists\\n   * @param sequencer - The sequencer address to be added or removed\\n   * @param caller - The account that called the function\\n   */\\n  event SequencerRemoved(address sequencer, address caller);\\n\\n  /**\\n   * @notice Emitted `xAppConnectionManager` is updated\\n   * @param updated - The updated address\\n   * @param caller - The account that called the function\\n   */\\n  event XAppConnectionManagerSet(address updated, address caller);\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Only accept a transfer's designated delegate.\\n   * @param _params The TransferInfo of the transfer.\\n   */\\n  modifier onlyDelegate(TransferInfo calldata _params) {\\n    if (_params.delegate != msg.sender) revert BridgeFacet__onlyDelegate_notDelegate();\\n    _;\\n  }\\n\\n  // ============ Getters ============\\n\\n  function routedTransfers(bytes32 _transferId) public view returns (address[] memory) {\\n    return s.routedTransfers[_transferId];\\n  }\\n\\n  function transferStatus(bytes32 _transferId) public view returns (DestinationTransferStatus) {\\n    return s.transferStatus[_transferId];\\n  }\\n\\n  function remote(uint32 _domain) public view returns (address) {\\n    return TypeCasts.bytes32ToAddress(s.remotes[_domain]);\\n  }\\n\\n  function domain() public view returns (uint32) {\\n    return s.domain;\\n  }\\n\\n  function nonce() public view returns (uint256) {\\n    return s.nonce;\\n  }\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool) {\\n    return s.approvedSequencers[_sequencer];\\n  }\\n\\n  function xAppConnectionManager() public view returns (address) {\\n    return address(s.xAppConnectionManager);\\n  }\\n\\n  // ============ Admin Functions ==============\\n\\n  /**\\n   * @notice Used to add an approved sequencer to the allowlist.\\n   * @param _sequencer - The sequencer address to add.\\n   */\\n  function addSequencer(address _sequencer) external onlyOwnerOrAdmin {\\n    if (_sequencer == address(0)) revert BridgeFacet__addSequencer_invalidSequencer();\\n\\n    if (s.approvedSequencers[_sequencer]) revert BridgeFacet__addSequencer_alreadyApproved();\\n    s.approvedSequencers[_sequencer] = true;\\n\\n    emit SequencerAdded(_sequencer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Used to remove an approved sequencer from the allowlist.\\n   * @param _sequencer - The sequencer address to remove.\\n   */\\n  function removeSequencer(address _sequencer) external onlyOwnerOrAdmin {\\n    if (!s.approvedSequencers[_sequencer]) revert BridgeFacet__removeSequencer_notApproved();\\n    delete s.approvedSequencers[_sequencer];\\n\\n    emit SequencerRemoved(_sequencer, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Modify the contract the xApp uses to validate Replica contracts\\n   * @param _xAppConnectionManager The address of the xAppConnectionManager contract\\n   */\\n  function setXAppConnectionManager(address _xAppConnectionManager) external onlyOwnerOrAdmin {\\n    IConnectorManager manager = IConnectorManager(_xAppConnectionManager);\\n    if (manager.localDomain() != s.domain) {\\n      revert BridgeFacet__setXAppConnectionManager_domainsDontMatch();\\n    }\\n    emit XAppConnectionManagerSet(_xAppConnectionManager, msg.sender);\\n    s.xAppConnectionManager = manager;\\n  }\\n\\n  /**\\n   * @notice Register the address of a Router contract for the same xApp on a remote chain\\n   * @param _domain The domain of the remote xApp Router\\n   * @param _router The address of the remote xApp Router\\n   */\\n  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external onlyOwnerOrAdmin {\\n    if (_router == bytes32(\\\"\\\")) revert BridgeFacet__addRemote_invalidRouter();\\n\\n    // Make sure we aren't setting the current domain (or an empty one) as the connextion.\\n    if (_domain == 0 || _domain == s.domain) {\\n      revert BridgeFacet__addRemote_invalidDomain();\\n    }\\n\\n    s.remotes[_domain] = _router;\\n    emit RemoteAdded(_domain, TypeCasts.bytes32ToAddress(_router), msg.sender);\\n  }\\n\\n  // ============ Public Functions: Bridge ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable nonXCallReentrant returns (bytes32) {\\n    // NOTE: Here, we fill in as much information as we can for the TransferInfo.\\n    // Some info is left blank and will be assigned in the internal `_xcall` function (e.g.\\n    // `normalizedIn`, `bridgedAmt`, canonical info, etc).\\n    TransferInfo memory params = TransferInfo({\\n      to: _to,\\n      callData: _callData,\\n      originDomain: s.domain,\\n      destinationDomain: _destination,\\n      delegate: _delegate,\\n      // `receiveLocal: false` indicates we should always deliver the adopted asset on the\\n      // destination chain, swapping from the local asset if needed.\\n      receiveLocal: false,\\n      slippage: _slippage,\\n      originSender: msg.sender,\\n      // The following values should be assigned in _xcall.\\n      nonce: 0,\\n      canonicalDomain: 0,\\n      bridgedAmt: 0,\\n      normalizedIn: 0,\\n      canonicalId: bytes32(0)\\n    });\\n    return _xcall(params, AssetTransfer(_asset, _amount), AssetTransfer(address(0), msg.value));\\n  }\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable nonXCallReentrant returns (bytes32) {\\n    // NOTE: Here, we fill in as much information as we can for the TransferInfo.\\n    // Some info is left blank and will be assigned in the internal `_xcall` function (e.g.\\n    // `normalizedIn`, `bridgedAmt`, canonical info, etc).\\n    TransferInfo memory params = TransferInfo({\\n      to: _to,\\n      callData: _callData,\\n      originDomain: s.domain,\\n      destinationDomain: _destination,\\n      delegate: _delegate,\\n      // `receiveLocal: true` indicates we should always deliver the local asset on the\\n      // destination chain, and NOT swap into any adopted assets.\\n      receiveLocal: true,\\n      slippage: _slippage,\\n      originSender: msg.sender,\\n      // The following values should be assigned in _xcall.\\n      nonce: 0,\\n      canonicalDomain: 0,\\n      bridgedAmt: 0,\\n      normalizedIn: 0,\\n      canonicalId: bytes32(0)\\n    });\\n    return _xcall(params, AssetTransfer(_asset, _amount), AssetTransfer(address(0), msg.value));\\n  }\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData,\\n    uint256 _relayerFee\\n  ) external nonXCallReentrant returns (bytes32) {\\n    // NOTE: Here, we fill in as much information as we can for the TransferInfo.\\n    // Some info is left blank and will be assigned in the internal `_xcall` function (e.g.\\n    // `normalizedIn`, `bridgedAmt`, canonical info, etc).\\n    TransferInfo memory params = TransferInfo({\\n      to: _to,\\n      callData: _callData,\\n      originDomain: s.domain,\\n      destinationDomain: _destination,\\n      delegate: _delegate,\\n      // `receiveLocal: false` indicates we should always deliver the adopted asset on the\\n      // destination chain, swapping from the local asset if needed.\\n      receiveLocal: false,\\n      slippage: _slippage,\\n      originSender: msg.sender,\\n      // The following values should be assigned in _xcall.\\n      nonce: 0,\\n      canonicalDomain: 0,\\n      bridgedAmt: 0,\\n      normalizedIn: 0,\\n      canonicalId: bytes32(0)\\n    });\\n    return _xcall(params, AssetTransfer(_asset, _amount), AssetTransfer(_asset, _relayerFee));\\n  }\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData,\\n    uint256 _relayerFee\\n  ) external nonXCallReentrant returns (bytes32) {\\n    // NOTE: Here, we fill in as much information as we can for the TransferInfo.\\n    // Some info is left blank and will be assigned in the internal `_xcall` function (e.g.\\n    // `normalizedIn`, `bridgedAmt`, canonical info, etc).\\n    TransferInfo memory params = TransferInfo({\\n      to: _to,\\n      callData: _callData,\\n      originDomain: s.domain,\\n      destinationDomain: _destination,\\n      delegate: _delegate,\\n      // `receiveLocal: true` indicates we should always deliver the local asset on the\\n      // destination chain, and NOT swap into any adopted assets.\\n      receiveLocal: true,\\n      slippage: _slippage,\\n      originSender: msg.sender,\\n      // The following values should be assigned in _xcall.\\n      nonce: 0,\\n      canonicalDomain: 0,\\n      bridgedAmt: 0,\\n      normalizedIn: 0,\\n      canonicalId: bytes32(0)\\n    });\\n    return _xcall(params, AssetTransfer(_asset, _amount), AssetTransfer(_asset, _relayerFee));\\n  }\\n\\n  /**\\n   * @notice Called on a destination domain to disburse correct assets to end recipient and execute any included\\n   * calldata.\\n   *\\n   * @dev Can be called before or after `handle` [reconcile] is called (regarding the same transfer), depending on\\n   * whether the fast liquidity route (i.e. funds provided by routers) is being used for this transfer. As a result,\\n   * executed calldata (including properties like `originSender`) may or may not be verified depending on whether the\\n   * reconcile has been completed (i.e. the optimistic confirmation period has elapsed).\\n   *\\n   * @param _args - ExecuteArgs arguments.\\n   * @return bytes32 - The transfer ID of the crosschain transfer. Should match the xcall's transfer ID in order for\\n   * reconciliation to occur.\\n   */\\n  function execute(ExecuteArgs calldata _args) external nonReentrant whenNotPaused returns (bytes32) {\\n    (bytes32 transferId, DestinationTransferStatus status) = _executeSanityChecks(_args);\\n\\n    DestinationTransferStatus updated = status == DestinationTransferStatus.Reconciled\\n      ? DestinationTransferStatus.Completed\\n      : DestinationTransferStatus.Executed;\\n\\n    s.transferStatus[transferId] = updated;\\n\\n    // Supply assets to target recipient. Use router liquidity when this is a fast transfer, or mint bridge tokens\\n    // when this is a slow transfer.\\n    // NOTE: Asset will be adopted unless specified to `receiveLocal` in params.\\n    (uint256 amountOut, address asset, address local) = _handleExecuteLiquidity(\\n      transferId,\\n      AssetLogic.calculateCanonicalHash(_args.params.canonicalId, _args.params.canonicalDomain),\\n      updated != DestinationTransferStatus.Completed,\\n      _args\\n    );\\n\\n    // Execute the transaction using the designated calldata.\\n    uint256 amount = _handleExecuteTransaction(\\n      _args,\\n      amountOut,\\n      asset,\\n      transferId,\\n      updated == DestinationTransferStatus.Completed\\n    );\\n\\n    // Emit event.\\n    emit Executed(transferId, _args.params.to, asset, _args, local, amount, msg.sender);\\n\\n    return transferId;\\n  }\\n\\n  /**\\n   * @notice Anyone can call this function on the origin domain to increase the relayer fee for a transfer.\\n   * @param _transferId - The unique identifier of the crosschain transaction\\n   */\\n  function bumpTransfer(bytes32 _transferId) external payable nonReentrant whenNotPaused {\\n    if (msg.value == 0) revert BridgeFacet__bumpTransfer_valueIsZero();\\n    _bumpTransfer(_transferId, address(0), msg.value);\\n  }\\n\\n  /**\\n   * @notice Anyone can call this function on the origin domain t o increase the relayer fee for\\n   * a given transfer using a specific asset.\\n   * @param _transferId - The unique identifier of the crosschain transaction\\n   * @param _relayerFeeAsset - The asset you are bumping fee with\\n   * @param _relayerFee - The amount you want to bump transfer fee with\\n   */\\n  function bumpTransfer(\\n    bytes32 _transferId,\\n    address _relayerFeeAsset,\\n    uint256 _relayerFee\\n  ) external nonReentrant whenNotPaused {\\n    if (_relayerFee == 0) revert BridgeFacet__bumpTransfer_valueIsZero();\\n    // check that the asset is whitelisted (the following reverts if asset\\n    // is not approved)\\n    _getApprovedCanonicalId(_relayerFeeAsset);\\n    // handle transferring asset to the relayer fee vault\\n    _bumpTransfer(_transferId, _relayerFeeAsset, _relayerFee);\\n  }\\n\\n  /**\\n   * @notice Allows a user-specified account to update the slippage they are willing\\n   * to take on destination transfers.\\n   *\\n   * @param _params TransferInfo associated with the transfer\\n   * @param _slippage The updated slippage\\n   */\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external onlyDelegate(_params) {\\n    // Sanity check slippage\\n    if (_slippage > Constants.BPS_FEE_DENOMINATOR) {\\n      revert BridgeFacet__forceUpdateSlippage_invalidSlippage();\\n    }\\n\\n    // Should only be called on destination domain\\n    if (_params.destinationDomain != s.domain) {\\n      revert BridgeFacet__forceUpdateSlippage_notDestination();\\n    }\\n\\n    // Get transferId\\n    bytes32 transferId = _calculateTransferId(_params);\\n\\n    // Store overrides\\n    s.slippage[transferId] = _slippage;\\n\\n    // Emit event\\n    emit SlippageUpdated(transferId, _slippage);\\n  }\\n\\n  /**\\n   * @notice Allows a user-specified account to withdraw the local asset directly\\n   * @dev Calldata will still be executed with the local asset. `IXReceiver` contracts\\n   * should be able to handle local assets in event of failures.\\n   * @param _params TransferInfo associated with the transfer\\n   */\\n  function forceReceiveLocal(TransferInfo calldata _params) external onlyDelegate(_params) {\\n    // Should only be called on destination domain\\n    if (_params.destinationDomain != s.domain) {\\n      revert BridgeFacet__forceReceiveLocal_notDestination();\\n    }\\n\\n    // Get transferId\\n    bytes32 transferId = _calculateTransferId(_params);\\n\\n    // Store overrides\\n    s.receiveLocalOverride[transferId] = true;\\n\\n    // Emit event\\n    emit ForceReceiveLocal(transferId);\\n  }\\n\\n  // ============ Internal: Bridge ============\\n\\n  /**\\n   * @notice Initiates a cross-chain transfer of funds and/or calldata\\n   *\\n   * @dev For ERC20 transfers, this contract must have approval to transfer the input (transacting) assets. The adopted\\n   * assets will be swapped for their local asset counterparts (i.e. bridgeable tokens) via the configured AMM if\\n   * necessary. In the event that the adopted assets *are* local bridge assets, no swap is needed. The local tokens will\\n   * then be sent via the bridge router. If the local assets are representational for an asset on another chain, we will\\n   * burn the tokens here. If the local assets are canonical (meaning that the adopted<>local asset pairing is native\\n   * to this chain), we will custody the tokens here.\\n   *\\n   * @param _params - The TransferInfo arguments.\\n   * @return bytes32 - The transfer ID of the newly created crosschain transfer.\\n   */\\n  function _xcall(\\n    TransferInfo memory _params,\\n    AssetTransfer memory _asset,\\n    AssetTransfer memory _relayer\\n  )\\n    internal\\n    // address _asset,\\n    // uint256 _amount,\\n    // address _relayerFeeAsset,\\n    // uint256 _relayerFee\\n    whenNotPaused\\n    returns (bytes32)\\n  {\\n    // Sanity checks.\\n    bytes32 remoteInstance;\\n    {\\n      // Not native asset.\\n      // NOTE: We support using address(0) as an intuitive default if you are sending a 0-value\\n      // transfer. In that edge case, address(0) will not be registered as a supported asset, but should\\n      // pass the `isLocalOrigin` check\\n      if (_asset.asset == address(0) && _asset.amount != 0) {\\n        revert BridgeFacet__xcall_nativeAssetNotSupported();\\n      }\\n\\n      // Destination domain is supported.\\n      // NOTE: This check implicitly also checks that `_params.destinationDomain != s.domain`, because the index\\n      // `s.domain` of `s.remotes` should always be `bytes32(0)`.\\n      remoteInstance = _mustHaveRemote(_params.destinationDomain);\\n\\n      // Recipient defined.\\n      if (_params.to == address(0)) {\\n        revert BridgeFacet__xcall_emptyTo();\\n      }\\n\\n      if (_params.slippage > Constants.BPS_FEE_DENOMINATOR) {\\n        revert BridgeFacet__xcall_invalidSlippage();\\n      }\\n    }\\n\\n    // NOTE: The local asset will stay address(0) if input asset is address(0) in the event of a\\n    // 0-value transfer. Otherwise, the local address will be retrieved below\\n    address local;\\n    bytes32 transferId;\\n    TokenId memory canonical;\\n    bool isCanonical;\\n    {\\n      // Check that the asset is supported -- can be either adopted or local.\\n      // NOTE: Above we check that you can only have `address(0)` as the input asset if this is a\\n      // 0-value transfer. Because 0-value transfers short-circuit all checks on mappings keyed on\\n      // hash(canonicalId, canonicalDomain), this is safe even when the address(0) asset is not\\n      // allowlisted.\\n      if (_asset.asset != address(0)) {\\n        // Retrieve the canonical token information.\\n        bytes32 key;\\n        (canonical, key) = _getApprovedCanonicalId(_asset.asset);\\n\\n        // Get the token config.\\n        TokenConfig storage config = AssetLogic.getConfig(key);\\n\\n        // Set boolean flag\\n        isCanonical = _params.originDomain == canonical.domain;\\n\\n        // Get the local address\\n        local = isCanonical ? TypeCasts.bytes32ToAddress(canonical.id) : config.representation;\\n        if (local == address(0)) {\\n          revert BridgeFacet_xcall__emptyLocalAsset();\\n        }\\n\\n        {\\n          // Enforce liquidity caps.\\n          // NOTE: Safe to do this before the swap because canonical domains do\\n          // not hit the AMMs (local == canonical).\\n          uint256 cap = config.cap;\\n          if (isCanonical && cap > 0) {\\n            // NOTE: this method includes router liquidity as part of the caps,\\n            // not only the minted amount\\n            uint256 newCustodiedAmount = config.custodied + _asset.amount;\\n            if (newCustodiedAmount > cap) {\\n              revert BridgeFacet__xcall_capReached();\\n            }\\n            s.tokenConfigs[key].custodied = newCustodiedAmount;\\n          }\\n        }\\n\\n        // Update TransferInfo to reflect the canonical token information.\\n        _params.canonicalDomain = canonical.domain;\\n        _params.canonicalId = canonical.id;\\n\\n        if (_asset.amount > 0) {\\n          // Transfer funds of input asset to the contract from the user.\\n          AssetLogic.handleIncomingAsset(_asset.asset, _asset.amount);\\n\\n          // Swap to the local asset from adopted if applicable.\\n          _params.bridgedAmt = AssetLogic.swapToLocalAssetIfNeeded(\\n            key,\\n            _asset.asset,\\n            local,\\n            _asset.amount,\\n            _params.slippage\\n          );\\n\\n          // Get the normalized amount in (amount sent in by user in 18 decimals).\\n          // NOTE: when getting the decimals from `_asset`, you don't know if you are looking for\\n          // adopted or local assets\\n          _params.normalizedIn = AssetLogic.normalizeDecimals(\\n            _asset.asset == local ? config.representationDecimals : config.adoptedDecimals,\\n            Constants.DEFAULT_NORMALIZED_DECIMALS,\\n            _asset.amount\\n          );\\n        }\\n      }\\n\\n      // Calculate the transfer ID.\\n      _params.nonce = s.nonce++;\\n      transferId = _calculateTransferId(_params);\\n    }\\n\\n    // Handle the relayer fee.\\n    // NOTE: This has to be done *after* transferring in + swapping assets because\\n    // the transfer id uses the amount that is bridged (i.e. amount in local asset).\\n    if (_relayer.amount > 0) {\\n      _bumpTransfer(transferId, _relayer.asset, _relayer.amount);\\n    }\\n\\n    // Send the crosschain message.\\n    _sendMessageAndEmit(\\n      transferId,\\n      _params,\\n      _asset.asset,\\n      _asset.amount,\\n      remoteInstance,\\n      canonical,\\n      local,\\n      isCanonical\\n    );\\n\\n    return transferId;\\n  }\\n\\n  /**\\n   * @notice An internal function to handle the bumping of transfers\\n   * @param _transferId - The unique identifier of the crosschain transaction\\n   * @param _relayerFeeAsset - The asset you are bumping fee with\\n   * @param _relayerFee - The amount you want to bump transfer fee with\\n   */\\n  function _bumpTransfer(bytes32 _transferId, address _relayerFeeAsset, uint256 _relayerFee) internal {\\n    address relayerVault = s.relayerFeeVault;\\n    if (relayerVault == address(0)) revert BridgeFacet__bumpTransfer_noRelayerVault();\\n    if (_relayerFeeAsset == address(0)) {\\n      Address.sendValue(payable(relayerVault), _relayerFee);\\n    } else {\\n      // Pull funds from user to this contract\\n      // NOTE: could transfer to `relayerFeeVault`, but that would be unintuitive for user\\n      // approvals\\n      AssetLogic.handleIncomingAsset(_relayerFeeAsset, _relayerFee);\\n\\n      // Transfer asset to relayerVault.\\n      AssetLogic.handleOutgoingAsset(_relayerFeeAsset, relayerVault, _relayerFee);\\n    }\\n\\n    emit TransferRelayerFeesIncreased(_transferId, _relayerFee, _relayerFeeAsset, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Holds the logic to recover the signer from an encoded payload.\\n   * @dev Will hash and convert to an eth signed message.\\n   * @param _signed The hash that was signed.\\n   * @param _sig The signature from which we will recover the signer.\\n   */\\n  function _recoverSignature(bytes32 _signed, bytes calldata _sig) internal pure returns (address) {\\n    // Recover\\n    return ECDSA.recover(ECDSA.toEthSignedMessageHash(_signed), _sig);\\n  }\\n\\n  /**\\n   * @notice Performs some sanity checks for `execute`.\\n   * @dev Need this to prevent stack too deep.\\n   * @param _args ExecuteArgs that were passed in to the `execute` call.\\n   */\\n  function _executeSanityChecks(ExecuteArgs calldata _args) private view returns (bytes32, DestinationTransferStatus) {\\n    // If the sender is not approved relayer, revert\\n    if (!s.approvedRelayers[msg.sender] && msg.sender != _args.params.delegate) {\\n      revert BridgeFacet__execute_unapprovedSender();\\n    }\\n\\n    // If this is not the destination domain revert\\n    if (_args.params.destinationDomain != s.domain) {\\n      revert BridgeFacet__execute_wrongDomain();\\n    }\\n\\n    // Path length refers to the number of facilitating routers. A transfer is considered 'multipath'\\n    // if multiple routers provide liquidity (in even 'shares') for it.\\n    uint256 pathLength = _args.routers.length;\\n\\n    // Derive transfer ID based on given arguments.\\n    bytes32 transferId = _calculateTransferId(_args.params);\\n\\n    // Retrieve the reconciled record.\\n    DestinationTransferStatus status = s.transferStatus[transferId];\\n\\n    if (pathLength != 0) {\\n      // Make sure number of routers is below the configured maximum.\\n      if (pathLength > s.maxRoutersPerTransfer) revert BridgeFacet__execute_maxRoutersExceeded();\\n\\n      // Check to make sure the transfer has not been reconciled (no need for routers if the transfer is\\n      // already reconciled; i.e. if there are routers provided, the transfer must *not* be reconciled).\\n      if (status != DestinationTransferStatus.None) revert BridgeFacet__execute_badFastLiquidityStatus();\\n\\n      // NOTE: The sequencer address may be empty and no signature needs to be provided in the case of the\\n      // slow liquidity route (i.e. no routers involved). Additionally, the sequencer does not need to be the\\n      // msg.sender.\\n      // Check to make sure the sequencer address provided is approved\\n      if (!s.approvedSequencers[_args.sequencer]) {\\n        revert BridgeFacet__execute_notSupportedSequencer();\\n      }\\n      // Check to make sure the sequencer provided did sign the transfer ID and router path provided.\\n      // NOTE: when caps are enforced, this signature also acts as protection from malicious routers looking\\n      // to block the network. routers could `execute` a fake transaction, and use up the rest of the `custodied`\\n      // bandwidth, causing future `execute`s to fail. this would also cause a break in the accounting, where the\\n      // `custodied` balance no longer tracks representation asset minting / burning\\n      if (\\n        _args.sequencer != _recoverSignature(keccak256(abi.encode(transferId, _args.routers)), _args.sequencerSignature)\\n      ) {\\n        revert BridgeFacet__execute_invalidSequencerSignature();\\n      }\\n\\n      // Hash the payload for which each router should have produced a signature.\\n      // Each router should have signed the `transferId` (which implicitly signs call params,\\n      // amount, and tokenId) as well as the `pathLength`, or the number of routers with which\\n      // they are splitting liquidity provision.\\n      bytes32 routerHash = keccak256(abi.encode(transferId, pathLength));\\n\\n      for (uint256 i; i < pathLength; ) {\\n        // Make sure the router is approved, if applicable.\\n        // If router ownership is renounced (_RouterOwnershipRenounced() is true), then the router allowlist\\n        // no longer applies and we can skip this approval step.\\n        if (!_isRouterAllowlistRemoved() && !s.routerConfigs[_args.routers[i]].approved) {\\n          revert BridgeFacet__execute_notSupportedRouter();\\n        }\\n\\n        // Validate the signature. We'll recover the signer's address using the expected payload and basic ECDSA\\n        // signature scheme recovery. The address for each signature must match the router's address.\\n        if (_args.routers[i] != _recoverSignature(routerHash, _args.routerSignatures[i])) {\\n          revert BridgeFacet__execute_invalidRouterSignature();\\n        }\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n    } else {\\n      // If there are no routers for this transfer, this `execute` must be a slow liquidity route; in which\\n      // case, we must make sure the transfer's been reconciled.\\n      if (status != DestinationTransferStatus.Reconciled) revert BridgeFacet__execute_notReconciled();\\n    }\\n\\n    return (transferId, status);\\n  }\\n\\n  /**\\n   * @notice Calculates fast transfer amount.\\n   * @param _amount Transfer amount\\n   * @param _numerator Numerator\\n   * @param _denominator Denominator\\n   */\\n  function _muldiv(uint256 _amount, uint256 _numerator, uint256 _denominator) private pure returns (uint256) {\\n    return (_amount * _numerator) / _denominator;\\n  }\\n\\n  /**\\n   * @notice Execute liquidity process used when calling `execute`.\\n   * @dev Will revert with underflow if any router in the path has insufficient liquidity to provide\\n   * for the transfer.\\n   * @dev Need this to prevent stack too deep.\\n   */\\n  function _handleExecuteLiquidity(\\n    bytes32 _transferId,\\n    bytes32 _key,\\n    bool _isFast,\\n    ExecuteArgs calldata _args\\n  ) private returns (uint256, address, address) {\\n    // Save the addresses of all routers providing liquidity for this transfer.\\n    s.routedTransfers[_transferId] = _args.routers;\\n\\n    // Get the local asset contract address (if applicable).\\n    address local;\\n    if (_args.params.canonicalDomain != 0) {\\n      local = _getLocalAsset(_key, _args.params.canonicalId, _args.params.canonicalDomain);\\n    }\\n\\n    // If this is a zero-value transfer, short-circuit remaining logic.\\n    if (_args.params.bridgedAmt == 0) {\\n      return (0, local, local);\\n    }\\n\\n    // Get the receive local status\\n    bool receiveLocal = _args.params.receiveLocal || s.receiveLocalOverride[_transferId];\\n\\n    uint256 toSwap = _args.params.bridgedAmt;\\n    // If this is a fast liquidity path, we should handle deducting from applicable routers' liquidity.\\n    // If this is a slow liquidity path, the transfer must have been reconciled (if we've reached this point),\\n    // and the funds would have been custodied in this contract. The exact custodied amount is untracked in state\\n    // (since the amount is hashed in the transfer ID itself) - thus, no updates are required.\\n    if (_isFast) {\\n      uint256 pathLen = _args.routers.length;\\n\\n      // Calculate amount that routers will provide with the fast-liquidity fee deducted.\\n      toSwap = _muldiv(_args.params.bridgedAmt, s.LIQUIDITY_FEE_NUMERATOR, Constants.BPS_FEE_DENOMINATOR);\\n\\n      if (pathLen == 1) {\\n        // If router does not have enough liquidity, try to use Aave Portals.\\n        // NOTE: Only one router should be responsible for taking on this credit risk, and it should only deal\\n        // with transfers expecting adopted assets (to avoid introducing runtime slippage).\\n        if (!receiveLocal && s.routerBalances[_args.routers[0]][local] < toSwap && s.aavePool != address(0)) {\\n          if (!s.routerConfigs[_args.routers[0]].portalApproved) revert BridgeFacet__execute_notApprovedForPortals();\\n\\n          // Portals deliver the adopted asset directly; return after portal execution is completed.\\n          (uint256 portalDeliveredAmount, address adoptedAsset) = _executePortalTransfer(\\n            _transferId,\\n            _key,\\n            toSwap,\\n            _args.routers[0]\\n          );\\n          return (portalDeliveredAmount, adoptedAsset, local);\\n        } else {\\n          // Decrement the router's liquidity.\\n          s.routerBalances[_args.routers[0]][local] -= toSwap;\\n        }\\n      } else {\\n        // For each router, assert they are approved, and deduct liquidity.\\n        uint256 routerAmount = toSwap / pathLen;\\n        for (uint256 i; i < pathLen - 1; ) {\\n          // Decrement router's liquidity.\\n          // NOTE: If any router in the path has insufficient liquidity, this will revert with an underflow error.\\n          s.routerBalances[_args.routers[i]][local] -= routerAmount;\\n\\n          unchecked {\\n            ++i;\\n          }\\n        }\\n        // The last router in the multipath will sweep the remaining balance to account for remainder dust.\\n        uint256 toSweep = routerAmount + (toSwap % pathLen);\\n        s.routerBalances[_args.routers[pathLen - 1]][local] -= toSweep;\\n      }\\n    }\\n\\n    // If it is the canonical domain, decrease custodied value\\n    if (s.domain == _args.params.canonicalDomain && AssetLogic.getConfig(_key).cap > 0) {\\n      // NOTE: safe to use the amount here instead of post-swap because there are no\\n      // AMMs on the canonical domain (assuming canonical == adopted on canonical domain)\\n      s.tokenConfigs[_key].custodied -= toSwap;\\n    }\\n\\n    // If the local asset is specified, or the adopted asset was overridden (e.g. when user facing slippage\\n    // conditions outside of their boundaries), exit without swapping.\\n    if (receiveLocal) {\\n      // Delete override\\n      delete s.receiveLocalOverride[_transferId];\\n\\n      return (toSwap, local, local);\\n    }\\n\\n    // Swap out of representational asset into adopted asset if needed.\\n    uint256 slippageOverride = s.slippage[_transferId];\\n    // delete for gas refund\\n    delete s.slippage[_transferId];\\n\\n    (uint256 amount, address adopted) = AssetLogic.swapFromLocalAssetIfNeeded(\\n      _key,\\n      local,\\n      toSwap,\\n      slippageOverride != 0 ? slippageOverride : _args.params.slippage,\\n      _args.params.normalizedIn\\n    );\\n    return (amount, adopted, local);\\n  }\\n\\n  /**\\n   * @notice Process the transfer, and calldata if needed, when calling `execute`\\n   * @dev Need this to prevent stack too deep\\n   */\\n  function _handleExecuteTransaction(\\n    ExecuteArgs calldata _args,\\n    uint256 _amountOut,\\n    address _asset, // adopted (or local if specified)\\n    bytes32 _transferId,\\n    bool _reconciled\\n  ) private returns (uint256) {\\n    // transfer funds to recipient\\n    AssetLogic.handleOutgoingAsset(_asset, _args.params.to, _amountOut);\\n\\n    // execute the calldata\\n    _executeCalldata(_transferId, _amountOut, _asset, _reconciled, _args.params);\\n\\n    return _amountOut;\\n  }\\n\\n  /**\\n   * @notice Executes external calldata.\\n   * \\n   * @dev Once a transfer is reconciled (i.e. data is authenticated), external calls will\\n   * fail gracefully. This means errors will be emitted in an event, but the function itself\\n   * will not revert.\\n\\n   * In the case where a transaction is *not* reconciled (i.e. data is unauthenticated), this\\n   * external call will fail loudly. This allows all functions that rely on authenticated data\\n   * (using a specific check on the origin sender), to be forced into the slow path for\\n   * execution to succeed.\\n   * \\n   */\\n  function _executeCalldata(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    bool _reconciled,\\n    TransferInfo calldata _params\\n  ) internal {\\n    // execute the calldata\\n    if (keccak256(_params.callData) == Constants.EMPTY_HASH) {\\n      // no call data, return amount out\\n      return;\\n    }\\n\\n    (bool success, bytes memory returnData) = ExcessivelySafeCall.excessivelySafeCall(\\n      _params.to,\\n      gasleft() - Constants.EXECUTE_CALLDATA_RESERVE_GAS,\\n      0, // native asset value (always 0)\\n      Constants.DEFAULT_COPY_BYTES, // only copy 256 bytes back as calldata\\n      abi.encodeWithSelector(\\n        IXReceiver.xReceive.selector,\\n        _transferId,\\n        _amount,\\n        _asset,\\n        _reconciled ? _params.originSender : address(0), // use passed in value iff authenticated\\n        _params.originDomain,\\n        _params.callData\\n      )\\n    );\\n\\n    if (!_reconciled && !success) {\\n      // See above devnote, reverts if unsuccessful on fast path\\n      revert BridgeFacet__execute_externalCallFailed();\\n    }\\n\\n    emit ExternalCalldataExecuted(_transferId, success, returnData);\\n  }\\n\\n  /**\\n   * @notice Uses Aave Portals to provide fast liquidity\\n   */\\n  function _executePortalTransfer(\\n    bytes32 _transferId,\\n    bytes32 _key,\\n    uint256 _fastTransferAmount,\\n    address _router\\n  ) internal returns (uint256, address) {\\n    // Calculate local to adopted swap output if needed\\n    address adopted = _getAdoptedAsset(_key);\\n\\n    IAavePool(s.aavePool).mintUnbacked(adopted, _fastTransferAmount, address(this), Constants.AAVE_REFERRAL_CODE);\\n\\n    // Improvement: Instead of withdrawing to address(this), withdraw directly to the user or executor to save 1 transfer\\n    uint256 amountWithdrawn = IAavePool(s.aavePool).withdraw(adopted, _fastTransferAmount, address(this));\\n\\n    if (amountWithdrawn < _fastTransferAmount) revert BridgeFacet__executePortalTransfer_insufficientAmountWithdrawn();\\n\\n    // Store principle debt\\n    s.portalDebt[_transferId] = _fastTransferAmount;\\n\\n    // Store fee debt\\n    s.portalFeeDebt[_transferId] = (s.aavePortalFeeNumerator * _fastTransferAmount) / Constants.BPS_FEE_DENOMINATOR;\\n\\n    emit AavePortalMintUnbacked(_transferId, _router, adopted, _fastTransferAmount);\\n\\n    return (_fastTransferAmount, adopted);\\n  }\\n\\n  // ============ Internal: Send & Emit Xcalled============\\n\\n  /**\\n   * @notice Format and send transfer message to a remote chain.\\n   *\\n   * @param _transferId Unique identifier for the transfer.\\n   * @param _params The TransferInfo.\\n   * @param _connextion The connext instance on the destination domain.\\n   * @param _canonical The canonical token ID/domain info.\\n   * @param _local The local token address.\\n   * @param _amount The token amount.\\n   * @param _isCanonical Whether or not the local token is the canonical asset (i.e. this is the token's\\n   * \\\"home\\\" chain).\\n   */\\n  function _sendMessageAndEmit(\\n    bytes32 _transferId,\\n    TransferInfo memory _params,\\n    address _asset,\\n    uint256 _amount,\\n    bytes32 _connextion,\\n    TokenId memory _canonical,\\n    address _local,\\n    bool _isCanonical\\n  ) private {\\n    // Remove tokens from circulation on this chain if applicable.\\n    uint256 bridgedAmt = _params.bridgedAmt;\\n    if (bridgedAmt > 0) {\\n      if (!_isCanonical) {\\n        // If the token originates on a remote chain, burn the representational tokens on this chain.\\n        IBridgeToken(_local).burn(address(this), bridgedAmt);\\n      }\\n      // IFF the token IS the canonical token (i.e. originates on this chain), we lock the input tokens in escrow\\n      // in this contract, as an equal amount of representational assets will be minted on the destination chain.\\n      // NOTE: The tokens should be in the contract already at this point from xcall.\\n    }\\n\\n    bytes memory _messageBody = abi.encodePacked(\\n      _canonical.domain,\\n      _canonical.id,\\n      BridgeMessage.Types.Transfer,\\n      bridgedAmt,\\n      _transferId\\n    );\\n\\n    // Send message to destination chain bridge router.\\n    // return message hash and unhashed body\\n    (bytes32 messageHash, bytes memory messageBody) = IOutbox(s.xAppConnectionManager.home()).dispatch(\\n      _params.destinationDomain,\\n      _connextion,\\n      _messageBody\\n    );\\n\\n    // emit event\\n    emit XCalled(_transferId, _params.nonce, messageHash, _params, _asset, _amount, _local, messageBody);\\n  }\\n\\n  /**\\n   * @notice Assert that the given domain has a xApp Router registered and return its address\\n   * @param _domain The domain of the chain for which to get the xApp Router\\n   * @return _remote The address of the remote xApp Router on _domain\\n   */\\n  function _mustHaveRemote(uint32 _domain) internal view returns (bytes32 _remote) {\\n    _remote = s.remotes[_domain];\\n    if (_remote == bytes32(0)) {\\n      revert BridgeFacet__mustHaveRemote_destinationNotSupported();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xdef4b9cd9ac54ea5bb29b775e5b46d9724d81bf5ebdf955f3dd613592ec63090\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/helpers/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\n */\\ncontract LPToken is ERC20Upgradeable, OwnableUpgradeable {\\n  // ============ Storage ============\\n\\n  // ============ Initializer ============\\n\\n  /**\\n   * @notice Initializes this LPToken contract with the given name and symbol\\n   * @dev The caller of this function will become the owner. A Swap contract should call this\\n   * in its initializer function.\\n   * @param name name of this token\\n   * @param symbol symbol of this token\\n   */\\n  function initialize(string memory name, string memory symbol) external initializer returns (bool) {\\n    __Context_init_unchained();\\n    __ERC20_init_unchained(name, symbol);\\n    __Ownable_init_unchained();\\n    return true;\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Mints the given amount of LPToken to the recipient.\\n   * @dev only owner can call this mint function\\n   * @param recipient address of account to receive the tokens\\n   * @param amount amount of tokens to mint\\n   */\\n  function mint(address recipient, uint256 amount) external onlyOwner {\\n    require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n    _mint(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Burns the given amount of LPToken from provided account\\n   * @dev only owner can call this burn function\\n   * @param account address of account from which to burn token\\n   * @param amount amount of tokens to mint\\n   */\\n  function burnFrom(address account, uint256 amount) external onlyOwner {\\n    require(amount != 0, \\\"LPToken: cannot burn 0\\\");\\n    _burn(account, amount);\\n  }\\n\\n  // ============ Internal functions ============\\n\\n  /**\\n   * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n   * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\\n   * This assumes the owner is set to a Swap contract's address.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override(ERC20Upgradeable) {\\n    super._beforeTokenTransfer(from, to, amount);\\n    require(to != address(this), \\\"LPToken: cannot send to itself\\\");\\n  }\\n\\n  // ============ Upgrade Gap ============\\n  uint256[50] private __GAP; // gap for upgrade safety\\n}\\n\",\"keccak256\":\"0x81895c7ab368c08fe0b8fc3798535c2879ccaf0c3c2e1aaee5bcd43c4211ce9d\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IAavePool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IAavePool {\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xd196cc8605b8ecfa5991614f6c234f2bc5d1a605cdb53778e91a93822dfb752f\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IBridgeToken is IERC20Metadata {\\n  function burn(address _from, uint256 _amnt) external;\\n\\n  function mint(address _to, uint256 _amnt) external;\\n\\n  function setDetails(string calldata _name, string calldata _symbol) external;\\n}\\n\",\"keccak256\":\"0x93b2adcc4b953ecd2d3e738d797f5fbde2ccb3726df10bc7acde9c1b4775b019\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n  enum FacetCutAction {\\n    Add,\\n    Replace,\\n    Remove\\n  }\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Propose to add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function proposeDiamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCutProposed(FacetCut[] _diamondCut, address _init, bytes _calldata, uint256 deadline);\\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function diamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  /// @notice Propose to add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function rescindDiamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  /**\\n   * @notice Returns the acceptance time for a given proposal\\n   * @param _diamondCut Contains the facet addresses and function selectors\\n   * @param _init The address of the contract or facet to execute _calldata\\n   * @param _calldata A function call, including function selector and arguments _calldata is\\n   * executed with delegatecall on _init\\n   */\\n  function getAcceptanceTime(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external returns (uint256);\\n\\n  event DiamondCutRescinded(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x4f0bf252cb5541d7ffd04fc49abdc7d2f2c838ba65f108201f787851c7b238fb\",\"license\":\"MIT\"},\"contracts/core/connext/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStableSwap {\\n  /*** EVENTS ***/\\n\\n  // events replicated from SwapUtils to make the ABI easier for dumb\\n  // clients\\n  event TokenSwap(address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId);\\n  event AddLiquidity(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(uint256 newAdminFee);\\n  event NewSwapFee(uint256 newSwapFee);\\n  event NewWithdrawFee(uint256 newWithdrawFee);\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function swapExact(\\n    uint256 amountIn,\\n    address assetIn,\\n    address assetOut,\\n    uint256 minAmountOut,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function swapExactOut(\\n    uint256 amountOut,\\n    address assetIn,\\n    address assetOut,\\n    uint256 maxAmountIn,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function getA() external view returns (uint256);\\n\\n  function getToken(uint8 index) external view returns (IERC20);\\n\\n  function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  // min return calculation functions\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateSwapOut(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy\\n  ) external view returns (uint256);\\n\\n  function calculateSwapFromAddress(\\n    address assetIn,\\n    address assetOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function calculateSwapOutFromAddress(\\n    address assetIn,\\n    address assetOut,\\n    uint256 amountOut\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n  function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n    external\\n    view\\n    returns (uint256 availableTokenAmount);\\n\\n  // state modifying functions\\n  function initialize(\\n    IERC20[] memory pooledTokens,\\n    uint8[] memory decimals,\\n    string memory lpTokenName,\\n    string memory lpTokenSymbol,\\n    uint256 a,\\n    uint256 fee,\\n    uint256 adminFee,\\n    address lpTokenTargetAddress\\n  ) external;\\n\\n  function addLiquidity(\\n    uint256[] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc58596b5187e67d0d983d44aa5a98901a6a66fc770f157b556f99e243ed6d2d6\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x02ae47cb6441eb876b47ff35687ddd9f78eae75399af98815ada1ae618a3945c\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/AmplificationUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {SwapUtils} from \\\"./SwapUtils.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title AmplificationUtils library\\n * @notice A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct.\\n * This library assumes the struct is fully validated.\\n */\\nlibrary AmplificationUtils {\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  /**\\n   * @notice Return A, the amplification coefficient * n ** (n - 1)\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter\\n   */\\n  function getA(SwapUtils.Swap storage self) internal view returns (uint256) {\\n    return _getAPrecise(self) / Constants.A_PRECISION;\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter in its raw precision form\\n   */\\n  function getAPrecise(SwapUtils.Swap storage self) internal view returns (uint256) {\\n    return _getAPrecise(self);\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return currentA A parameter in its raw precision form\\n   */\\n  function _getAPrecise(SwapUtils.Swap storage self) internal view returns (uint256 currentA) {\\n    uint256 t1 = self.futureATime; // time when ramp is finished\\n    currentA = self.futureA; // final A value when ramp is finished\\n    uint256 a0 = self.initialA; // initial A value when ramp is started\\n\\n    if (a0 != currentA && block.timestamp < t1) {\\n      uint256 t0 = self.initialATime; // time when ramp is started\\n      assembly {\\n        currentA := div(add(mul(a0, sub(t1, timestamp())), mul(currentA, sub(timestamp(), t0))), sub(t1, t0))\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\\n   * the limit range.\\n   * @param self Swap struct to update\\n   * @param futureA_ the new A to ramp towards\\n   * @param futureTime_ timestamp when the new A should be reached\\n   */\\n  function rampA(\\n    SwapUtils.Swap storage self,\\n    uint256 futureA_,\\n    uint256 futureTime_\\n  ) internal {\\n    require(block.timestamp >= self.initialATime + Constants.MIN_RAMP_DELAY, \\\"Wait 1 day before starting ramp\\\");\\n    require(futureTime_ >= block.timestamp + Constants.MIN_RAMP_TIME, \\\"Insufficient ramp time\\\");\\n    require(futureA_ != 0 && futureA_ < Constants.MAX_A, \\\"futureA_ must be > 0 and < MAX_A\\\");\\n\\n    uint256 initialAPrecise = _getAPrecise(self);\\n    uint256 futureAPrecise = futureA_ * Constants.A_PRECISION;\\n    require(initialAPrecise != futureAPrecise, \\\"!valid ramp\\\");\\n\\n    if (futureAPrecise < initialAPrecise) {\\n      require(futureAPrecise * Constants.MAX_A_CHANGE >= initialAPrecise, \\\"futureA_ is too small\\\");\\n    } else {\\n      require(futureAPrecise <= initialAPrecise * Constants.MAX_A_CHANGE, \\\"futureA_ is too large\\\");\\n    }\\n\\n    self.initialA = initialAPrecise;\\n    self.futureA = futureAPrecise;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = futureTime_;\\n\\n    emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureTime_);\\n  }\\n\\n  /**\\n   * @notice Stops ramping A immediately. Once this function is called, rampA()\\n   * cannot be called for another 24 hours\\n   * @param self Swap struct to update\\n   */\\n  function stopRampA(SwapUtils.Swap storage self) internal {\\n    require(self.futureATime > block.timestamp, \\\"Ramp is already stopped\\\");\\n\\n    uint256 currentA = _getAPrecise(self);\\n    self.initialA = currentA;\\n    self.futureA = currentA;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = block.timestamp;\\n\\n    emit StopRampA(currentA, block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x617ae0d3ae92d6b0b5fb6e3357bcd37e6ab67f02bfde9c3f97d428ee9f777f59\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/AssetLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {TypeCasts} from \\\"../../../shared/libraries/TypeCasts.sol\\\";\\n\\nimport {IStableSwap} from \\\"../interfaces/IStableSwap.sol\\\";\\n\\nimport {LibConnextStorage, AppStorage, TokenConfig} from \\\"./LibConnextStorage.sol\\\";\\nimport {SwapUtils} from \\\"./SwapUtils.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\nimport {TokenId} from \\\"./TokenId.sol\\\";\\n\\nlibrary AssetLogic {\\n  // ============ Libraries ============\\n\\n  using SwapUtils for SwapUtils.Swap;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  // ============ Errors ============\\n\\n  error AssetLogic__handleIncomingAsset_nativeAssetNotSupported();\\n  error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported();\\n  error AssetLogic__handleOutgoingAsset_notNative();\\n  error AssetLogic__getTokenIndexFromStableSwapPool_notExist();\\n  error AssetLogic__getConfig_notRegistered();\\n  error AssetLogic__swapAsset_externalStableSwapPoolDoesNotExist();\\n\\n  // ============ Internal: Handle Transfer ============\\n\\n  function getConfig(bytes32 _key) internal view returns (TokenConfig storage) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n    TokenConfig storage config = s.tokenConfigs[_key];\\n\\n    // Sanity check: not empty\\n    // NOTE: adopted decimals will *always* be nonzero (or reflect what is onchain\\n    // for the asset). The same is not true for the representation assets, which\\n    // will always have 0 decimals on the canonical domain\\n    if (config.adoptedDecimals < 1) {\\n      revert AssetLogic__getConfig_notRegistered();\\n    }\\n\\n    return config;\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @dev Does NOT work with fee-on-transfer tokens: will revert.\\n   *\\n   * @param _asset - The address of the ERC20 token to transfer.\\n   * @param _amount - The specified amount to transfer.\\n   */\\n  function handleIncomingAsset(address _asset, uint256 _amount) internal {\\n    // Sanity check: if amount is 0, do nothing.\\n    if (_amount == 0) {\\n      return;\\n    }\\n    // Sanity check: asset address is not zero.\\n    if (_asset == address(0)) {\\n      revert AssetLogic__handleIncomingAsset_nativeAssetNotSupported();\\n    }\\n\\n    IERC20Metadata asset = IERC20Metadata(_asset);\\n\\n    // Record starting amount to validate correct amount is transferred.\\n    uint256 starting = asset.balanceOf(address(this));\\n\\n    // Transfer asset to contract.\\n    asset.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    // Ensure correct amount was transferred (i.e. this was not a fee-on-transfer token).\\n    if (asset.balanceOf(address(this)) - starting != _amount) {\\n      revert AssetLogic__handleIncomingAsset_feeOnTransferNotSupported();\\n    }\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from the Connext contract to a specified address\\n   * @param _asset - The address of the ERC20 token to transfer.\\n   * @param _to - The recipient address that will receive the funds.\\n   * @param _amount - The amount to withdraw from contract.\\n   */\\n  function handleOutgoingAsset(\\n    address _asset,\\n    address _to,\\n    uint256 _amount\\n  ) internal {\\n    // Sanity check: if amount is 0, do nothing.\\n    if (_amount == 0) {\\n      return;\\n    }\\n    // Sanity check: asset address is not zero.\\n    if (_asset == address(0)) revert AssetLogic__handleOutgoingAsset_notNative();\\n\\n    // Transfer ERC20 asset to target recipient.\\n    SafeERC20.safeTransfer(IERC20Metadata(_asset), _to, _amount);\\n  }\\n\\n  // ============ Internal: StableSwap Pools ============\\n\\n  /**\\n   * @notice Return the index of the given token address. Reverts if no matching\\n   * token is found.\\n   * @param key the hash of the canonical id and domain\\n   * @param tokenAddress address of the token\\n   * @return the index of the given token address\\n   */\\n  function getTokenIndexFromStableSwapPool(bytes32 key, address tokenAddress) internal view returns (uint8) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n    uint8 index = s.tokenIndexes[key][tokenAddress];\\n    if (address(s.swapStorages[key].pooledTokens[index]) != tokenAddress)\\n      revert AssetLogic__getTokenIndexFromStableSwapPool_notExist();\\n    return index;\\n  }\\n\\n  // ============ Internal: Handle Swap ============\\n\\n  /**\\n   * @notice Swaps an adopted asset to the local (representation or canonical) asset.\\n   * @dev Will not swap if the asset passed in is the local asset.\\n   * @param _key - The hash of canonical id and domain.\\n   * @param _asset - The address of the adopted asset to swap into the local asset.\\n   * @param _amount - The amount of the adopted asset to swap.\\n   * @param _slippage - The maximum amount of slippage user will take on from _amount in BPS.\\n   * @return uint256 The amount of local asset received from swap.\\n   */\\n  function swapToLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    address _local,\\n    uint256 _amount,\\n    uint256 _slippage\\n  ) internal returns (uint256) {\\n    // If there's no amount, no need to swap.\\n    if (_amount == 0) {\\n      return 0;\\n    }\\n\\n    // Check the case where the adopted asset *is* the local asset. If so, no need to swap.\\n    if (_local == _asset) {\\n      return _amount;\\n    }\\n\\n    // Get the configs.\\n    TokenConfig storage config = getConfig(_key);\\n\\n    // Swap the asset to the proper local asset.\\n    (uint256 out, ) = _swapAsset(\\n      _key,\\n      _asset,\\n      _local,\\n      _amount,\\n      calculateSlippageBoundary(config.adoptedDecimals, config.representationDecimals, _amount, _slippage)\\n    );\\n    return out;\\n  }\\n\\n  /**\\n   * @notice Swaps a local bridge asset for the adopted asset using the stored stable swap\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key the hash of the canonical id and domain\\n   * @param _asset - The address of the local asset to swap into the adopted asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @param _slippage - The minimum amount of slippage user will take on from _amount in BPS\\n   * @param _normalizedIn - The amount sent in on xcall to take the slippage from, in 18 decimals\\n   * by convention\\n   * @return The amount of adopted asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapFromLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    uint256 _normalizedIn\\n  ) internal returns (uint256, address) {\\n    // Get the token config.\\n    TokenConfig storage config = getConfig(_key);\\n    address adopted = config.adopted;\\n\\n    // If the adopted asset is the local asset, no need to swap.\\n    if (adopted == _asset) {\\n      return (_amount, adopted);\\n    }\\n\\n    // If there's no amount, no need to swap.\\n    if (_amount == 0) {\\n      return (_amount, adopted);\\n    }\\n\\n    // Swap the asset to the proper local asset\\n    return\\n      _swapAsset(\\n        _key,\\n        _asset,\\n        adopted,\\n        _amount,\\n        // NOTE: To get the slippage boundary here, you must take the slippage % off of the\\n        // normalized amount in (at 18 decimals by convention), then convert that amount\\n        // to the proper decimals of adopted.\\n        calculateSlippageBoundary(\\n          Constants.DEFAULT_NORMALIZED_DECIMALS,\\n          config.adoptedDecimals,\\n          _normalizedIn,\\n          _slippage\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Swaps a local bridge asset for the adopted asset using the stored stable swap\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key the hash of the canonical id and domain\\n   * @param _asset - The address of the local asset to swap into the adopted asset\\n   * @param _amount - The exact amount to receive out of the swap\\n   * @param _maxIn - The most you will supply to the swap\\n   * @return The amount of local asset put into  swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapFromLocalAssetIfNeededForExactOut(\\n    bytes32 _key,\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _maxIn\\n  ) internal returns (uint256, address) {\\n    TokenConfig storage config = getConfig(_key);\\n\\n    // If the adopted asset is the local asset, no need to swap.\\n    address adopted = config.adopted;\\n    if (adopted == _asset) {\\n      return (_amount, adopted);\\n    }\\n\\n    return _swapAssetOut(_key, _asset, adopted, _amount, _maxIn);\\n  }\\n\\n  /**\\n   * @notice Swaps assetIn to assetOut using the stored stable swap or internal swap pool.\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key - The hash of canonical id and domain.\\n   * @param _assetIn - The address of the from asset\\n   * @param _assetOut - The address of the to asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @param _minOut - The minimum amount of `_assetOut` the user will accept\\n   * @return The amount of asset received\\n   * @return The address of asset received\\n   */\\n  function _swapAsset(\\n    bytes32 _key,\\n    address _assetIn,\\n    address _assetOut,\\n    uint256 _amount,\\n    uint256 _minOut\\n  ) internal returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // Retrieve internal swap pool reference.\\n    SwapUtils.Swap storage ipool = s.swapStorages[_key];\\n\\n    if (ipool.exists()) {\\n      // Swap via the internal pool.\\n      return (\\n        ipool.swapInternal(\\n          getTokenIndexFromStableSwapPool(_key, _assetIn),\\n          getTokenIndexFromStableSwapPool(_key, _assetOut),\\n          _amount,\\n          _minOut\\n        ),\\n        _assetOut\\n      );\\n    } else {\\n      // Otherwise, swap via external stableswap pool.\\n      IStableSwap pool = IStableSwap(getConfig(_key).adoptedToLocalExternalPools);\\n\\n      IERC20Metadata assetIn = IERC20Metadata(_assetIn);\\n\\n      assetIn.safeApprove(address(pool), 0);\\n      assetIn.safeIncreaseAllowance(address(pool), _amount);\\n\\n      // NOTE: If pool is not registered here, then this call will revert.\\n      return (\\n        pool.swapExact(_amount, _assetIn, _assetOut, _minOut, block.timestamp + Constants.DEFAULT_DEADLINE_EXTENSION),\\n        _assetOut\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Swaps assetIn to assetOut using the stored stable swap or internal swap pool.\\n   * @param _key - The hash of the canonical id and domain.\\n   * @param _assetIn - The address of the from asset.\\n   * @param _assetOut - The address of the to asset.\\n   * @param _amountOut - The amount of the _assetOut to swap.\\n   * @param _maxIn - The most you will supply to the swap.\\n   * @return amountIn The amount of assetIn. Will be 0 if the swap was unsuccessful (slippage\\n   * too high).\\n   * @return assetOut The address of asset received.\\n   */\\n  function _swapAssetOut(\\n    bytes32 _key,\\n    address _assetIn,\\n    address _assetOut,\\n    uint256 _amountOut,\\n    uint256 _maxIn\\n  ) internal returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // Retrieve internal swap pool reference. If it doesn't exist, we'll resort to using an\\n    // external stableswap below.\\n    SwapUtils.Swap storage ipool = s.swapStorages[_key];\\n\\n    // Swap the asset to the proper local asset.\\n    // NOTE: IFF slippage was too high to perform swap in either case: success = false, amountIn = 0\\n    if (ipool.exists()) {\\n      // Swap via the internal pool.\\n      return (\\n        ipool.swapInternalOut(\\n          getTokenIndexFromStableSwapPool(_key, _assetIn),\\n          getTokenIndexFromStableSwapPool(_key, _assetOut),\\n          _amountOut,\\n          _maxIn\\n        ),\\n        _assetOut\\n      );\\n    } else {\\n      // Otherwise, swap via external stableswap pool.\\n      // NOTE: This call will revert if the external stableswap pool doesn't exist.\\n      IStableSwap pool = IStableSwap(getConfig(_key).adoptedToLocalExternalPools);\\n      address poolAddress = address(pool);\\n\\n      // Perform the swap.\\n      // Edge case with some tokens: Example USDT in ETH Mainnet, after the backUnbacked call\\n      // there could be a remaining allowance if not the whole amount is pulled by aave.\\n      // Later, if we try to increase the allowance it will fail. USDT demands if allowance\\n      // is not 0, it has to be set to 0 first.\\n      // Example: https://github.com/aave/aave-v3-periphery/blob/ca184e5278bcbc10d28c3dbbc604041d7cfac50b/contracts/adapters/paraswap/ParaSwapRepayAdapter.sol#L138-L140\\n      IERC20Metadata assetIn = IERC20Metadata(_assetIn);\\n\\n      assetIn.safeApprove(poolAddress, 0);\\n      assetIn.safeIncreaseAllowance(poolAddress, _maxIn);\\n\\n      uint256 out = pool.swapExactOut(\\n        _amountOut,\\n        _assetIn,\\n        _assetOut,\\n        _maxIn,\\n        block.timestamp + Constants.DEFAULT_DEADLINE_EXTENSION\\n      );\\n\\n      // Reset allowance\\n      assetIn.safeApprove(poolAddress, 0);\\n      return (out, _assetOut);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate amount of tokens you receive on a local bridge asset for the adopted asset\\n   * using the stored stable swap\\n   * @dev Will not use the stored stable swap if the asset passed in is the local asset\\n   * @param _key - The hash of the canonical id and domain\\n   * @param _asset - The address of the local asset to swap into the local asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @return The amount of local asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function calculateSwapFromLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    uint256 _amount\\n  ) internal view returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // If the adopted asset is the local asset, no need to swap.\\n    TokenConfig storage config = getConfig(_key);\\n    address adopted = config.adopted;\\n    if (adopted == _asset) {\\n      return (_amount, adopted);\\n    }\\n\\n    SwapUtils.Swap storage ipool = s.swapStorages[_key];\\n\\n    // Calculate the swap using the appropriate pool.\\n    if (ipool.exists()) {\\n      // Calculate with internal swap pool.\\n      uint8 tokenIndexIn = getTokenIndexFromStableSwapPool(_key, _asset);\\n      uint8 tokenIndexOut = getTokenIndexFromStableSwapPool(_key, adopted);\\n      return (ipool.calculateSwap(tokenIndexIn, tokenIndexOut, _amount), adopted);\\n    } else {\\n      // Otherwise, try to calculate with external pool.\\n      IStableSwap pool = IStableSwap(config.adoptedToLocalExternalPools);\\n      // NOTE: This call will revert if no external pool exists.\\n      return (pool.calculateSwapFromAddress(_asset, adopted, _amount), adopted);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate amount of tokens you receive of a local bridge asset for the adopted asset\\n   * using the stored stable swap\\n   * @dev Will not use the stored stable swap if the asset passed in is the local asset\\n   * @param _asset - The address of the asset to swap into the local asset\\n   * @param _amount - The amount of the asset to swap\\n   * @return The amount of local asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function calculateSwapToLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    address _local,\\n    uint256 _amount\\n  ) internal view returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // If the asset is the local asset, no swap needed\\n    if (_asset == _local) {\\n      return (_amount, _local);\\n    }\\n\\n    SwapUtils.Swap storage ipool = s.swapStorages[_key];\\n\\n    // Calculate the swap using the appropriate pool.\\n    if (ipool.exists()) {\\n      // if internal swap pool exists\\n      uint8 tokenIndexIn = getTokenIndexFromStableSwapPool(_key, _asset);\\n      uint8 tokenIndexOut = getTokenIndexFromStableSwapPool(_key, _local);\\n      return (ipool.calculateSwap(tokenIndexIn, tokenIndexOut, _amount), _local);\\n    } else {\\n      IStableSwap pool = IStableSwap(getConfig(_key).adoptedToLocalExternalPools);\\n\\n      return (pool.calculateSwapFromAddress(_asset, _local, _amount), _local);\\n    }\\n  }\\n\\n  // ============ Internal: Token ID Helpers ============\\n\\n  /**\\n   * @notice Gets the canonical information for a given candidate.\\n   * @dev First checks the `address(0)` convention, then checks if the asset given is the\\n   * adopted asset, then calculates the local address.\\n   * @return TokenId The canonical token ID information for the given candidate.\\n   */\\n  function getCanonicalTokenId(address _candidate, AppStorage storage s) internal view returns (TokenId memory) {\\n    TokenId memory _canonical;\\n    // If candidate is address(0), return an empty `_canonical`.\\n    if (_candidate == address(0)) {\\n      return _canonical;\\n    }\\n\\n    // Check to see if candidate is an adopted asset.\\n    _canonical = s.adoptedToCanonical[_candidate];\\n    if (_canonical.domain != 0) {\\n      // Candidate is an adopted asset, return canonical info.\\n      return _canonical;\\n    }\\n\\n    // Candidate was not adopted; it could be the local address.\\n    // IFF this domain is the canonical domain, then the local == canonical.\\n    // Otherwise, it will be the representation asset.\\n    if (isLocalOrigin(_candidate, s)) {\\n      // The token originates on this domain, canonical information is the information\\n      // of the candidate\\n      _canonical.domain = s.domain;\\n      _canonical.id = TypeCasts.addressToBytes32(_candidate);\\n    } else {\\n      // on a remote domain, return the representation\\n      _canonical = s.representationToCanonical[_candidate];\\n    }\\n    return _canonical;\\n  }\\n\\n  /**\\n   * @notice Determine if token is of local origin (i.e. it is a locally originating contract,\\n   * and NOT a token deployed by the bridge).\\n   * @param s AppStorage instance.\\n   * @return bool true if token is locally originating, false otherwise.\\n   */\\n  function isLocalOrigin(address _token, AppStorage storage s) internal view returns (bool) {\\n    // If the token contract WAS deployed by the bridge, it will be stored in this mapping.\\n    // If so, the token is NOT of local origin.\\n    if (s.representationToCanonical[_token].domain != 0) {\\n      return false;\\n    }\\n    // If the contract was NOT deployed by the bridge, but the contract does exist, then it\\n    // IS of local origin. Returns true if code exists at `_addr`.\\n    return _token.code.length != 0;\\n  }\\n\\n  /**\\n   * @notice Get the local asset address for a given canonical key, id, and domain.\\n   * @param _key - The hash of canonical id and domain.\\n   * @param _id Canonical ID.\\n   * @param _domain Canonical domain.\\n   * @param s AppStorage instance.\\n   * @return address of the the local asset.\\n   */\\n  function getLocalAsset(\\n    bytes32 _key,\\n    bytes32 _id,\\n    uint32 _domain,\\n    AppStorage storage s\\n  ) internal view returns (address) {\\n    if (_domain == s.domain) {\\n      // Token is of local origin\\n      return TypeCasts.bytes32ToAddress(_id);\\n    } else {\\n      // Token is a representation of a token of remote origin\\n      return getConfig(_key).representation;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the hash of canonical ID and domain.\\n   * @dev This hash is used as the key for many asset-related mappings.\\n   * @param _id Canonical ID.\\n   * @param _domain Canonical domain.\\n   * @return bytes32 Canonical hash, used as key for accessing token info from mappings.\\n   */\\n  function calculateCanonicalHash(bytes32 _id, uint32 _domain) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(_id, _domain));\\n  }\\n\\n  // ============ Internal: Math ============\\n\\n  /**\\n   * @notice This function calculates slippage as a %age of the amount in, and normalizes\\n   * That to the `_out` decimals.\\n   *\\n   * @dev This *ONLY* works for 1:1 assets\\n   *\\n   * @param _in The decimals of the asset in / amount in\\n   * @param _out The decimals of the target asset\\n   * @param _amountIn The starting amount for the swap\\n   * @param _slippage The slippage allowed for the swap, in BPS\\n   * @return uint256 The minimum amount out for the swap\\n   */\\n  function calculateSlippageBoundary(\\n    uint8 _in,\\n    uint8 _out,\\n    uint256 _amountIn,\\n    uint256 _slippage\\n  ) internal pure returns (uint256) {\\n    if (_amountIn == 0) {\\n      return 0;\\n    }\\n    // Get the min recieved (in same decimals as _amountIn)\\n    uint256 min = (_amountIn * (Constants.BPS_FEE_DENOMINATOR - _slippage)) / Constants.BPS_FEE_DENOMINATOR;\\n    return normalizeDecimals(_in, _out, min);\\n  }\\n\\n  /**\\n   * @notice This function translates the _amount in _in decimals\\n   * to _out decimals\\n   *\\n   * @param _in The decimals of the asset in / amount in\\n   * @param _out The decimals of the target asset\\n   * @param _amount The value to normalize to the `_out` decimals\\n   * @return uint256 Normalized decimals.\\n   */\\n  function normalizeDecimals(\\n    uint8 _in,\\n    uint8 _out,\\n    uint256 _amount\\n  ) internal pure returns (uint256) {\\n    if (_in == _out) {\\n      return _amount;\\n    }\\n    // Convert this value to the same decimals as _out\\n    uint256 normalized;\\n    if (_in < _out) {\\n      normalized = _amount * (10**(_out - _in));\\n    } else {\\n      normalized = _amount / (10**(_in - _out));\\n    }\\n    return normalized;\\n  }\\n}\\n\",\"keccak256\":\"0x11b201d50d6c6ccf411a879fc9f95491bcc21da9607d5aad78df95192e937316\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/BridgeMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n// ============ External Imports ============\\nimport {TypedMemView} from \\\"../../../shared/libraries/TypedMemView.sol\\\";\\nimport {TokenId} from \\\"./TokenId.sol\\\";\\n\\nlibrary BridgeMessage {\\n  // ============ Libraries ============\\n\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // ============ Enums ============\\n\\n  // WARNING: do NOT re-write the numbers / order\\n  // of message types in an upgrade;\\n  // will cause in-flight messages to be mis-interpreted\\n  // The Types enum it defines the types of `views` that we use in BridgeMessage. A view\\n  // points to a specific part of the memory and can slice bytes out of it. When we give a `type` to a view,\\n  // we define the structure of the data it points to, so that we can do easy runtime assertions without\\n  // having to fetch the whole data from memory and check for ourselves. In BridgeMessage.sol\\n  // the types of `data` we can have are defined in this enum and may belong to different taxonomies.\\n  // For example, a `Message` includes a `TokenId` and an Action (a `Transfer`).\\n  // The Message is a different TYPE of data than a TokenId or Transfer, as TokenId and Transfer live inside\\n  // the message. For that reason, we define them as different data types and we add them to the same enum\\n  // for ease of use.\\n  enum Types {\\n    Invalid, // 0\\n    TokenId, // 1\\n    Message, // 2\\n    Transfer // 3\\n  }\\n\\n  // ============ Constants ============\\n\\n  uint256 private constant TOKEN_ID_LEN = 36; // 4 bytes domain + 32 bytes id\\n  uint256 private constant IDENTIFIER_LEN = 1;\\n  uint256 private constant TRANSFER_LEN = 65; // 1 byte identifier + 32 bytes amount + 32 bytes transfer id\\n\\n  // ============ Modifiers ============\\n\\n  /**\\n   * @notice Asserts a message is of type `_t`\\n   * @param _view The message\\n   * @param _t The expected type\\n   */\\n  modifier typeAssert(bytes29 _view, Types _t) {\\n    _view.assertType(uint40(_t));\\n    _;\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Checks that Action is valid type\\n   * @param _action The action\\n   * @return TRUE if action is valid\\n   */\\n  function isValidAction(bytes29 _action) internal pure returns (bool) {\\n    return isTransfer(_action);\\n  }\\n\\n  /**\\n   * @notice Checks that view is a valid message length\\n   * @param _view The bytes string\\n   * @return TRUE if message is valid\\n   */\\n  function isValidMessageLength(bytes29 _view) internal pure returns (bool) {\\n    uint256 _len = _view.len();\\n    return _len == TOKEN_ID_LEN + TRANSFER_LEN;\\n  }\\n\\n  /**\\n   * @notice Formats an action message\\n   * @param _tokenId The token ID\\n   * @param _action The action\\n   * @return The formatted message\\n   */\\n  function formatMessage(bytes29 _tokenId, bytes29 _action)\\n    internal\\n    view\\n    typeAssert(_tokenId, Types.TokenId)\\n    returns (bytes memory)\\n  {\\n    require(isValidAction(_action), \\\"!action\\\");\\n    bytes29[] memory _views = new bytes29[](2);\\n    _views[0] = _tokenId;\\n    _views[1] = _action;\\n    return TypedMemView.join(_views);\\n  }\\n\\n  /**\\n   * @notice Returns the type of the message\\n   * @param _view The message\\n   * @return The type of the message\\n   */\\n  function messageType(bytes29 _view) internal pure returns (Types) {\\n    return Types(uint8(_view.typeOf()));\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of the specified type\\n   * @param _type the type to check for\\n   * @param _action The message\\n   * @return True if the message is of the specified type\\n   */\\n  function isType(bytes29 _action, Types _type) internal pure returns (bool) {\\n    return actionType(_action) == uint8(_type) && messageType(_action) == _type;\\n  }\\n\\n  /**\\n   * @notice Checks that the message is of type Transfer\\n   * @param _action The message\\n   * @return True if the message is of type Transfer\\n   */\\n  function isTransfer(bytes29 _action) internal pure returns (bool) {\\n    return isType(_action, Types.Transfer);\\n  }\\n\\n  /**\\n   * @notice Formats Transfer\\n   * @param _amnt The transfer amount\\n   * @param _transferId The unique identifier of the transfer\\n   * @return\\n   */\\n  function formatTransfer(uint256 _amnt, bytes32 _transferId) internal pure returns (bytes29) {\\n    return abi.encodePacked(Types.Transfer, _amnt, _transferId).ref(uint40(Types.Transfer));\\n  }\\n\\n  /**\\n   * @notice Serializes a Token ID struct\\n   * @param _tokenId The token id struct\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(TokenId memory _tokenId) internal pure returns (bytes29) {\\n    return formatTokenId(_tokenId.domain, _tokenId.id);\\n  }\\n\\n  /**\\n   * @notice Creates a serialized Token ID from components\\n   * @param _domain The domain\\n   * @param _id The ID\\n   * @return The formatted Token ID\\n   */\\n  function formatTokenId(uint32 _domain, bytes32 _id) internal pure returns (bytes29) {\\n    return abi.encodePacked(_domain, _id).ref(uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Retrieves the domain from a TokenID\\n   * @param _tokenId The message\\n   * @return The domain\\n   */\\n  function domain(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (uint32) {\\n    return uint32(_tokenId.indexUint(0, 4));\\n  }\\n\\n  /**\\n   * @notice Retrieves the ID from a TokenID\\n   * @param _tokenId The message\\n   * @return The ID\\n   */\\n  function id(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (bytes32) {\\n    // before = 4 bytes domain\\n    return _tokenId.index(4, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the EVM ID\\n   * @param _tokenId The message\\n   * @return The EVM ID\\n   */\\n  function evmId(bytes29 _tokenId) internal pure typeAssert(_tokenId, Types.TokenId) returns (address) {\\n    // before = 4 bytes domain + 12 bytes empty to trim for address\\n    return _tokenId.indexAddress(16);\\n  }\\n\\n  /**\\n   * @notice Retrieves the action identifier from message\\n   * @param _message The action\\n   * @return The message type\\n   */\\n  function msgType(bytes29 _message) internal pure returns (uint8) {\\n    return uint8(_message.indexUint(TOKEN_ID_LEN, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the identifier from action\\n   * @param _action The action\\n   * @return The action type\\n   */\\n  function actionType(bytes29 _action) internal pure returns (uint8) {\\n    return uint8(_action.indexUint(0, 1));\\n  }\\n\\n  /**\\n   * @notice Retrieves the amount from a Transfer\\n   * @param _transferAction The message\\n   * @return The amount\\n   */\\n  function amnt(bytes29 _transferAction) internal pure returns (uint256) {\\n    // before = 1 byte identifier = 1 bytes\\n    return _transferAction.indexUint(1, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the transfer id from a Transfer\\n   * @param _transferAction The message\\n   * @return The id\\n   */\\n  function transferId(bytes29 _transferAction) internal pure returns (bytes32) {\\n    // before = 1 byte identifier + 32 bytes amount = 33 bytes\\n    return _transferAction.index(33, 32);\\n  }\\n\\n  /**\\n   * @notice Retrieves the token ID from a Message\\n   * @param _message The message\\n   * @return The ID\\n   */\\n  function tokenId(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));\\n  }\\n\\n  /**\\n   * @notice Retrieves the action data from a Message\\n   * @param _message The message\\n   * @return The action\\n   */\\n  function action(bytes29 _message) internal pure typeAssert(_message, Types.Message) returns (bytes29) {\\n    uint256 _actionLen = _message.len() - TOKEN_ID_LEN;\\n    uint40 _type = uint40(msgType(_message));\\n    return _message.slice(TOKEN_ID_LEN, _actionLen, _type);\\n  }\\n\\n  /**\\n   * @notice Converts to a Message\\n   * @param _message The message\\n   * @return The newly typed message\\n   */\\n  function tryAsMessage(bytes29 _message) internal pure returns (bytes29) {\\n    if (isValidMessageLength(_message)) {\\n      return _message.castTo(uint40(Types.Message));\\n    }\\n    return TypedMemView.nullView();\\n  }\\n\\n  /**\\n   * @notice Asserts that the message is of type Message\\n   * @param _view The message\\n   * @return The message\\n   */\\n  function mustBeMessage(bytes29 _view) internal pure returns (bytes29) {\\n    return tryAsMessage(_view).assertValid();\\n  }\\n}\\n\",\"keccak256\":\"0x18f34053f524fbed1c307c08e863d015b96dade86249276eb05fbd5b8ac86a6b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nlibrary Constants {\\n  // ============= Initial Values =============\\n\\n  /**\\n   * @notice Sets the initial lp fee at 5 bps\\n   */\\n  uint256 public constant INITIAL_LIQUIDITY_FEE_NUMERATOR = 9_995;\\n\\n  /**\\n   * @notice Sets the initial max routers per transfer\\n   */\\n  uint256 public constant INITIAL_MAX_ROUTERS = 5;\\n\\n  /**\\n   * @notice Sets the initial max routers per transfer\\n   */\\n  uint16 public constant INITIAL_AAVE_REFERRAL_CODE = 0;\\n\\n  // =============\\n\\n  // ============= Unchangeable Values =============\\n  // ============= Facets\\n\\n  /**\\n   * @notice Reentrancy modifier for diamond\\n   */\\n  uint256 internal constant NOT_ENTERED = 1;\\n\\n  /**\\n   * @notice Reentrancy modifier for diamond\\n   */\\n  uint256 internal constant ENTERED = 2;\\n\\n  /**\\n   * @notice Contains hash of empty bytes\\n   */\\n  bytes32 internal constant EMPTY_HASH = keccak256(\\\"\\\");\\n\\n  /**\\n   * @notice Denominator for BPS values\\n   */\\n  uint256 public constant BPS_FEE_DENOMINATOR = 10_000;\\n\\n  /**\\n   * @notice Value for delay used on governance\\n   */\\n  uint256 public constant GOVERNANCE_DELAY = 7 days;\\n\\n  /**\\n   * @notice Required gas amount to be leftover after passing in `gasleft` when\\n   * executing calldata (see `_executeCalldata` method).\\n   */\\n  uint256 public constant EXECUTE_CALLDATA_RESERVE_GAS = 10_000;\\n\\n  /**\\n   * @notice Portal referral code\\n   */\\n  uint16 public constant AAVE_REFERRAL_CODE = 0;\\n\\n  // ============= ConnextPriceOracle\\n  /**\\n   * @notice Valid period for a price delivered by the price oracle\\n   */\\n  uint256 public constant ORACLE_VALID_PERIOD = 1 minutes;\\n\\n  /**\\n   * @notice Valid wiggle room for future timestamps (3s) used by `setDirectPrice`\\n   */\\n  uint256 public constant FUTURE_TIME_BUFFER = 3;\\n\\n  /**\\n   * @notice Defalt decimals values are normalized to\\n   */\\n  uint8 public constant DEFAULT_NORMALIZED_DECIMALS = uint8(18);\\n\\n  /**\\n   * @notice Bytes of return data copied back when using `excessivelySafeCall`\\n   */\\n  uint16 public constant DEFAULT_COPY_BYTES = 256;\\n\\n  /**\\n   * @notice Valid deadline extension used when swapping (1hr)\\n   */\\n  uint256 public constant DEFAULT_DEADLINE_EXTENSION = 3600;\\n\\n  // ============= Swaps\\n  /**\\n   * @notice the precision all pools tokens will be converted to\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   *\\n   * The minimum in a pool is 2 (nextUSDC, USDC), and the maximum allowed is 16. While\\n   * we do not have pools supporting this number of token, allowing a larger value leaves\\n   * the possibility open to pool multiple stable local/adopted pairs, garnering greater\\n   * capital efficiency. 16 specifically was chosen as a bit of a sweet spot between the\\n   * default of 32 and what we will realistically host in pools.\\n   */\\n  uint256 public constant MINIMUM_POOLED_TOKENS = 2;\\n  uint256 public constant MAXIMUM_POOLED_TOKENS = 16;\\n\\n  /**\\n   * @notice the precision all pools tokens will be converted to\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint8 public constant POOL_PRECISION_DECIMALS = 18;\\n\\n  /**\\n   * @notice the denominator used to calculate admin and LP fees. For example, an\\n   * LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant FEE_DENOMINATOR = 1e10;\\n\\n  /**\\n   * @notice Max swap fee is 1% or 100bps of each swap\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant MAX_SWAP_FEE = 1e8;\\n\\n  /**\\n   * @notice Max adminFee is 100% of the swapFee. adminFee does not add additional fee on top of swapFee.\\n   * Instead it takes a certain % of the swapFee. Therefore it has no impact on the\\n   * users but only on the earnings of LPs\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant MAX_ADMIN_FEE = 1e10;\\n\\n  /**\\n   * @notice constant value used as max loop limit\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant MAX_LOOP_LIMIT = 256;\\n\\n  // Constant value used as max delay time for removing swap after disabled\\n  uint256 internal constant REMOVE_DELAY = 7 days;\\n\\n  /**\\n   * @notice constant values used in ramping A calculations\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant A_PRECISION = 100;\\n  uint256 public constant MAX_A = 10**6;\\n  uint256 public constant MAX_A_CHANGE = 2;\\n  uint256 public constant MIN_RAMP_TIME = 14 days;\\n  uint256 public constant MIN_RAMP_DELAY = 1 days;\\n}\\n\",\"keccak256\":\"0x2c4d18cad8bb4e24f57619884e66fed2b44f78c4cf87e296ed34e4cb7fc399f0\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IStableSwap} from \\\"../interfaces/IStableSwap.sol\\\";\\nimport {IConnectorManager} from \\\"../../../messaging/interfaces/IConnectorManager.sol\\\";\\nimport {SwapUtils} from \\\"./SwapUtils.sol\\\";\\nimport {TokenId} from \\\"./TokenId.sol\\\";\\n\\n/**\\n * @notice THIS FILE DEFINES OUR STORAGE LAYOUT AND ID GENERATION SCHEMA. IT CAN ONLY BE MODIFIED FREELY FOR FRESH\\n * DEPLOYS. If you are modifiying this file for an upgrade, you must **CAREFULLY** ensure\\n * the contract storage layout is not impacted.\\n *\\n * BE VERY CAREFUL MODIFYING THE VALUES IN THIS FILE!\\n */\\n\\n// ============= Enum =============\\n\\n/// @notice Enum representing address role\\n// Returns uint\\n// None     - 0\\n// Router   - 1\\n// Watcher  - 2\\n// Admin    - 3\\nenum Role {\\n  None,\\n  RouterAdmin,\\n  Watcher,\\n  Admin\\n}\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\\n\\n/**\\n * @notice Contains configs for each router\\n * @param approved Whether the router is allowlisted, settable by admin\\n * @param portalApproved Whether the router is allowlisted for portals, settable by admin\\n * @param routerOwners The address that can update the `recipient`\\n * @param proposedRouterOwners Owner candidates\\n * @param proposedRouterTimestamp When owner candidate was proposed (there is a delay to acceptance)\\n */\\nstruct RouterConfig {\\n  bool approved;\\n  bool portalApproved;\\n  address owner;\\n  address recipient;\\n  address proposed;\\n  uint256 proposedTimestamp;\\n}\\n\\n/**\\n * @notice Contains configurations for tokens\\n * @dev Struct will be stored on the hash of the `canonicalId` and `canonicalDomain`. There are also\\n * two separate reverse lookups, that deliver plaintext information based on the passed in address (can\\n * either be representation or adopted address passed in).\\n *\\n * If the decimals are updated in a future token upgrade, the transfers should fail. If that happens, the\\n * asset and swaps must be removed, and then they can be readded\\n *\\n * @param representation Address of minted asset on this domain. If the token is of local origin (meaning it was\\n * originally deployed on this chain), this MUST map to address(0).\\n * @param representationDecimals Decimals of minted asset on this domain\\n * @param adopted Address of adopted asset on this domain\\n * @param adoptedDecimals Decimals of adopted asset on this domain\\n * @param adoptedToLocalExternalPools Holds the AMMs for swapping in and out of local assets\\n * @param approval Allowed assets\\n * @param cap Liquidity caps of whitelisted assets. If 0, no cap is enforced.\\n * @param custodied Custodied balance by address\\n */\\nstruct TokenConfig {\\n  address representation;\\n  uint8 representationDecimals;\\n  address adopted;\\n  uint8 adoptedDecimals;\\n  address adoptedToLocalExternalPools;\\n  bool approval;\\n  uint256 cap;\\n  uint256 custodied;\\n}\\n\\nstruct AppStorage {\\n  //\\n  // 0\\n  bool initialized;\\n  //\\n  // Connext\\n  //\\n  // 1\\n  uint256 LIQUIDITY_FEE_NUMERATOR;\\n  /**\\n   * @notice The local address that is custodying relayer fees\\n   */\\n  // 2\\n  address relayerFeeVault;\\n  /**\\n   * @notice Nonce for the contract, used to keep unique transfer ids.\\n   * @dev Assigned at first interaction (xcall on origin domain).\\n   */\\n  // 3\\n  uint256 nonce;\\n  /**\\n   * @notice The domain this contract exists on.\\n   * @dev Must match the domain identifier, which is distinct from the \\\"chainId\\\".\\n   */\\n  // 4\\n  uint32 domain;\\n  /**\\n   * @notice Mapping of adopted to canonical asset information.\\n   */\\n  // 5\\n  mapping(address => TokenId) adoptedToCanonical;\\n  /**\\n   * @notice Mapping of representation to canonical asset information.\\n   */\\n  // 6\\n  mapping(address => TokenId) representationToCanonical;\\n  /**\\n   * @notice Mapping of hash(canonicalId, canonicalDomain) to token config on this domain.\\n   */\\n  // 7\\n  mapping(bytes32 => TokenConfig) tokenConfigs;\\n  /**\\n   * @notice Mapping to track transfer status on destination domain\\n   */\\n  // 8\\n  mapping(bytes32 => DestinationTransferStatus) transferStatus;\\n  /**\\n   * @notice Mapping holding router address that provided fast liquidity.\\n   */\\n  // 9\\n  mapping(bytes32 => address[]) routedTransfers;\\n  /**\\n   * @notice Mapping of router to available balance of an asset.\\n   * @dev Routers should always store liquidity that they can expect to receive via the bridge on\\n   * this domain (the local asset).\\n   */\\n  // 10\\n  mapping(address => mapping(address => uint256)) routerBalances;\\n  /**\\n   * @notice Mapping of approved relayers\\n   * @dev Send relayer fee if msg.sender is approvedRelayer; otherwise revert.\\n   */\\n  // 11\\n  mapping(address => bool) approvedRelayers;\\n  /**\\n   * @notice The max amount of routers a payment can be routed through.\\n   */\\n  // 12\\n  uint256 maxRoutersPerTransfer;\\n  /**\\n   * @notice Stores a mapping of transfer id to slippage overrides.\\n   */\\n  // 13\\n  mapping(bytes32 => uint256) slippage;\\n  /**\\n   * @notice Stores a mapping of transfer id to receive local overrides.\\n   */\\n  // 14\\n  mapping(bytes32 => bool) receiveLocalOverride;\\n  /**\\n   * @notice Stores a mapping of remote routers keyed on domains.\\n   * @dev Addresses are cast to bytes32.\\n   * This mapping is required because the Connext now contains the BridgeRouter and must implement\\n   * the remotes interface.\\n   */\\n  // 15\\n  mapping(uint32 => bytes32) remotes;\\n  //\\n  // ProposedOwnable\\n  //\\n  // 17\\n  address _proposed;\\n  // 18\\n  uint256 _proposedOwnershipTimestamp;\\n  // 19\\n  bool _routerAllowlistRemoved;\\n  // 20\\n  uint256 _routerAllowlistTimestamp;\\n  /**\\n   * @notice Stores a mapping of address to Roles\\n   * @dev returns uint representing the enum Role value\\n   */\\n  // 21\\n  mapping(address => Role) roles;\\n  //\\n  // RouterFacet\\n  //\\n  // 22\\n  mapping(address => RouterConfig) routerConfigs;\\n  //\\n  // ReentrancyGuard\\n  //\\n  // 23\\n  uint256 _status;\\n  // 24\\n  uint256 _xcallStatus;\\n  //\\n  // StableSwap\\n  //\\n  /**\\n   * @notice Mapping holding the AMM storages for swapping in and out of local assets\\n   * @dev Swaps for an adopted asset <> local asset (i.e. POS USDC <> nextUSDC on polygon)\\n   * Struct storing data responsible for automatic market maker functionalities. In order to\\n   * access this data, this contract uses SwapUtils library. For more details, see SwapUtils.sol.\\n   */\\n  // 25\\n  mapping(bytes32 => SwapUtils.Swap) swapStorages;\\n  /**\\n   * @notice Maps token address to an index in the pool. Used to prevent duplicate tokens in the pool.\\n   * @dev getTokenIndex function also relies on this mapping to retrieve token index.\\n   */\\n  // 26\\n  mapping(bytes32 => mapping(address => uint8)) tokenIndexes;\\n  /**\\n   * The address of an existing LPToken contract to use as a target\\n   * this target must be the address which connext deployed on this chain.\\n   */\\n  // 27\\n  address lpTokenTargetAddress;\\n  /**\\n   * @notice Stores whether or not bribing, AMMs, have been paused.\\n   */\\n  // 28\\n  bool _paused;\\n  //\\n  // AavePortals\\n  //\\n  /**\\n   * @notice Address of Aave Pool contract.\\n   */\\n  // 29\\n  address aavePool;\\n  /**\\n   * @notice Fee percentage numerator for using Portal liquidity.\\n   * @dev Assumes the same basis points as the liquidity fee.\\n   */\\n  // 30\\n  uint256 aavePortalFeeNumerator;\\n  /**\\n   * @notice Mapping to store the transfer liquidity amount provided by Aave Portals.\\n   */\\n  // 31\\n  mapping(bytes32 => uint256) portalDebt;\\n  /**\\n   * @notice Mapping to store the transfer liquidity amount provided by Aave Portals.\\n   */\\n  // 32\\n  mapping(bytes32 => uint256) portalFeeDebt;\\n  /**\\n   * @notice Mapping of approved sequencers\\n   * @dev Sequencer address provided must belong to an approved sequencer in order to call `execute`\\n   * for the fast liquidity route.\\n   */\\n  // 33\\n  mapping(address => bool) approvedSequencers;\\n  /**\\n   * @notice Remote connection manager for xapp.\\n   */\\n  // 34\\n  IConnectorManager xAppConnectionManager;\\n}\\n\\nlibrary LibConnextStorage {\\n  function connextStorage() internal pure returns (AppStorage storage ds) {\\n    assembly {\\n      ds.slot := 0\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfe33ca33dbd4136708e5467a4bae98abd105064e0c2ce0c2c2c7576d1c26350d\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n    // hash of proposed facets => acceptance time\\n    mapping(bytes32 => uint256) acceptanceTimes;\\n    // acceptance delay for upgrading facets\\n    uint256 acceptanceDelay;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function setContractOwner(address _newOwner) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    emit OwnershipTransferred(ds.contractOwner, _newOwner);\\n    ds.contractOwner = _newOwner;\\n  }\\n\\n  function contractOwner() internal view returns (address contractOwner_) {\\n    contractOwner_ = diamondStorage().contractOwner;\\n  }\\n\\n  function acceptanceDelay() internal view returns (uint256) {\\n    return diamondStorage().acceptanceDelay;\\n  }\\n\\n  function acceptanceTime(bytes32 _key) internal view returns (uint256) {\\n    return diamondStorage().acceptanceTimes[_key];\\n  }\\n\\n  function enforceIsContractOwner() internal view {\\n    require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: !contract owner\\\");\\n  }\\n\\n  event DiamondCutProposed(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata, uint256 deadline);\\n\\n  function proposeDiamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    // NOTE: to save gas, verification that `proposeDiamondCut` and `diamondCut` are not\\n    // included is performed in `diamondCut`, where there is already a loop over facets.\\n    // In the case where these cuts are performed, admins must call `rescindDiamondCut`\\n\\n    DiamondStorage storage ds = diamondStorage();\\n    uint256 acceptance = block.timestamp + ds.acceptanceDelay;\\n    ds.acceptanceTimes[keccak256(abi.encode(_diamondCut, _init, _calldata))] = acceptance;\\n    emit DiamondCutProposed(_diamondCut, _init, _calldata, acceptance);\\n  }\\n\\n  event DiamondCutRescinded(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  function rescindDiamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    // NOTE: you can always rescind a proposed facet cut as the owner, even if outside of the validity\\n    // period or befor the delay elpases\\n    delete diamondStorage().acceptanceTimes[keccak256(abi.encode(_diamondCut, _init, _calldata))];\\n    emit DiamondCutRescinded(_diamondCut, _init, _calldata);\\n  }\\n\\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  // Internal function version of diamondCut\\n  function diamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    bytes32 key = keccak256(abi.encode(_diamondCut, _init, _calldata));\\n    if (ds.facetAddresses.length != 0) {\\n      uint256 time = ds.acceptanceTimes[key];\\n      require(time != 0 && time <= block.timestamp, \\\"LibDiamond: delay not elapsed\\\");\\n      // Reset the acceptance time to ensure the same set of updates cannot be replayed\\n      // without going through a proposal window\\n\\n      // NOTE: the only time this will not be set to 0 is when there are no\\n      // existing facet addresses (on initialization, or when starting after a bad upgrade,\\n      // for example).\\n      // The only relevant case is the initial case, which has no acceptance time. otherwise,\\n      // there is no way to update the facet selector mapping to call `diamondCut`.\\n      // Avoiding setting the empty value will save gas on the initial deployment.\\n      delete ds.acceptanceTimes[key];\\n    } // Otherwise, this is the first instance of deployment and it can be set automatically\\n    uint256 len = _diamondCut.length;\\n    for (uint256 facetIndex; facetIndex < len; ) {\\n      IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == IDiamondCut.FacetCutAction.Add) {\\n        addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n        replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n        removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else {\\n        revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n      }\\n\\n      unchecked {\\n        ++facetIndex;\\n      }\\n    }\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length != 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    uint256 len = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < len; ) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n\\n      unchecked {\\n        ++selectorIndex;\\n      }\\n    }\\n  }\\n\\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    uint256 len = _functionSelectors.length;\\n    require(len != 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < len; ) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n      removeFunction(ds, oldFacetAddress, selector);\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n\\n      unchecked {\\n        ++selectorIndex;\\n      }\\n    }\\n  }\\n\\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length != 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    // get the propose and cut selectors -- can never remove these\\n    bytes4 proposeSelector = IDiamondCut.proposeDiamondCut.selector;\\n    bytes4 cutSelector = IDiamondCut.diamondCut.selector;\\n    // if function does not exist then do nothing and return\\n    require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n    uint256 len = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < len; ) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      require(selector != proposeSelector && selector != cutSelector, \\\"LibDiamondCut: Cannot remove cut selectors\\\");\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      removeFunction(ds, oldFacetAddress, selector);\\n\\n      unchecked {\\n        ++selectorIndex;\\n      }\\n    }\\n  }\\n\\n  function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n    enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n    ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n    ds.facetAddresses.push(_facetAddress);\\n  }\\n\\n  function addFunction(\\n    DiamondStorage storage ds,\\n    bytes4 _selector,\\n    uint96 _selectorPosition,\\n    address _facetAddress\\n  ) internal {\\n    ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n    ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n  }\\n\\n  function removeFunction(\\n    DiamondStorage storage ds,\\n    address _facetAddress,\\n    bytes4 _selector\\n  ) internal {\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n    // an immutable function is a function defined directly in a diamond\\n    require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n    // replace selector with last selector, then delete last selector\\n    uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n    uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n    // if not the same then replace _selector with lastSelector\\n    if (selectorPosition != lastSelectorPosition) {\\n      bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n    }\\n    // delete the last selector\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n    delete ds.selectorToFacetAndPosition[_selector];\\n\\n    // if no more selectors for facet address then delete the facet address\\n    if (lastSelectorPosition == 0) {\\n      // replace facet address with last facet address and delete last facet address\\n      uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n      uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n      if (facetAddressPosition != lastFacetAddressPosition) {\\n        address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n        ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n        ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n      }\\n      ds.facetAddresses.pop();\\n      delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n    }\\n  }\\n\\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n    if (_init == address(0)) {\\n      require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n    } else {\\n      require(_calldata.length != 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n      if (_init != address(this)) {\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n      }\\n      (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n      if (!success) {\\n        if (error.length != 0) {\\n          // bubble up the error\\n          revert(string(error));\\n        } else {\\n          revert(\\\"LibDiamondCut: _init function reverted\\\");\\n        }\\n      }\\n    }\\n  }\\n\\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n    require(_contract.code.length != 0, _errorMessage);\\n  }\\n}\\n\",\"keccak256\":\"0x630090ecfe33ecddbe664c844b41da0e6ed6275b8d19e4922707adee5384a61e\",\"license\":\"MIT\"},\"contracts/core/connext/libraries/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/**\\n * @title MathUtils library\\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\\n * differences between two uint256.\\n */\\nlibrary MathUtils {\\n  /**\\n   * @notice Compares a and b and returns true if the difference between a and b\\n   *         is less than 1 or equal to each other.\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return True if the difference between a and b is less than 1 or equal,\\n   *         otherwise return false\\n   */\\n  function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n    return (difference(a, b) < 1 + 1); // instead of <=1\\n  }\\n\\n  /**\\n   * @notice Calculates absolute difference between a and b\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return Difference between a and b\\n   */\\n  function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a > b) {\\n      return a - b;\\n    }\\n    return b - a;\\n  }\\n}\\n\",\"keccak256\":\"0xe5f282e178c23b58b7c7880c59b4d9d191ca8766921eb8407bce284dc1b7866a\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/SwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {LPToken} from \\\"../helpers/LPToken.sol\\\";\\n\\nimport {AmplificationUtils} from \\\"./AmplificationUtils.sol\\\";\\nimport {MathUtils} from \\\"./MathUtils.sol\\\";\\nimport {AssetLogic} from \\\"./AssetLogic.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title SwapUtils library\\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\\n * Admin functions should be protected within contracts using this library.\\n */\\nlibrary SwapUtils {\\n  using SafeERC20 for IERC20;\\n  using MathUtils for uint256;\\n\\n  /*** EVENTS ***/\\n\\n  event TokenSwap(\\n    bytes32 indexed key,\\n    address indexed buyer,\\n    uint256 tokensSold,\\n    uint256 tokensBought,\\n    uint128 soldId,\\n    uint128 boughtId\\n  );\\n  event AddLiquidity(\\n    bytes32 indexed key,\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    bytes32 indexed key,\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    bytes32 indexed key,\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(bytes32 indexed key, uint256 newAdminFee);\\n  event NewSwapFee(bytes32 indexed key, uint256 newSwapFee);\\n\\n  struct Swap {\\n    // variables around the ramp management of A,\\n    // the amplification coefficient * n ** (n - 1)\\n    // see Curve stableswap paper for details\\n    bytes32 key;\\n    uint256 initialA;\\n    uint256 futureA;\\n    uint256 initialATime;\\n    uint256 futureATime;\\n    // fee calculation\\n    uint256 swapFee;\\n    uint256 adminFee;\\n    LPToken lpToken;\\n    // contract references for all tokens being pooled\\n    IERC20[] pooledTokens;\\n    // multipliers for each pooled token's precision to get to Constants.POOL_PRECISION_DECIMALS\\n    // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC\\n    // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10\\n    uint256[] tokenPrecisionMultipliers;\\n    // the pool balance of each token, in the token's precision\\n    // the contract's actual token balance might differ\\n    uint256[] balances;\\n    // the admin fee balance of each token, in the token's precision\\n    uint256[] adminFees;\\n    // the flag if this pool disabled by admin. once disabled, only remove liquidity will work.\\n    bool disabled;\\n    // once pool disabled, admin can remove pool after passed removeTime. and reinitialize.\\n    uint256 removeTime;\\n  }\\n\\n  // Struct storing variables used in calculations in the\\n  // calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n  struct CalculateWithdrawOneTokenDYInfo {\\n    uint256 d0;\\n    uint256 d1;\\n    uint256 newY;\\n    uint256 feePerToken;\\n    uint256 preciseA;\\n  }\\n\\n  // Struct storing variables used in calculations in the\\n  // {add,remove}Liquidity functions to avoid stack too deep errors\\n  struct ManageLiquidityInfo {\\n    uint256 d0;\\n    uint256 d1;\\n    uint256 d2;\\n    uint256 preciseA;\\n    LPToken lpToken;\\n    uint256 totalSupply;\\n    uint256[] balances;\\n    uint256[] multipliers;\\n  }\\n\\n  /*** VIEW & PURE FUNCTIONS ***/\\n\\n  function _getAPrecise(Swap storage self) private view returns (uint256) {\\n    return AmplificationUtils._getAPrecise(self);\\n  }\\n\\n  /**\\n   * @notice Calculate the dy, the amount of selected token that user receives and\\n   * the fee of withdrawing in one token\\n   * @param tokenAmount the amount to withdraw in the pool's precision\\n   * @param tokenIndex which token will be withdrawn\\n   * @param self Swap struct to read from\\n   * @return the amount of token user will receive\\n   */\\n  function calculateWithdrawOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) internal view returns (uint256) {\\n    (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\\n      self,\\n      tokenAmount,\\n      tokenIndex,\\n      self.lpToken.totalSupply()\\n    );\\n    return availableTokenAmount;\\n  }\\n\\n  function _calculateWithdrawOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 totalSupply\\n  ) private view returns (uint256, uint256) {\\n    uint256 dy;\\n    uint256 newY;\\n    uint256 currentY;\\n\\n    (dy, newY, currentY) = calculateWithdrawOneTokenDY(self, tokenIndex, tokenAmount, totalSupply);\\n\\n    // dy_0 (without fees)\\n    // dy, dy_0 - dy\\n\\n    uint256 dySwapFee = (currentY - newY) / self.tokenPrecisionMultipliers[tokenIndex] - dy;\\n\\n    return (dy, dySwapFee);\\n  }\\n\\n  /**\\n   * @notice Calculate the dy of withdrawing in one token\\n   * @param self Swap struct to read from\\n   * @param tokenIndex which token will be withdrawn\\n   * @param tokenAmount the amount to withdraw in the pools precision\\n   * @return the d and the new y after withdrawing one token\\n   */\\n  function calculateWithdrawOneTokenDY(\\n    Swap storage self,\\n    uint8 tokenIndex,\\n    uint256 tokenAmount,\\n    uint256 totalSupply\\n  )\\n    internal\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    // Get the current D, then solve the stableswap invariant\\n    // y_i for D - tokenAmount\\n    uint256[] memory xp = _xp(self);\\n\\n    require(tokenIndex < xp.length, \\\"index out of range\\\");\\n\\n    CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n    v.preciseA = _getAPrecise(self);\\n    v.d0 = getD(xp, v.preciseA);\\n    v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\\n\\n    require(tokenAmount <= xp[tokenIndex], \\\"exceeds available\\\");\\n\\n    v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);\\n\\n    uint256[] memory xpReduced = new uint256[](xp.length);\\n\\n    v.feePerToken = _feePerToken(self.swapFee, xp.length);\\n    // TODO: Set a length variable (at top) instead of reading xp.length on each loop.\\n    uint256 len = xp.length;\\n    for (uint256 i; i < len; ) {\\n      uint256 xpi = xp[i];\\n      // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\\n      // else dxExpected = xp[i] - (xp[i] * d1 / d0)\\n      // xpReduced[i] -= dxExpected * fee / Constants.FEE_DENOMINATOR\\n      xpReduced[i] =\\n        xpi -\\n        ((((i == tokenIndex) ? ((xpi * v.d1) / v.d0 - v.newY) : (xpi - (xpi * v.d1) / v.d0)) * v.feePerToken) /\\n          Constants.FEE_DENOMINATOR);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    uint256 dy = xpReduced[tokenIndex] - getYD(v.preciseA, tokenIndex, xpReduced, v.d1);\\n    dy = (dy - 1) / (self.tokenPrecisionMultipliers[tokenIndex]);\\n\\n    return (dy, v.newY, xp[tokenIndex]);\\n  }\\n\\n  /**\\n   * @notice Calculate the price of a token in the pool with given\\n   * precision-adjusted balances and a particular D.\\n   *\\n   * @dev This is accomplished via solving the invariant iteratively.\\n   * See the StableSwap paper and Curve.fi implementation for further details.\\n   *\\n   * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n   * x_1**2 + b*x_1 = c\\n   * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n   *\\n   * @param a the amplification coefficient * n ** (n - 1). See the StableSwap paper for details.\\n   * @param tokenIndex Index of token we are calculating for.\\n   * @param xp a precision-adjusted set of pool balances. Array should be\\n   * the same cardinality as the pool.\\n   * @param d the stableswap invariant\\n   * @return the price of the token, in the same precision as in xp\\n   */\\n  function getYD(\\n    uint256 a,\\n    uint8 tokenIndex,\\n    uint256[] memory xp,\\n    uint256 d\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = xp.length;\\n    require(tokenIndex < numTokens, \\\"Token not found\\\");\\n\\n    uint256 c = d;\\n    uint256 s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i; i < numTokens; ) {\\n      if (i != tokenIndex) {\\n        s += xp[i];\\n        c = (c * d) / (xp[i] * numTokens);\\n        // If we were to protect the division loss we would have to keep the denominator separate\\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n        // c = c * D * D * D * ... overflow!\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    c = (c * d * Constants.A_PRECISION) / (nA * numTokens);\\n\\n    uint256 b = s + ((d * Constants.A_PRECISION) / nA);\\n    uint256 yPrev;\\n    // Select d as the starting point of the Newton method. Because y < D\\n    // D is the best option as the starting point in case the pool is very imbalanced.\\n    uint256 y = d;\\n    for (uint256 i; i < Constants.MAX_LOOP_LIMIT; ) {\\n      yPrev = y;\\n      y = ((y * y) + c) / ((y * 2) + b - d);\\n      if (y.within1(yPrev)) {\\n        return y;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n   * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\\n   * as the pool.\\n   * @param a the amplification coefficient * n ** (n - 1) in A_PRECISION.\\n   * See the StableSwap paper for details\\n   * @return the invariant, at the precision of the pool\\n   */\\n  function getD(uint256[] memory xp, uint256 a) internal pure returns (uint256) {\\n    uint256 numTokens = xp.length;\\n    uint256 s;\\n    for (uint256 i; i < numTokens; ) {\\n      s += xp[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    if (s == 0) {\\n      return 0;\\n    }\\n\\n    uint256 prevD;\\n    uint256 d = s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i; i < Constants.MAX_LOOP_LIMIT; ) {\\n      uint256 dP = d;\\n      for (uint256 j; j < numTokens; ) {\\n        dP = (dP * d) / (xp[j] * numTokens);\\n        // If we were to protect the division loss we would have to keep the denominator separate\\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n        // dP = dP * D * D * D * ... overflow!\\n\\n        unchecked {\\n          ++j;\\n        }\\n      }\\n      prevD = d;\\n      d =\\n        (((nA * s) / Constants.A_PRECISION + dP * numTokens) * d) /\\n        ((((nA - Constants.A_PRECISION) * d) / Constants.A_PRECISION + (numTokens + 1) * dP));\\n      if (d.within1(prevD)) {\\n        return d;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n    // function which does not rely on D.\\n    revert(\\\"D does not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Given a set of balances and precision multipliers, return the\\n   * precision-adjusted balances.\\n   *\\n   * @param balances an array of token balances, in their native precisions.\\n   * These should generally correspond with pooled tokens.\\n   *\\n   * @param precisionMultipliers an array of multipliers, corresponding to\\n   * the amounts in the balances array. When multiplied together they\\n   * should yield amounts at the pool's precision.\\n   *\\n   * @return an array of amounts \\\"scaled\\\" to the pool's precision\\n   */\\n  function _xp(uint256[] memory balances, uint256[] memory precisionMultipliers)\\n    internal\\n    pure\\n    returns (uint256[] memory)\\n  {\\n    uint256 numTokens = balances.length;\\n    require(numTokens == precisionMultipliers.length, \\\"mismatch multipliers\\\");\\n    uint256[] memory xp = new uint256[](numTokens);\\n    for (uint256 i; i < numTokens; ) {\\n      xp[i] = balances[i] * precisionMultipliers[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return xp;\\n  }\\n\\n  /**\\n   * @notice Return the precision-adjusted balances of all tokens in the pool\\n   * @param self Swap struct to read from\\n   * @return the pool balances \\\"scaled\\\" to the pool's precision, allowing\\n   * them to be more easily compared.\\n   */\\n  function _xp(Swap storage self) internal view returns (uint256[] memory) {\\n    return _xp(self.balances, self.tokenPrecisionMultipliers);\\n  }\\n\\n  /**\\n   * @notice Get the virtual price, to help calculate profit\\n   * @param self Swap struct to read from\\n   * @return the virtual price, scaled to precision of Constants.POOL_PRECISION_DECIMALS\\n   */\\n  function getVirtualPrice(Swap storage self) internal view returns (uint256) {\\n    uint256 d = getD(_xp(self), _getAPrecise(self));\\n    LPToken lpToken = self.lpToken;\\n    uint256 supply = lpToken.totalSupply();\\n    if (supply != 0) {\\n      return (d * (10**uint256(Constants.POOL_PRECISION_DECIMALS))) / supply;\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Calculate the new balances of the tokens given the indexes of the token\\n   * that is swapped from (FROM) and the token that is swapped to (TO).\\n   * This function is used as a helper function to calculate how much TO token\\n   * the user should receive on swap.\\n   *\\n   * @param preciseA precise form of amplification coefficient\\n   * @param tokenIndexFrom index of FROM token\\n   * @param tokenIndexTo index of TO token\\n   * @param x the new total amount of FROM token\\n   * @param xp balances of the tokens in the pool\\n   * @return the amount of TO token that should remain in the pool\\n   */\\n  function getY(\\n    uint256 preciseA,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 x,\\n    uint256[] memory xp\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = xp.length;\\n    require(tokenIndexFrom != tokenIndexTo, \\\"compare token to itself\\\");\\n    require(tokenIndexFrom < numTokens && tokenIndexTo < numTokens, \\\"token not found\\\");\\n\\n    uint256 d = getD(xp, preciseA);\\n    uint256 c = d;\\n    uint256 s;\\n    uint256 nA = numTokens * preciseA;\\n\\n    uint256 _x;\\n    for (uint256 i; i < numTokens; ) {\\n      if (i == tokenIndexFrom) {\\n        _x = x;\\n      } else if (i != tokenIndexTo) {\\n        _x = xp[i];\\n      } else {\\n        unchecked {\\n          ++i;\\n        }\\n        continue;\\n      }\\n      s += _x;\\n      c = (c * d) / (_x * numTokens);\\n      // If we were to protect the division loss we would have to keep the denominator separate\\n      // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n      // c = c * D * D * D * ... overflow!\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    c = (c * d * Constants.A_PRECISION) / (nA * numTokens);\\n    uint256 b = s + ((d * Constants.A_PRECISION) / nA);\\n    uint256 yPrev;\\n    uint256 y = d;\\n\\n    // iterative approximation\\n    for (uint256 i; i < Constants.MAX_LOOP_LIMIT; ) {\\n      yPrev = y;\\n      y = ((y * y) + c) / ((y * 2) + b - d);\\n      if (y.within1(yPrev)) {\\n        return y;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Externally calculates a swap between two tokens.\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get\\n   */\\n  function calculateSwap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) internal view returns (uint256 dy) {\\n    (dy, ) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, self.balances);\\n  }\\n\\n  /**\\n   * @notice Externally calculates a swap between two tokens.\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dy the number of tokens to buy.\\n   * @return dx the number of tokens the user have to transfer + fee\\n   */\\n  function calculateSwapInv(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy\\n  ) internal view returns (uint256 dx) {\\n    (dx, ) = _calculateSwapInv(self, tokenIndexFrom, tokenIndexTo, dy, self.balances);\\n  }\\n\\n  /**\\n   * @notice Internally calculates a swap between two tokens.\\n   *\\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n   * using the token contracts.\\n   *\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get in the token's precision. ex WBTC -> 8\\n   * @return dyFee the associated fee in multiplied precision (Constants.POOL_PRECISION_DECIMALS)\\n   */\\n  function _calculateSwap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256[] memory balances\\n  ) internal view returns (uint256 dy, uint256 dyFee) {\\n    uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n    uint256[] memory xp = _xp(balances, multipliers);\\n    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \\\"index out of range\\\");\\n    uint256 x = dx * multipliers[tokenIndexFrom] + xp[tokenIndexFrom];\\n    uint256 y = getY(_getAPrecise(self), tokenIndexFrom, tokenIndexTo, x, xp);\\n    dy = xp[tokenIndexTo] - y - 1;\\n    dyFee = (dy * self.swapFee) / Constants.FEE_DENOMINATOR;\\n    dy = (dy - dyFee) / multipliers[tokenIndexTo];\\n  }\\n\\n  /**\\n   * @notice Internally calculates a swap between two tokens.\\n   *\\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n   * using the token contracts.\\n   *\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dy the number of tokens to buy. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dx the number of tokens the user have to deposit in the token's precision. ex WBTC -> 8\\n   * @return dxFee the associated fee in multiplied precision (Constants.POOL_PRECISION_DECIMALS)\\n   */\\n  function _calculateSwapInv(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy,\\n    uint256[] memory balances\\n  ) internal view returns (uint256 dx, uint256 dxFee) {\\n    require(tokenIndexFrom != tokenIndexTo, \\\"compare token to itself\\\");\\n    uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n    uint256[] memory xp = _xp(balances, multipliers);\\n    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \\\"index out of range\\\");\\n\\n    uint256 a = _getAPrecise(self);\\n    uint256 d0 = getD(xp, a);\\n\\n    xp[tokenIndexTo] = xp[tokenIndexTo] - (dy * multipliers[tokenIndexTo]);\\n    uint256 x = getYD(a, tokenIndexFrom, xp, d0);\\n    dx = (x + 1) - xp[tokenIndexFrom];\\n    dxFee = (dx * self.swapFee) / Constants.FEE_DENOMINATOR;\\n    dx = (dx + dxFee) / multipliers[tokenIndexFrom];\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate amount of each underlying\\n   * tokens that is returned upon burning given amount of\\n   * LP tokens\\n   *\\n   * @param amount the amount of LP tokens that would to be burned on\\n   * withdrawal\\n   * @return array of amounts of tokens user will receive\\n   */\\n  function calculateRemoveLiquidity(Swap storage self, uint256 amount) internal view returns (uint256[] memory) {\\n    return _calculateRemoveLiquidity(self.balances, amount, self.lpToken.totalSupply());\\n  }\\n\\n  function _calculateRemoveLiquidity(\\n    uint256[] memory balances,\\n    uint256 amount,\\n    uint256 totalSupply\\n  ) internal pure returns (uint256[] memory) {\\n    require(amount <= totalSupply, \\\"exceed total supply\\\");\\n\\n    uint256 numBalances = balances.length;\\n    uint256[] memory amounts = new uint256[](numBalances);\\n\\n    for (uint256 i; i < numBalances; ) {\\n      amounts[i] = (balances[i] * amount) / totalSupply;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return amounts;\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate prices from deposits or\\n   * withdrawals, excluding fees but including slippage. This is\\n   * helpful as an input into the various \\\"min\\\" parameters on calls\\n   * to fight front-running\\n   *\\n   * @dev This shouldn't be used outside frontends for user estimates.\\n   *\\n   * @param self Swap struct to read from\\n   * @param amounts an array of token amounts to deposit or withdrawal,\\n   * corresponding to pooledTokens. The amount should be in each\\n   * pooled token's native precision. If a token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @param deposit whether this is a deposit or a withdrawal\\n   * @return if deposit was true, total amount of lp token that will be minted and if\\n   * deposit was false, total amount of lp token that will be burned\\n   */\\n  function calculateTokenAmount(\\n    Swap storage self,\\n    uint256[] calldata amounts,\\n    bool deposit\\n  ) internal view returns (uint256) {\\n    uint256[] memory balances = self.balances;\\n    uint256 numBalances = balances.length;\\n    require(amounts.length == numBalances, \\\"invalid length of amounts\\\");\\n\\n    uint256 a = _getAPrecise(self);\\n    uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n\\n    uint256 d0 = getD(_xp(balances, multipliers), a);\\n    for (uint256 i; i < numBalances; ) {\\n      if (deposit) {\\n        balances[i] = balances[i] + amounts[i];\\n      } else {\\n        balances[i] = balances[i] - amounts[i];\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    uint256 d1 = getD(_xp(balances, multipliers), a);\\n    uint256 totalSupply = self.lpToken.totalSupply();\\n\\n    if (deposit) {\\n      return ((d1 - d0) * totalSupply) / d0;\\n    } else {\\n      return ((d0 - d1) * totalSupply) / d0;\\n    }\\n  }\\n\\n  /**\\n   * @notice return accumulated amount of admin fees of the token with given index\\n   * @param self Swap struct to read from\\n   * @param index Index of the pooled token\\n   * @return admin balance in the token's precision\\n   */\\n  function getAdminBalance(Swap storage self, uint256 index) internal view returns (uint256) {\\n    require(index < self.pooledTokens.length, \\\"index out of range\\\");\\n    return self.adminFees[index];\\n  }\\n\\n  /**\\n   * @notice internal helper function to calculate fee per token multiplier used in\\n   * swap fee calculations\\n   * @param swapFee swap fee for the tokens\\n   * @param numTokens number of tokens pooled\\n   */\\n  function _feePerToken(uint256 swapFee, uint256 numTokens) internal pure returns (uint256) {\\n    return (swapFee * numTokens) / ((numTokens - 1) * 4);\\n  }\\n\\n  /*** STATE MODIFYING FUNCTIONS ***/\\n\\n  /**\\n   * @notice swap two tokens in the pool\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dx the amount of tokens the user wants to sell\\n   * @param minDy the min amount the user would like to receive, or revert.\\n   * @return amount of token user received on swap\\n   */\\n  function swap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n    {\\n      IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\\n      require(dx <= tokenFrom.balanceOf(msg.sender), \\\"swap more than you own\\\");\\n      // Reverts for fee on transfer\\n      AssetLogic.handleIncomingAsset(address(tokenFrom), dx);\\n    }\\n\\n    uint256 dy;\\n    uint256 dyFee;\\n    uint256[] memory balances = self.balances;\\n    (dy, dyFee) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, balances);\\n    require(dy >= minDy, \\\"dy < minDy\\\");\\n\\n    uint256 dyAdminFee = (dyFee * self.adminFee) /\\n      Constants.FEE_DENOMINATOR /\\n      self.tokenPrecisionMultipliers[tokenIndexTo];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\n    if (dyAdminFee != 0) {\\n      self.adminFees[tokenIndexTo] = self.adminFees[tokenIndexTo] + dyAdminFee;\\n    }\\n\\n    AssetLogic.handleOutgoingAsset(address(self.pooledTokens[tokenIndexTo]), msg.sender, dy);\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice swap two tokens in the pool\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dy the amount of tokens the user wants to buy\\n   * @param maxDx the max amount the user would like to send.\\n   * @return amount of token user have to transfer on swap\\n   */\\n  function swapOut(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy,\\n    uint256 maxDx\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n    require(dy <= self.balances[tokenIndexTo], \\\">pool balance\\\");\\n\\n    uint256 dx;\\n    uint256 dxFee;\\n    uint256[] memory balances = self.balances;\\n    (dx, dxFee) = _calculateSwapInv(self, tokenIndexFrom, tokenIndexTo, dy, balances);\\n    require(dx <= maxDx, \\\"dx > maxDx\\\");\\n\\n    uint256 dxAdminFee = (dxFee * self.adminFee) /\\n      Constants.FEE_DENOMINATOR /\\n      self.tokenPrecisionMultipliers[tokenIndexFrom];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx - dxAdminFee;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy;\\n    if (dxAdminFee != 0) {\\n      self.adminFees[tokenIndexFrom] = self.adminFees[tokenIndexFrom] + dxAdminFee;\\n    }\\n\\n    {\\n      IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\\n      require(dx <= tokenFrom.balanceOf(msg.sender), \\\"more than you own\\\");\\n      // Reverts for fee on transfer\\n      AssetLogic.handleIncomingAsset(address(tokenFrom), dx);\\n    }\\n\\n    AssetLogic.handleOutgoingAsset(address(self.pooledTokens[tokenIndexTo]), msg.sender, dy);\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dx;\\n  }\\n\\n  /**\\n   * @notice swap two tokens in the pool internally\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dx the amount of tokens the user wants to sell\\n   * @param minDy the min amount the user would like to receive, or revert.\\n   * @return amount of token user received on swap\\n   */\\n  function swapInternal(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n    require(dx <= self.balances[tokenIndexFrom], \\\"more than pool balance\\\");\\n\\n    uint256 dy;\\n    uint256 dyFee;\\n    uint256[] memory balances = self.balances;\\n    (dy, dyFee) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, balances);\\n    require(dy >= minDy, \\\"dy < minDy\\\");\\n\\n    uint256 dyAdminFee = (dyFee * self.adminFee) /\\n      Constants.FEE_DENOMINATOR /\\n      self.tokenPrecisionMultipliers[tokenIndexTo];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\n\\n    if (dyAdminFee != 0) {\\n      self.adminFees[tokenIndexTo] = self.adminFees[tokenIndexTo] + dyAdminFee;\\n    }\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Should get exact amount out of AMM for asset put in\\n   */\\n  function swapInternalOut(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy,\\n    uint256 maxDx\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n    require(dy <= self.balances[tokenIndexTo], \\\"more than pool balance\\\");\\n\\n    uint256 dx;\\n    uint256 dxFee;\\n    uint256[] memory balances = self.balances;\\n    (dx, dxFee) = _calculateSwapInv(self, tokenIndexFrom, tokenIndexTo, dy, balances);\\n    require(dx <= maxDx, \\\"dx > maxDx\\\");\\n\\n    uint256 dxAdminFee = (dxFee * self.adminFee) /\\n      Constants.FEE_DENOMINATOR /\\n      self.tokenPrecisionMultipliers[tokenIndexFrom];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx - dxAdminFee;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy;\\n\\n    if (dxAdminFee != 0) {\\n      self.adminFees[tokenIndexFrom] = self.adminFees[tokenIndexFrom] + dxAdminFee;\\n    }\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dx;\\n  }\\n\\n  /**\\n   * @notice Add liquidity to the pool\\n   * @param self Swap struct to read from and write to\\n   * @param amounts the amounts of each token to add, in their native precision\\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\\n   * should mint, otherwise revert. Handy for front-running mitigation\\n   * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\n   * @return amount of LP token user received\\n   */\\n  function addLiquidity(\\n    Swap storage self,\\n    uint256[] memory amounts,\\n    uint256 minToMint\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n\\n    uint256 numTokens = self.pooledTokens.length;\\n    require(amounts.length == numTokens, \\\"mismatch pooled tokens\\\");\\n\\n    // current state\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      0,\\n      0,\\n      0,\\n      _getAPrecise(self),\\n      self.lpToken,\\n      0,\\n      self.balances,\\n      self.tokenPrecisionMultipliers\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n    if (v.totalSupply != 0) {\\n      v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\\n    }\\n\\n    uint256[] memory newBalances = new uint256[](numTokens);\\n\\n    for (uint256 i; i < numTokens; ) {\\n      require(v.totalSupply != 0 || amounts[i] != 0, \\\"!supply all tokens\\\");\\n\\n      // Transfer tokens first to see if a fee was charged on transfer\\n      if (amounts[i] != 0) {\\n        IERC20 token = self.pooledTokens[i];\\n        // Reverts for fee on transfer\\n        AssetLogic.handleIncomingAsset(address(token), amounts[i]);\\n      }\\n\\n      newBalances[i] = v.balances[i] + amounts[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // invariant after change\\n    v.d1 = getD(_xp(newBalances, v.multipliers), v.preciseA);\\n    require(v.d1 > v.d0, \\\"D should increase\\\");\\n\\n    // updated to reflect fees and calculate the user's LP tokens\\n    v.d2 = v.d1;\\n    uint256[] memory fees = new uint256[](numTokens);\\n\\n    if (v.totalSupply != 0) {\\n      uint256 feePerToken = _feePerToken(self.swapFee, numTokens);\\n      for (uint256 i; i < numTokens; ) {\\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n        fees[i] = (feePerToken * (idealBalance.difference(newBalances[i]))) / Constants.FEE_DENOMINATOR;\\n        uint256 adminFee = (fees[i] * self.adminFee) / Constants.FEE_DENOMINATOR;\\n        self.balances[i] = newBalances[i] - adminFee;\\n        self.adminFees[i] = self.adminFees[i] + adminFee;\\n        newBalances[i] = newBalances[i] - fees[i];\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n      v.d2 = getD(_xp(newBalances, v.multipliers), v.preciseA);\\n    } else {\\n      // the initial depositor doesn't pay fees\\n      self.balances = newBalances;\\n    }\\n\\n    uint256 toMint;\\n    if (v.totalSupply == 0) {\\n      toMint = v.d1;\\n    } else {\\n      toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\\n    }\\n\\n    require(toMint >= minToMint, \\\"mint < min\\\");\\n\\n    // mint the user's LP tokens\\n    v.lpToken.mint(msg.sender, toMint);\\n\\n    emit AddLiquidity(self.key, msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\\n\\n    return toMint;\\n  }\\n\\n  /**\\n   * @notice Burn LP tokens to remove liquidity from the pool.\\n   * @dev Liquidity can always be removed, even when the pool is paused.\\n   * @param self Swap struct to read from and write to\\n   * @param amount the amount of LP tokens to burn\\n   * @param minAmounts the minimum amounts of each token in the pool\\n   * acceptable for this burn. Useful as a front-running mitigation\\n   * @return amounts of tokens the user received\\n   */\\n  function removeLiquidity(\\n    Swap storage self,\\n    uint256 amount,\\n    uint256[] calldata minAmounts\\n  ) internal returns (uint256[] memory) {\\n    LPToken lpToken = self.lpToken;\\n    require(amount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n    uint256 numTokens = self.pooledTokens.length;\\n    require(minAmounts.length == numTokens, \\\"mismatch poolTokens\\\");\\n\\n    uint256[] memory balances = self.balances;\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    uint256[] memory amounts = _calculateRemoveLiquidity(balances, amount, totalSupply);\\n\\n    uint256 numAmounts = amounts.length;\\n    for (uint256 i; i < numAmounts; ) {\\n      require(amounts[i] >= minAmounts[i], \\\"amounts[i] < minAmounts[i]\\\");\\n      self.balances[i] = balances[i] - amounts[i];\\n      AssetLogic.handleOutgoingAsset(address(self.pooledTokens[i]), msg.sender, amounts[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    lpToken.burnFrom(msg.sender, amount);\\n\\n    emit RemoveLiquidity(self.key, msg.sender, amounts, totalSupply - amount);\\n\\n    return amounts;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool all in one token.\\n   * @param self Swap struct to read from and write to\\n   * @param tokenAmount the amount of the lp tokens to burn\\n   * @param tokenIndex the index of the token you want to receive\\n   * @param minAmount the minimum amount to withdraw, otherwise revert\\n   * @return amount chosen token that user received\\n   */\\n  function removeLiquidityOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount\\n  ) internal returns (uint256) {\\n    LPToken lpToken = self.lpToken;\\n\\n    require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n    uint256 numTokens = self.pooledTokens.length;\\n    require(tokenIndex < numTokens, \\\"not found\\\");\\n\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(self, tokenAmount, tokenIndex, totalSupply);\\n\\n    require(dy >= minAmount, \\\"dy < minAmount\\\");\\n\\n    uint256 adminFee = (dyFee * self.adminFee) / Constants.FEE_DENOMINATOR;\\n    self.balances[tokenIndex] = self.balances[tokenIndex] - (dy + adminFee);\\n    if (adminFee != 0) {\\n      self.adminFees[tokenIndex] = self.adminFees[tokenIndex] + adminFee;\\n    }\\n    lpToken.burnFrom(msg.sender, tokenAmount);\\n    AssetLogic.handleOutgoingAsset(address(self.pooledTokens[tokenIndex]), msg.sender, dy);\\n\\n    emit RemoveLiquidityOne(self.key, msg.sender, tokenAmount, totalSupply, tokenIndex, dy);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool, weighted differently than the\\n   * pool's current balances.\\n   *\\n   * @param self Swap struct to read from and write to\\n   * @param amounts how much of each token to withdraw\\n   * @param maxBurnAmount the max LP token provider is willing to pay to\\n   * remove liquidity. Useful as a front-running mitigation.\\n   * @return actual amount of LP tokens burned in the withdrawal\\n   */\\n  function removeLiquidityImbalance(\\n    Swap storage self,\\n    uint256[] memory amounts,\\n    uint256 maxBurnAmount\\n  ) internal returns (uint256) {\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      0,\\n      0,\\n      0,\\n      _getAPrecise(self),\\n      self.lpToken,\\n      0,\\n      self.balances,\\n      self.tokenPrecisionMultipliers\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n\\n    uint256 numTokens = self.pooledTokens.length;\\n    uint256 numAmounts = amounts.length;\\n    require(numAmounts == numTokens, \\\"mismatch pool tokens\\\");\\n\\n    require(maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0, \\\">LP.balanceOf\\\");\\n\\n    uint256 feePerToken = _feePerToken(self.swapFee, numTokens);\\n    uint256[] memory fees = new uint256[](numTokens);\\n    {\\n      uint256[] memory balances1 = new uint256[](numTokens);\\n      v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\\n      for (uint256 i; i < numTokens; ) {\\n        require(v.balances[i] >= amounts[i], \\\"withdraw more than available\\\");\\n\\n        unchecked {\\n          balances1[i] = v.balances[i] - amounts[i];\\n          ++i;\\n        }\\n      }\\n      v.d1 = getD(_xp(balances1, v.multipliers), v.preciseA);\\n\\n      for (uint256 i; i < numTokens; ) {\\n        {\\n          uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n          uint256 difference = idealBalance.difference(balances1[i]);\\n          fees[i] = (feePerToken * difference) / Constants.FEE_DENOMINATOR;\\n        }\\n        uint256 adminFee = (fees[i] * self.adminFee) / Constants.FEE_DENOMINATOR;\\n        self.balances[i] = balances1[i] - adminFee;\\n        self.adminFees[i] = self.adminFees[i] + adminFee;\\n        balances1[i] = balances1[i] - fees[i];\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n\\n      v.d2 = getD(_xp(balances1, v.multipliers), v.preciseA);\\n    }\\n    uint256 tokenAmount = ((v.d0 - v.d2) * v.totalSupply) / v.d0;\\n    require(tokenAmount != 0, \\\"!zero amount\\\");\\n    tokenAmount = tokenAmount + 1;\\n\\n    require(tokenAmount <= maxBurnAmount, \\\"tokenAmount > maxBurnAmount\\\");\\n\\n    v.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n    for (uint256 i; i < numTokens; ) {\\n      AssetLogic.handleOutgoingAsset(address(self.pooledTokens[i]), msg.sender, amounts[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit RemoveLiquidityImbalance(self.key, msg.sender, amounts, fees, v.d1, v.totalSupply - tokenAmount);\\n\\n    return tokenAmount;\\n  }\\n\\n  /**\\n   * @notice withdraw all admin fees to a given address\\n   * @param self Swap struct to withdraw fees from\\n   * @param to Address to send the fees to\\n   */\\n  function withdrawAdminFees(Swap storage self, address to) internal {\\n    uint256 numTokens = self.pooledTokens.length;\\n    for (uint256 i; i < numTokens; ) {\\n      IERC20 token = self.pooledTokens[i];\\n      uint256 balance = self.adminFees[i];\\n      if (balance != 0) {\\n        delete self.adminFees[i];\\n        AssetLogic.handleOutgoingAsset(address(token), to, balance);\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets the admin fee\\n   * @dev adminFee cannot be higher than 100% of the swap fee\\n   * @param self Swap struct to update\\n   * @param newAdminFee new admin fee to be applied on future transactions\\n   */\\n  function setAdminFee(Swap storage self, uint256 newAdminFee) internal {\\n    require(newAdminFee < Constants.MAX_ADMIN_FEE + 1, \\\"too high\\\");\\n    self.adminFee = newAdminFee;\\n\\n    emit NewAdminFee(self.key, newAdminFee);\\n  }\\n\\n  /**\\n   * @notice update the swap fee\\n   * @dev fee cannot be higher than 1% of each swap\\n   * @param self Swap struct to update\\n   * @param newSwapFee new swap fee to be applied on future transactions\\n   */\\n  function setSwapFee(Swap storage self, uint256 newSwapFee) internal {\\n    require(newSwapFee < Constants.MAX_SWAP_FEE + 1, \\\"too high\\\");\\n    self.swapFee = newSwapFee;\\n\\n    emit NewSwapFee(self.key, newSwapFee);\\n  }\\n\\n  /**\\n   * @notice Check if this stableswap pool exists and is valid (i.e. has been\\n   * initialized and tokens have been added).\\n   * @return bool true if this stableswap pool is valid, false if not.\\n   */\\n  function exists(Swap storage self) internal view returns (bool) {\\n    return !self.disabled && self.pooledTokens.length != 0;\\n  }\\n}\\n\",\"keccak256\":\"0xfe4b0ca8d2451904ec38f94a5adbb09ab792df3ba06191356768a83e0106e497\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xc38a47e9bb03aa551a59776362699cff34b19468988cb4614a0b943f29e0cad9\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IConnectorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IOutbox} from \\\"./IOutbox.sol\\\";\\n\\n/**\\n * @notice Each router extends the `XAppConnectionClient` contract. This contract\\n * allows an admin to call `setXAppConnectionManager` to update the underlying\\n * pointers to the messaging inboxes (Replicas) and outboxes (Homes).\\n *\\n * @dev This interface only contains the functions needed for the `XAppConnectionClient`\\n * will interface with.\\n */\\ninterface IConnectorManager {\\n  /**\\n   * @notice Get the local inbox contract from the xAppConnectionManager\\n   * @return The local inbox contract\\n   * @dev The local inbox contract is a SpokeConnector with AMBs, and a\\n   * Home contract with nomad\\n   */\\n  function home() external view returns (IOutbox);\\n\\n  /**\\n   * @notice Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager\\n   * @return True if _potentialReplica is an enrolled Replica\\n   */\\n  function isReplica(address _potentialReplica) external view returns (bool);\\n\\n  /**\\n   * @notice Get the local domain from the xAppConnectionManager\\n   * @return The local domain\\n   */\\n  function localDomain() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x6b35227f507bd98075083345dd93bfb1fe649fe49867f05a642ecea67ce40ddf\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice Interface for all contracts sending messages originating on their\\n * current domain.\\n *\\n * @dev These are the Home.sol interface methods used by the `Router`\\n * and exposed via `home()` on the `XAppConnectionClient`\\n */\\ninterface IOutbox {\\n  /**\\n   * @notice Emitted when a new message is added to an outbound message merkle root\\n   * @param leafIndex Index of message's leaf in merkle tree\\n   * @param destinationAndNonce Destination and destination-specific\\n   * nonce combined in single field ((destination << 32) & nonce)\\n   * @param messageHash Hash of message; the leaf inserted to the Merkle tree for the message\\n   * @param committedRoot the latest notarized root submitted in the last signed Update\\n   * @param message Raw bytes of message\\n   */\\n  event Dispatch(\\n    bytes32 indexed messageHash,\\n    uint256 indexed leafIndex,\\n    uint64 indexed destinationAndNonce,\\n    bytes32 committedRoot,\\n    bytes message\\n  );\\n\\n  /**\\n   * @notice Dispatch the message it to the destination domain & recipient\\n   * @dev Format the message, insert its hash into Merkle tree,\\n   * enqueue the new Merkle root, and emit `Dispatch` event with message information.\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipientAddress Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes content of message\\n   * @return bytes32 The leaf added to the tree\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external returns (bytes32, bytes memory);\\n\\n  /**\\n   * @notice domain => next available nonce for the domain.\\n   */\\n  function nonces(uint32 domain) external returns (uint32);\\n}\\n\",\"keccak256\":\"0x788d0c03a94b5d28da1805f530a23b7a752285823985b8e180d448add4838d24\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/libraries/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n// Taken from: https://github.com/nomad-xyz/ExcessivelySafeCall\\n// NOTE: There is a difference between npm latest and github main versions\\n// where the latest github version allows you to specify an ether value.\\n\\nlibrary ExcessivelySafeCall {\\n  uint256 constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n  /// @notice Use when you _really_ really _really_ don't trust the called\\n  /// contract. This prevents the called contract from causing reversion of\\n  /// the caller in as many ways as we can.\\n  /// @dev The main difference between this and a solidity low-level call is\\n  /// that we limit the number of bytes that the callee can cause to be\\n  /// copied to caller memory. This prevents stupid things like malicious\\n  /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n  /// to memory.\\n  /// @param _target The address to call\\n  /// @param _gas The amount of gas to forward to the remote contract\\n  /// @param _value The value in wei to send to the remote contract\\n  /// @param _maxCopy The maximum number of bytes of returndata to copy\\n  /// to memory.\\n  /// @param _calldata The data to send to the remote contract\\n  /// @return success and returndata, as `.call()`. Returndata is capped to\\n  /// `_maxCopy` bytes.\\n  function excessivelySafeCall(\\n    address _target,\\n    uint256 _gas,\\n    uint256 _value,\\n    uint16 _maxCopy,\\n    bytes memory _calldata\\n  ) internal returns (bool, bytes memory) {\\n    // set up for assembly call\\n    uint256 _toCopy;\\n    bool _success;\\n    bytes memory _returnData = new bytes(_maxCopy);\\n    // dispatch message to recipient\\n    // by assembly calling \\\"handle\\\" function\\n    // we call via assembly to avoid memcopying a very large returndata\\n    // returned by a malicious contract\\n    assembly {\\n      _success := call(\\n        _gas, // gas\\n        _target, // recipient\\n        _value, // ether value\\n        add(_calldata, 0x20), // inloc\\n        mload(_calldata), // inlen\\n        0, // outloc\\n        0 // outlen\\n      )\\n      // limit our copy to 256 bytes\\n      _toCopy := returndatasize()\\n      if gt(_toCopy, _maxCopy) {\\n        _toCopy := _maxCopy\\n      }\\n      // Store the length of the copied bytes\\n      mstore(_returnData, _toCopy)\\n      // copy the bytes from returndata[0:_toCopy]\\n      returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n    }\\n    return (_success, _returnData);\\n  }\\n\\n  /// @notice Use when you _really_ really _really_ don't trust the called\\n  /// contract. This prevents the called contract from causing reversion of\\n  /// the caller in as many ways as we can.\\n  /// @dev The main difference between this and a solidity low-level call is\\n  /// that we limit the number of bytes that the callee can cause to be\\n  /// copied to caller memory. This prevents stupid things like malicious\\n  /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n  /// to memory.\\n  /// @param _target The address to call\\n  /// @param _gas The amount of gas to forward to the remote contract\\n  /// @param _maxCopy The maximum number of bytes of returndata to copy\\n  /// to memory.\\n  /// @param _calldata The data to send to the remote contract\\n  /// @return success and returndata, as `.call()`. Returndata is capped to\\n  /// `_maxCopy` bytes.\\n  function excessivelySafeStaticCall(\\n    address _target,\\n    uint256 _gas,\\n    uint16 _maxCopy,\\n    bytes memory _calldata\\n  ) internal view returns (bool, bytes memory) {\\n    // set up for assembly call\\n    uint256 _toCopy;\\n    bool _success;\\n    bytes memory _returnData = new bytes(_maxCopy);\\n    // dispatch message to recipient\\n    // by assembly calling \\\"handle\\\" function\\n    // we call via assembly to avoid memcopying a very large returndata\\n    // returned by a malicious contract\\n    assembly {\\n      _success := staticcall(\\n        _gas, // gas\\n        _target, // recipient\\n        add(_calldata, 0x20), // inloc\\n        mload(_calldata), // inlen\\n        0, // outloc\\n        0 // outlen\\n      )\\n      // limit our copy to 256 bytes\\n      _toCopy := returndatasize()\\n      if gt(_toCopy, _maxCopy) {\\n        _toCopy := _maxCopy\\n      }\\n      // Store the length of the copied bytes\\n      mstore(_returnData, _toCopy)\\n      // copy the bytes from returndata[0:_toCopy]\\n      returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n    }\\n    return (_success, _returnData);\\n  }\\n\\n  /**\\n   * @notice Swaps function selectors in encoded contract calls\\n   * @dev Allows reuse of encoded calldata for functions with identical\\n   * argument types but different names. It simply swaps out the first 4 bytes\\n   * for the new selector. This function modifies memory in place, and should\\n   * only be used with caution.\\n   * @param _newSelector The new 4-byte selector\\n   * @param _buf The encoded contract args\\n   */\\n  function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\\n    require(_buf.length > 4 - 1);\\n    uint256 _mask = LOW_28_MASK;\\n    assembly {\\n      // load the first word of\\n      let _word := mload(add(_buf, 0x20))\\n      // mask out the top 4 bytes\\n      // /x\\n      _word := and(_word, _mask)\\n      _word := or(_newSelector, _word)\\n      mstore(add(_buf, 0x20), _word)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5472b56fa56886620b1a8e4e2f12f8925500bb237a4dad38651c79db69f0724c\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/libraries/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {TypedMemView} from \\\"./TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // alignment preserving cast\\n  function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(_addr)));\\n  }\\n\\n  // alignment preserving cast\\n  function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n    return address(uint160(uint256(_buf)));\\n  }\\n}\\n\",\"keccak256\":\"0x80e5eb2dc7f18a751edf2658e6166fd791e40aa8ff2488ad897539aafef59776\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint256 constant TWENTY_SEVEN_BYTES = 8 * 27;\\n  uint256 private constant _27_BYTES_IN_BITS = 8 * 27; // <--- also used this named constant where ever 216 is used.\\n  uint256 private constant LOW_27_BYTES_MASK = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff; // (1 << _27_BYTES_IN_BITS) - 1;\\n\\n  // ========== Custom Errors ===========\\n\\n  error TypedMemView__assertType_typeAssertionFailed(uint256 actual, uint256 expected);\\n  error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice);\\n  error TypedMemView__index_indexMoreThan32Bytes();\\n  error TypedMemView__unsafeCopyTo_nullPointer();\\n  error TypedMemView__unsafeCopyTo_invalidPointer();\\n  error TypedMemView__unsafeCopyTo_identityOOG();\\n  error TypedMemView__assertValid_validityAssertionFailed();\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a invalid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is invalid\\n   */\\n  function isNotValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return true;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := gt(_end, mload(0x40))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    if (isNotValid(memView)) revert TypedMemView__assertValid_validityAssertionFailed();\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      revert TypedMemView__assertType_typeAssertionFailed(uint256(typeOf(memView)), uint256(_expected));\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(and(memView, LOW_27_BYTES_MASK), shl(_27_BYTES_IN_BITS, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    uint256 _uint96Bits = 96;\\n    uint256 _emptyBits = 24;\\n\\n    // Cast params to ensure input is of correct length\\n    uint96 len_ = uint96(_len);\\n    uint96 loc_ = uint96(_loc);\\n    require(len_ == _len && loc_ == _loc, \\\"!truncated\\\");\\n\\n    assembly {\\n      // solium-disable-previous-line security/no-inline-assembly\\n      newView := shl(_uint96Bits, _type) // insert type\\n      newView := shl(_uint96Bits, or(newView, loc_)) // insert loc\\n      newView := shl(_emptyBits, or(newView, len_)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(_27_BYTES_IN_BITS, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 31) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      // \\\"TypedMemView/index - Overran the view. Slice is at {loc} with length {len}. Attempted to index at offset {index} with length {slice},\\n      revert TypedMemView__index_overrun(loc(memView), len(memView), _index, uint256(_bytes));\\n    }\\n    if (_bytes > 32) revert TypedMemView__index_indexMoreThan32Bytes();\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    if (isNull(memView)) revert TypedMemView__unsafeCopyTo_nullPointer();\\n    if (isNotValid(memView)) revert TypedMemView__unsafeCopyTo_invalidPointer();\\n\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    bool res;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      res := staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len)\\n    }\\n    if (!res) revert TypedMemView__unsafeCopyTo_identityOOG();\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    uint256 _len = memViews.length;\\n    for (uint256 i = 0; i < _len; ) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n        ++i;\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x17e335daf53b9cd26f13d480b2f1e4f6babf202e39a14089d97b23b1d5d737ff\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615188806100206000396000f3fe60806040526004361061011f5760003560e01c80636989ca7c116100a0578063affed0e011610064578063affed0e01461033e578063b49c53a714610353578063bfd7903014610373578063c2fb26a6146103b0578063cb8058ba146103d557600080fd5b80636989ca7c146102b85780638a336231146102d85780638aac16ba146102f857806391f5de791461030b57806393f18ac51461031e57600080fd5b806341bdc8b5116100e757806341bdc8b51461020a578063541267111461022a57806359efa1621461024a57806363e3e7d21461026a578063674dc9331461029857600080fd5b8063121cca3114610124578063159e041f146101615780631a8bc0e1146101aa5780632424401f146101d75780633339df96146101ec575b600080fd5b34801561013057600080fd5b5061014461013f3660046141b4565b6103f5565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016d57600080fd5b5061019a61017c3660046141f1565b6001600160a01b03166000908152601f602052604090205460ff1690565b6040519015158152602001610158565b3480156101b657600080fd5b506101ca6101c536600461420e565b610412565b6040516101589190614227565b6101ea6101e536600461420e565b61047e565b005b3480156101f857600080fd5b506020546001600160a01b0316610144565b34801561021657600080fd5b506101ea6102253660046141f1565b610507565b34801561023657600080fd5b506101ea61024536600461428d565b610664565b34801561025657600080fd5b506101ea6102653660046142d1565b610766565b34801561027657600080fd5b5061028a610285366004614309565b6107fb565b604051908152602001610158565b3480156102a457600080fd5b5061028a6102b3366004614384565b6109ba565b3480156102c457600080fd5b506101ea6102d33660046141f1565b610ae2565b3480156102e457600080fd5b506101ea6102f33660046141f1565b610bda565b61028a61030636600461442d565b610cf6565b61028a61031936600461442d565b610e1b565b34801561032a57600080fd5b5061028a610339366004614384565b610f2d565b34801561034a57600080fd5b5060035461028a565b34801561035f57600080fd5b506101ea61036e3660046144cd565b611041565b34801561037f57600080fd5b506103a361038e36600461420e565b60009081526008602052604090205460ff1690565b604051610158919061452d565b3480156103bc57600080fd5b5060045460405163ffffffff9091168152602001610158565b3480156103e157600080fd5b506101ea6103f0366004614540565b61115f565b63ffffffff81166000908152600f60205260408120545b92915050565b60008181526009602090815260409182902080548351818402810184019094528084526060939283018282801561047257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610454575b50505050509050919050565b601654600119016104a257604051637ce54e2d60e11b815260040160405180910390fd5b6002601655601a54600160a01b900460ff16156104d257604051633ee5b89360e01b815260040160405180910390fd5b346000036104f3576040516348e7dc3f60e01b815260040160405180910390fd5b6104ff8160003461122c565b506001601655565b336105106112d2565b6001600160a01b03161415801561054b575060033360009081526014602052604090205460ff166003811115610548576105486144f9565b14155b1561056957604051637b32c26b60e01b815260040160405180910390fd5b600480546040805163234d8e3d60e21b81529051849363ffffffff909316926001600160a01b03851692638d3638f492818301926020928290030181865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190614574565b63ffffffff161461060057604051621ff66160e61b815260040160405180910390fd5b604080516001600160a01b03841681523360208201527fd6e53d12bb441b2201be4949c7f431b383623888df2abfeef43aaaf272802d50910160405180910390a1602080546001600160a01b0319166001600160a01b039290921691909117905550565b813361067660a08301608084016141f1565b6001600160a01b03161461069d5760405163e3613aff60e01b815260040160405180910390fd5b6127108211156106c057604051633345cd4360e11b815260040160405180910390fd5b60045463ffffffff166106d960408501602086016141b4565b63ffffffff16146106fd57604051632a8e462760e01b815260040160405180910390fd5b600061071061070b85614696565b611300565b6000818152600d6020526040908190208590555190915081907fb243c3cea6cd1bbfd64d5d0765f13734ca7b87fdf14e017391fe12a8891434ca906107589086815260200190565b60405180910390a250505050565b6016546001190161078a57604051637ce54e2d60e11b815260040160405180910390fd5b6002601655601a54600160a01b900460ff16156107ba57604051633ee5b89360e01b815260040160405180910390fd5b806000036107db576040516348e7dc3f60e01b815260040160405180910390fd5b6107e482611330565b50506107f183838361122c565b5050600160165550565b6016546000906001190161082257604051637ce54e2d60e11b815260040160405180910390fd5b6002601655601a54600160a01b900460ff161561085257604051633ee5b89360e01b815260040160405180910390fd5b60008061085e846113a6565b909250905060006001826003811115610879576108796144f9565b14610885576002610888565b60035b60008481526008602052604090208054919250829160ff191660018360038111156108b5576108b56144f9565b021790555060008080610910866108f46108cf8b8061478b565b61018001356108de8c8061478b565b6108ef9060608101906040016141b4565b611767565b6003876003811115610908576109086144f9565b14158b6117a9565b91945092509050600061093a8985858a60038a6003811115610934576109346144f9565b14611d36565b90506001600160a01b0383166109508a8061478b565b6109619060808101906060016141f1565b6001600160a01b0316887f0b07a8b0b083f8976b3c832b720632f49cb8ba1e7a99e1b145f51a47d3391cb78c8686336040516109a09493929190614908565b60405180910390a450506001601655509295945050505050565b601754600090600119016109e1576040516363b468cb60e11b815260040160405180910390fd5b6002601755604080516101a08101825260045463ffffffff90811682528c1660208083019190915260008284018190526001600160a01b03808e1660608501528b166080840152600160a08401528351601f88018390048302810183019094528684529260c08301918890889081908401838280828437600092018290525093855250505060208083018a905233604080850191909152606084018390526080840183905260a0840183905260c090930191909152815180830183526001600160a01b038d168082528183018c905283518085019094528352908201869052919250610ace918391611d7f565b60016017559b9a5050505050505050505050565b33610aeb6112d2565b6001600160a01b031614158015610b26575060033360009081526014602052604090205460ff166003811115610b2357610b236144f9565b14155b15610b4457604051637b32c26b60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff16610b7d57604051637840a40d60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020908152604091829020805460ff19169055815192835233908301527f4860b0a180d4b5969c2757493a999f05d0b22318320f154a02170aa239e24b1391015b60405180910390a150565b33610be36112d2565b6001600160a01b031614158015610c1e575060033360009081526014602052604090205460ff166003811115610c1b57610c1b6144f9565b14155b15610c3c57604051637b32c26b60e01b815260040160405180910390fd5b6001600160a01b038116610c63576040516332f9c08d60e11b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff1615610c9d5760405163e2a4506360e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020908152604091829020805460ff19166001179055815192835233908301527f3860a100215fe93b6b95ed1ae0870e538f85a73b30d073f63fefc60e08b0c1249101610bcf565b60175460009060011901610d1d576040516363b468cb60e11b815260040160405180910390fd5b6002601755604080516101a08101825260045463ffffffff90811682528b1660208083019190915260008284018190526001600160a01b03808d1660608501528a16608084015260a083018190528351601f87018390048302810183019094528584529260c083019187908790819084018382808284376000920182905250938552505050602080830189905233604080850191909152606084018390526080840183905260a0840183905260c0909301829052825180840184526001600160a01b038d1681528082018b905283518085019094529183523490830152919250610e08918391611d7f565b60016017559a9950505050505050505050565b60175460009060011901610e42576040516363b468cb60e11b815260040160405180910390fd5b6002601755604080516101a08101825260045463ffffffff90811682528b1660208083019190915260008284018190526001600160a01b03808d1660608501528a166080840152600160a08401528351601f87018390048302810183019094528584529260c083019187908790819084018382808284376000920182905250938552505050602080830189905233604080850191909152606084018390526080840183905260a0840183905260c0909301829052825180840184526001600160a01b038d1681528082018b905283518085019094529183523490830152919250610e08918391611d7f565b60175460009060011901610f54576040516363b468cb60e11b815260040160405180910390fd5b6002601755604080516101a08101825260045463ffffffff90811682528c1660208083019190915260008284018190526001600160a01b03808e1660608501528b16608084015260a083018190528351601f88018390048302810183019094528684529260c08301918890889081908401838280828437600092018290525093855250505060208083018a905233604080850191909152606084018390526080840183905260a0840183905260c090930191909152815180830183526001600160a01b038d168082528183018c905283518085019094528352908201869052919250610ace918391611d7f565b3361104a6112d2565b6001600160a01b031614158015611085575060033360009081526014602052604090205460ff166003811115611082576110826144f9565b14155b156110a357604051637b32c26b60e01b815260040160405180910390fd5b806110c157604051633bca644d60e11b815260040160405180910390fd5b63ffffffff821615806110de575060045463ffffffff8381169116145b156110fc57604051632892757b60e21b815260040160405180910390fd5b63ffffffff82166000818152600f602090815260409182902084905581519283526001600160a01b038416908301523382820152517fb07f562723347d6ea7f9f37b3b31f96b65104c3339d1c89e1b6fa88e2410b85c9181900360600190a15050565b803361117160a08301608084016141f1565b6001600160a01b0316146111985760405163e3613aff60e01b815260040160405180910390fd5b60045463ffffffff166111b160408401602085016141b4565b63ffffffff16146111d557604051630ada556f60e31b815260040160405180910390fd5b60006111e361070b84614696565b6000818152600e6020526040808220805460ff191660011790555191925082917f2510041334ede909998b9aefcca4300fc36c670dd00e1f7f0afffaca56adcb399190a2505050565b6002546001600160a01b03168061125657604051630bd7619560e41b815260040160405180910390fd5b6001600160a01b0383166112735761126e818361205b565b611288565b61127d838361217e565b6112888382846122cf565b604080518381526001600160a01b0385166020820152339181019190915284907ff90d3aafcedf55a0da208dd26d915e0ce1870ee9221586012487a0b366106f6590606001610758565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6000816040516020016113139190614c82565b604051602081830303815290604052805190602001209050919050565b60408051808201909152600080825260208201526000806113508461230e565b9050600061136682602001518360000151611767565b90506113718161232d565b60020154600160a01b900460ff1661139c5760405163a13f958f60e01b815260040160405180910390fd5b9094909350915050565b336000908152600b6020526040812054819060ff161580156113f457506113cd838061478b565b6113de9060a08101906080016141f1565b6001600160a01b0316336001600160a01b031614155b1561141257604051637c32a2b360e01b815260040160405180910390fd5b60045463ffffffff16611425848061478b565b6114369060408101906020016141b4565b63ffffffff161461145a5760405163b6bb322560e01b815260040160405180910390fd5b60006114696020850185614c95565b91506000905061148561147c868061478b565b61070b90614696565b60008181526008602052604090205490915060ff16821561172a57600c548311156114c3576040516313c06ef360e01b815260040160405180910390fd5b60008160038111156114d7576114d76144f9565b146114f557604051630caaeb0b60e11b815260040160405180910390fd5b601f60006115096080890160608a016141f1565b6001600160a01b0316815260208101919091526040016000205460ff1661154357604051631fa09b5360e31b815260040160405180910390fd5b611590826115546020890189614c95565b60405160200161156693929190614cde565b60408051601f19818403018152919052805160209091012061158b6080890189614cf8565b61236e565b6001600160a01b03166115a960808801606089016141f1565b6001600160a01b0316146115d057604051638579eca560e01b815260040160405180910390fd5b6040805160208082018590528183018690528251808303840181526060909201909252805191012060005b848110156117235761160b6123c0565b15801561166857506015600061162460208b018b614c95565b8481811061163457611634614d3e565b905060200201602081019061164991906141f1565b6001600160a01b0316815260208101919091526040016000205460ff16155b1561168657604051630e1eb7f760e31b815260040160405180910390fd5b6116b98261169760408b018b614c95565b848181106116a7576116a7614d3e565b905060200281019061158b9190614cf8565b6001600160a01b03166116cf60208a018a614c95565b838181106116df576116df614d3e565b90506020020160208101906116f491906141f1565b6001600160a01b03161461171b57604051633a1dd23360e21b815260040160405180910390fd5b6001016115fb565b505061175c565b600181600381111561173e5761173e6144f9565b1461175c57604051636320d2cf60e11b815260040160405180910390fd5b909590945092505050565b6000828260405160200161178b92919091825263ffffffff16602082015260400190565b60405160208183030381529060405280519060200120905092915050565b600080806117ba6020850185614c95565b60008981526009602052604090206117d392909161411f565b5060006117e0858061478b565b6117f19060608101906040016141b4565b63ffffffff16156118325761182f8761180a878061478b565b6101800135611819888061478b565b61182a9060608101906040016141b4565b6123e7565b90505b61183c858061478b565b610120013560000361185657600093509150819050611d2c565b6000611862868061478b565b6118739060c081019060a001614d54565b8061188c57506000898152600e602052604090205460ff165b9050600061189a878061478b565b610120013590508715611c3a5760006118b66020890189614c95565b91506118da90506118c7898061478b565b61012001356000600101546127106123f6565b915080600103611acb5782158015611951575081600a60006118ff60208c018c614c95565b600081811061191057611910614d3e565b905060200201602081019061192591906141f1565b6001600160a01b0390811682526020808301939093526040918201600090812091891681529252902054105b80156119675750601b546001600160a01b031615155b15611a36576015600061197d60208b018b614c95565b600081811061198e5761198e614d3e565b90506020020160208101906119a391906141f1565b6001600160a01b03168152602081019190915260400160002054610100900460ff166119e2576040516310c4e50960e01b815260040160405180910390fd5b600080611a238d8d866119f860208f018f614c95565b6000818110611a0957611a09614d3e565b9050602002016020810190611a1e91906141f1565b61240d565b9099509750949550611d2c945050505050565b81600a6000611a4860208c018c614c95565b6000818110611a5957611a59614d3e565b9050602002016020810190611a6e91906141f1565b6001600160a01b03166001600160a01b031681526020019081526020016000206000866001600160a01b03166001600160a01b031681526020019081526020016000206000828254611ac09190614d87565b90915550611c389050565b6000611ad78284614db0565b905060005b611ae7600184614d87565b811015611b845781600a6000611b0060208e018e614c95565b85818110611b1057611b10614d3e565b9050602002016020810190611b2591906141f1565b6001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611b779190614d87565b9091555050600101611adc565b506000611b918385614dc4565b611b9b9083614dd8565b905080600a6000611baf60208e018e614c95565b611bba600189614d87565b818110611bc957611bc9614d3e565b9050602002016020810190611bde91906141f1565b6001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611c309190614d87565b909155505050505b505b611c44878061478b565b611c559060608101906040016141b4565b60045463ffffffff9081169116148015611c7b57506000611c758a61232d565b60030154115b15611ca75760008981526007602052604081206004018054839290611ca1908490614d87565b90915550505b8115611cd25760008a8152600e60205260409020805460ff191690559450909250829150611d2c9050565b60008a8152600d602052604081208054908290559080611d1e8c8786868503611d0857611cff8e8061478b565b60e00135611d0a565b865b611d148f8061478b565b61014001356125cc565b909950975094955050505050505b9450945094915050565b6000611d5d84611d46888061478b565b611d579060808101906060016141f1565b876122cf565b611d7383868685611d6e8b8061478b565b612651565b50835b95945050505050565b601a54600090600160a01b900460ff1615611dad57604051633ee5b89360e01b815260040160405180910390fd5b82516000906001600160a01b0316158015611dcb5750602084015115155b15611de95760405163ae715ad360e01b815260040160405180910390fd5b611df685602001516127c5565b60608601519091506001600160a01b0316611e235760405162845fdd60e41b815260040160405180910390fd5b6127108560e001511115611e4a5760405163388d723160e11b815260040160405180910390fd5b6040805180820190915260008082526020820181905290819086516000906001600160a01b031615611ff1576000611e858960000151611330565b90935090506000611e958261232d565b84518c5163ffffffff9081169116149350905082611ebd5780546001600160a01b0316611ec3565b60208401515b95506001600160a01b038616611eec5760405163965a46c160e01b815260040160405180910390fd5b6003810154838015611efe5750600081115b15611f4f5760008b602001518360040154611f199190614dd8565b905081811115611f3c576040516348ba8bf160e01b815260040160405180910390fd5b6000848152600760205260409020600401555b50835163ffffffff1660408c01526020808501516101808d01528a015115611fee57611f838a600001518b6020015161217e565b611f9c828b60000151888d602001518f60e001516127fe565b6101208c01528951611fe7906001600160a01b03888116911614611fce576001820154600160a01b900460ff16611fdb565b8154600160a01b900460ff165b60128c60200151612881565b6101408c01525b50505b6003805490600061200183614deb565b909155506101608a015261201489611300565b60208801519093501561203457612034838860000151896020015161122c565b61204c838a8a600001518b6020015189878a886128ec565b509093505050505b9392505050565b804710156120b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146120fd576040519150601f19603f3d011682016040523d82523d6000602084013e612102565b606091505b50509050806121795760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016120a7565b505050565b8060000361218a575050565b6001600160a01b0382166121b157604051632a38b13360e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156121fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221e9190614e04565b90506122356001600160a01b038316333086612ad3565b6040516370a0823160e01b8152306004820152839082906001600160a01b038516906370a0823190602401602060405180830381865afa15801561227d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a19190614e04565b6122ab9190614d87565b146122c957604051630e40773560e21b815260040160405180910390fd5b50505050565b806000036122dc57505050565b6001600160a01b03831661230357604051633a48ca7b60e11b815260040160405180910390fd5b612179838383612b3e565b604080518082019091526000808252602082015261040c826000612b6e565b6000818152600760205260408120600180820154839291600160a01b90910460ff1610156120545760405163618cca3f60e11b815260040160405180910390fd5b60006123b861237c85612c66565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ca192505050565b949350505050565b6000806123cb6112d2565b6001600160a01b031614806123e2575060125460ff165b905090565b60006123b88484846000612cc5565b6000816124038486614e1d565b6123b89190614db0565b600080600061241b86612d00565b601b546040516369a933a560e01b81526001600160a01b03808416600483015260248201899052306044830152600060648301529293509116906369a933a590608401600060405180830381600087803b15801561247857600080fd5b505af115801561248c573d6000803e3d6000fd5b5050601b54604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018a90523060448301526000945090911691506369328dec906064016020604051808303816000875af11580156124ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125109190614e04565b9050858110156125335760405163407559a360e11b815260040160405180910390fd5b6000888152601d60205260409020869055601c5461271090612556908890614e1d565b6125609190614db0565b6000898152601e60209081526040918290209290925580516001600160a01b038581168252928101899052918716918a917f2d3ba0fa5be2ef8cb1ec8920a07a6cbccc2397b18ca3e70f48ea695500b8f218910160405180910390a35084925090505b94509492505050565b60008060006125da8861232d565b60018101549091506001600160a01b0390811690881681036126025786935091506126479050565b866000036126165786935091506126479050565b6126408989838a61263b60128860010160149054906101000a900460ff168c8e612d39565b612d85565b9350935050505b9550959350505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47061267f60c0830183614cf8565b60405161268d929190614e34565b604051809103902003156127be576000806127546126b160808501606086016141f1565b6127105a6126bf9190614d87565b600061010063fd614f4160e01b8c8c8c8c6126db5760006126ed565b6126ed6101208d016101008e016141f1565b6126fa60208e018e6141b4565b61270760c08f018f614cf8565b60405160240161271d9796959493929190614e44565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612ec4565b9150915083158015612764575081155b15612781576040516264cdd360e41b815260040160405180910390fd5b867fb1a4ab59facaedd6d3a71da3902e0a1fa5b99750c0e20cd878334378a41cb33583836040516127b3929190614e97565b60405180910390a250505b5050505050565b63ffffffff81166000908152600f6020526040902054806127f957604051630c3bcd4960e41b815260040160405180910390fd5b919050565b60008260000361281057506000611d76565b846001600160a01b0316846001600160a01b031603612830575081611d76565b600061283b8761232d565b905060006128748888888861263b8760010160149054906101000a900460ff168860000160149054906101000a900460ff168c8c612d39565b5098975050505050505050565b60008260ff168460ff1603612897575080612054565b60008360ff168560ff1610156128cd576128b18585614eb2565b6128bc90600a614faf565b6128c69084614e1d565b90506123b8565b6128d78486614eb2565b6128e290600a614faf565b611d769084614db0565b610120870151801561295e578161295e57604051632770a7eb60e21b8152306004820152602481018290526001600160a01b03841690639dc29fac90604401600060405180830381600087803b15801561294557600080fd5b505af1158015612959573d6000803e3d6000fd5b505050505b6000846000015185602001516003848d604051602001612982959493929190614fbe565b60408051601f1981840301815282825260208054639fa92f9d60e01b8552925191945060009384936001600160a01b031692639fa92f9d926004808401939192918290030181865afa1580156129dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a009190614ffd565b6001600160a01b031663fa31de018c602001518a866040518463ffffffff1660e01b8152600401612a339392919061501a565b6000604051808303816000875af1158015612a52573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a7a919081019061503f565b91509150818b61016001518d7fed8e6ba697dd65259e5ce532ac08ff06d1a3607bcec58f8f0937fe36a5666c548e8e8e8c88604051612abd9594939291906150c1565b60405180910390a4505050505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526122c99085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612f4e565b6040516001600160a01b03831660248201526044810182905261217990849063a9059cbb60e01b90606401612b07565b604080518082019091526000808252602082015260408051808201909152600080825260208201526001600160a01b038416612bab57905061040c565b506001600160a01b03831660009081526005830160209081526040918290208251808401909352805463ffffffff168084526001909101549183019190915215612bf657905061040c565b612c008484613020565b15612c2657600483015463ffffffff1681526001600160a01b0384166020820152612054565b506001600160a01b03831660009081526006830160209081526040918290208251808401909352805463ffffffff16835260010154908201529392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01611313565b6000806000612cb0858561305f565b91509150612cbd816130a4565b509392505050565b600481015460009063ffffffff90811690841603612ce45750826123b8565b612ced8561232d565b546001600160a01b031695945050505050565b600080612d0c8361232d565b600101546001600160a01b031690508061040c57604051630558a50760e31b815260040160405180910390fd5b600082600003612d4b575060006123b8565b6000612710612d5a8482614d87565b612d649086614e1d565b612d6e9190614db0565b9050612d7b868683612881565b9695505050505050565b600085815260186020526040812081908190612da0816131f1565b15612dd257612dc6612db28a8a61320e565b612dbc8b8a61320e565b839190898961328e565b87935093505050612647565b6000612ddd8a61232d565b600201546001600160a01b0390811691508990612dfe908216836000613597565b612e126001600160a01b038216838a6136ac565b6001600160a01b03821663d460f0a2898c8c8b612e31610e1042614dd8565b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b0393841660248601529290911660448401526064830152608482015260a4016020604051808303816000875af1158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb69190614e04565b899550955050505050612647565b6000606060008060008661ffff166001600160401b03811115612ee957612ee9614591565b6040519080825280601f01601f191660200182016040528015612f13576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612f34578692505b828152826000602083013e90999098509650505050505050565b6000612fa3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661375e9092919063ffffffff16565b8051909150156121795780806020019051810190612fc19190615110565b6121795760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016120a7565b6001600160a01b038216600090815260068201602052604081205463ffffffff161561304e5750600061040c565b50506001600160a01b03163b151590565b60008082516041036130955760208301516040840151606085015160001a6130898782858561376d565b9450945050505061309d565b506000905060025b9250929050565b60008160048111156130b8576130b86144f9565b036130c05750565b60018160048111156130d4576130d46144f9565b036131215760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016120a7565b6002816004811115613135576131356144f9565b036131825760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016120a7565b6003816004811115613196576131966144f9565b036131ee5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016120a7565b50565b600c81015460009060ff1615801561040c57505060080154151590565b60008281526019602090815260408083206001600160a01b0385168085529083528184205486855260189093529083206008018054849360ff169291908390811061325b5761325b614d3e565b6000918252602090912001546001600160a01b0316146123b85760405163054e442960e41b815260040160405180910390fd5b600c85015460009060ff16156132d65760405162461bcd60e51b815260206004820152600d60248201526c191a5cd8589b1959081c1bdbdb609a1b60448201526064016120a7565b85600a018560ff16815481106132ee576132ee614d3e565b90600052602060002001548311156133415760405162461bcd60e51b81526020600482015260166024820152756d6f7265207468616e20706f6f6c2062616c616e636560501b60448201526064016120a7565b600080600088600a0180548060200260200160405190810160405280929190818152602001828054801561339457602002820191906000526020600020905b815481526020019060010190808311613380575b505050505090506133a8898989898561382e565b9093509150848310156133ea5760405162461bcd60e51b815260206004820152600a6024820152696479203c206d696e447960b01b60448201526064016120a7565b6000896009018860ff168154811061340457613404614d3e565b90600052602060002001546402540be4008b60060154856134259190614e1d565b61342f9190614db0565b6134399190614db0565b905086828a60ff168151811061345157613451614d3e565b60200260200101516134639190614dd8565b8a600a018a60ff168154811061347b5761347b614d3e565b90600052602060002001819055508084838a60ff16815181106134a0576134a0614d3e565b60200260200101516134b29190614d87565b6134bc9190614d87565b8a600a018960ff16815481106134d4576134d4614d3e565b600091825260209091200155801561353957808a600b018960ff16815481106134ff576134ff614d3e565b90600052602060002001546135149190614dd8565b8a600b018960ff168154811061352c5761352c614d3e565b6000918252602090912001555b8954604080518981526020810187905260ff8c8116828401528b16606082015290513392917f28d4cf2d5709da3b474b5f05cfd7083faffd601f9500d1f8439b8a13ec7df320919081900360800190a3509198975050505050505050565b8015806136115750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156135eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360f9190614e04565b155b61367c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016120a7565b6040516001600160a01b03831660248201526044810182905261217990849063095ea7b360e01b90606401612b07565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156136fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137219190614e04565b61372b9190614dd8565b6040516001600160a01b0385166024820152604481018290529091506122c990859063095ea7b360e01b90606401612b07565b60606123b884846000856139f4565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156137a457506000905060036125c3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156137f8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613821576000600192509250506125c3565b9660009650945050505050565b60008060008760090180548060200260200160405190810160405280929190818152602001828054801561388157602002820191906000526020600020905b81548152602001906001019080831161386d575b5050505050905060006138948583613acf565b905080518860ff161080156138ac575080518760ff16105b6138ed5760405162461bcd60e51b8152602060048201526012602482015271696e646578206f7574206f662072616e676560701b60448201526064016120a7565b6000818960ff168151811061390457613904614d3e565b6020026020010151838a60ff168151811061392157613921614d3e565b6020026020010151886139349190614e1d565b61393e9190614dd8565b9050600061395761394e8c613bd9565b8b8b8587613be4565b9050600181848b60ff168151811061397157613971614d3e565b60200260200101516139839190614d87565b61398d9190614d87565b95506402540be4008b60050154876139a59190614e1d565b6139af9190614db0565b9450838960ff16815181106139c6576139c6614d3e565b602002602001015185876139da9190614d87565b6139e49190614db0565b9550505050509550959350505050565b606082471015613a555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016120a7565b600080866001600160a01b03168587604051613a71919061512d565b60006040518083038185875af1925050503d8060008114613aae576040519150601f19603f3d011682016040523d82523d6000602084013e613ab3565b606091505b5091509150613ac487838387613e4b565b979650505050505050565b81518151606091908114613b1c5760405162461bcd60e51b81526020600482015260146024820152736d69736d61746368206d756c7469706c6965727360601b60448201526064016120a7565b6000816001600160401b03811115613b3657613b36614591565b604051908082528060200260200182016040528015613b5f578160200160208202803683370190505b50905060005b82811015613bd057848181518110613b7f57613b7f614d3e565b6020026020010151868281518110613b9957613b99614d3e565b6020026020010151613bab9190614e1d565b828281518110613bbd57613bbd614d3e565b6020908102919091010152600101613b65565b50949350505050565b600061040c82613ec4565b805160009060ff80861690871603613c3e5760405162461bcd60e51b815260206004820152601760248201527f636f6d7061726520746f6b656e20746f20697473656c6600000000000000000060448201526064016120a7565b808660ff16108015613c525750808560ff16105b613c905760405162461bcd60e51b815260206004820152600f60248201526e1d1bdad95b881b9bdd08199bdd5b99608a1b60448201526064016120a7565b6000613c9c8489613f0d565b905080600080613cac8b86614e1d565b90506000805b86811015613d33578b60ff168103613ccc57899150613cff565b8a60ff168114613cf757888181518110613ce857613ce8614d3e565b60200260200101519150613cff565b600101613cb2565b613d098285614dd8565b9350613d158783614e1d565b613d1f8787614e1d565b613d299190614db0565b9450600101613cb2565b50613d3e8683614e1d565b6064613d4a8787614e1d565b613d549190614e1d565b613d5e9190614db0565b9350600082613d6e606488614e1d565b613d789190614db0565b613d829085614dd8565b9050600086815b610100811015613e02578192508884836002613da59190614e1d565b613daf9190614dd8565b613db99190614d87565b88613dc48480614e1d565b613dce9190614dd8565b613dd89190614db0565b9150613de482846140ba565b15613dfa57509850611d76975050505050505050565b600101613d89565b5060405162461bcd60e51b815260206004820152601e60248201527f417070726f78696d6174696f6e20646964206e6f7420636f6e7665726765000060448201526064016120a7565b60608315613eba578251600003613eb3576001600160a01b0385163b613eb35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016120a7565b50816123b8565b6123b883836140d0565b600481015460028201546001830154909190808314801590613ee557508142105b15613f06576000846003015490508083038142038502428503840201049350505b5050919050565b815160009081805b82811015613f4c57858181518110613f2f57613f2f614d3e565b602002602001015182613f429190614dd8565b9150600101613f15565b5080600003613f605760009250505061040c565b60008181613f6e8588614e1d565b905060005b61010081101561407b578260005b87811015613fcc57878b8281518110613f9c57613f9c614d3e565b6020026020010151613fae9190614e1d565b613fb88684614e1d565b613fc29190614db0565b9150600101613f81565b5083945080876001613fde9190614dd8565b613fe89190614e1d565b606485613ff58287614d87565b613fff9190614e1d565b6140099190614db0565b6140139190614dd8565b8461401e8984614e1d565b606461402a8a88614e1d565b6140349190614db0565b61403e9190614dd8565b6140489190614e1d565b6140529190614db0565b935061405e84866140ba565b15614072578397505050505050505061040c565b50600101613f73565b5060405162461bcd60e51b81526020600482015260136024820152724420646f6573206e6f7420636f6e766572676560681b60448201526064016120a7565b600060026140c884846140fa565b109392505050565b8151156140e05781518083602001fd5b8060405162461bcd60e51b81526004016120a7919061513f565b6000818311156141155761410e8284614d87565b905061040c565b6120548383614d87565b828054828255906000526020600020908101928215614172579160200282015b828111156141725781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061413f565b5061417e929150614182565b5090565b5b8082111561417e5760008155600101614183565b63ffffffff811681146131ee57600080fd5b80356127f981614197565b6000602082840312156141c657600080fd5b813561205481614197565b6001600160a01b03811681146131ee57600080fd5b80356127f9816141d1565b60006020828403121561420357600080fd5b8135612054816141d1565b60006020828403121561422057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156142685783516001600160a01b031683529284019291840191600101614243565b50909695505050505050565b60006101a0828403121561428757600080fd5b50919050565b600080604083850312156142a057600080fd5b82356001600160401b038111156142b657600080fd5b6142c285828601614274565b95602094909401359450505050565b6000806000606084860312156142e657600080fd5b8335925060208401356142f8816141d1565b929592945050506040919091013590565b60006020828403121561431b57600080fd5b81356001600160401b0381111561433157600080fd5b820160a0818503121561205457600080fd5b60008083601f84011261435557600080fd5b5081356001600160401b0381111561436c57600080fd5b60208301915083602082850101111561309d57600080fd5b60008060008060008060008060006101008a8c0312156143a357600080fd5b89356143ae81614197565b985060208a01356143be816141d1565b975060408a01356143ce816141d1565b965060608a01356143de816141d1565b955060808a0135945060a08a0135935060c08a01356001600160401b0381111561440757600080fd5b6144138c828d01614343565b9a9d999c50979a9699959894979660e00135949350505050565b60008060008060008060008060e0898b03121561444957600080fd5b883561445481614197565b97506020890135614464816141d1565b96506040890135614474816141d1565b95506060890135614484816141d1565b94506080890135935060a0890135925060c08901356001600160401b038111156144ad57600080fd5b6144b98b828c01614343565b999c989b5096995094979396929594505050565b600080604083850312156144e057600080fd5b82356144eb81614197565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600481106131ee57634e487b7160e01b600052602160045260246000fd5b6020810161453a8361450f565b91905290565b60006020828403121561455257600080fd5b81356001600160401b0381111561456857600080fd5b6123b884828501614274565b60006020828403121561458657600080fd5b815161205481614197565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b03811182821017156145ca576145ca614591565b60405290565b604051601f8201601f191681016001600160401b03811182821017156145f8576145f8614591565b604052919050565b80151581146131ee57600080fd5b80356127f981614600565b60006001600160401b0382111561463257614632614591565b50601f01601f191660200190565b600082601f83011261465157600080fd5b813561466461465f82614619565b6145d0565b81815284602083860101111561467957600080fd5b816020850160208301376000918101602001919091529392505050565b60006101a082360312156146a957600080fd5b6146b16145a7565b6146ba836141a9565b81526146c8602084016141a9565b60208201526146d9604084016141a9565b60408201526146ea606084016141e6565b60608201526146fb608084016141e6565b608082015261470c60a0840161460e565b60a082015260c08301356001600160401b0381111561472a57600080fd5b61473636828601614640565b60c08301525060e083013560e08201526101006147548185016141e6565b9082015261012083810135908201526101408084013590820152610160808401359082015261018092830135928101929092525090565b6000823561019e198336030181126147a257600080fd5b9190910192915050565b6000808335601e198436030181126147c357600080fd5b83016020810192503590506001600160401b038111156147e257600080fd5b80360382131561309d57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e1984360301811261483157600080fd5b83016020810192503590506001600160401b0381111561485057600080fd5b8060051b360382131561309d57600080fd5b8183526000602080850194508260005b858110156148a0578135614885816141d1565b6001600160a01b031687529582019590820190600101614872565b509495945050505050565b81835260006020808501808196508560051b810191508460005b878110156148fb5782840389526148dc82886147ac565b6148e78682846147f1565b9a87019a95505050908401906001016148c5565b5091979650505050505050565b608081526000610120863561019e1988360301811261492657600080fd5b60a06080850152870161494882850161493e836141a9565b63ffffffff169052565b614954602082016141a9565b6101406149688187018363ffffffff169052565b614974604084016141a9565b915061016061498a8188018463ffffffff169052565b614996606085016141e6565b92506101806149af818901856001600160a01b03169052565b6149bb608086016141e6565b93506101a06149d4818a01866001600160a01b03169052565b6149e060a0870161460e565b8015156101c08b015294506149f860c08701876147ac565b9550816101e08b0152614a106102c08b0187836147f1565b9550505060e0850135610200890152610100614a2d8187016141e6565b6001600160a01b03166102208a0152858701356102408a0152838601356102608a0152828601356102808a0152818601356102a08a0152614a7160208e018e61481a565b97509550607f199350838986030160a08a0152614a8f858888614862565b9650614a9e60408e018e61481a565b96509450838988030160c08a0152614ab78787876148ab565b9650614ac560608e016141e6565b6001600160a01b03811660e08b01529550614ae360808e018e6147ac565b965094508389880301818a015250505050614aff8383836147f1565b9350505050614b1960208301866001600160a01b03169052565b836040830152611d7660608301846001600160a01b03169052565b60005b83811015614b4f578181015183820152602001614b37565b50506000910152565b60008151808452614b70816020860160208601614b34565b601f01601f19169290920160200192915050565b805163ffffffff16825260006101a06020830151614baa602086018263ffffffff169052565b506040830151614bc2604086018263ffffffff169052565b506060830151614bdd60608601826001600160a01b03169052565b506080830151614bf860808601826001600160a01b03169052565b5060a0830151614c0c60a086018215159052565b5060c08301518160c0860152614c2482860182614b58565b91505060e083015160e085015261010080840151614c4c828701826001600160a01b03169052565b50506101208381015190850152610140808401519085015261016080840151908501526101809283015192909301919091525090565b6020815260006120546020830184614b84565b6000808335601e19843603018112614cac57600080fd5b8301803591506001600160401b03821115614cc657600080fd5b6020019150600581901b360382131561309d57600080fd5b838152604060208201526000611d76604083018486614862565b6000808335601e19843603018112614d0f57600080fd5b8301803591506001600160401b03821115614d2957600080fd5b60200191503681900382131561309d57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215614d6657600080fd5b813561205481614600565b634e487b7160e01b600052601160045260246000fd5b8181038181111561040c5761040c614d71565b634e487b7160e01b600052601260045260246000fd5b600082614dbf57614dbf614d9a565b500490565b600082614dd357614dd3614d9a565b500690565b8082018082111561040c5761040c614d71565b600060018201614dfd57614dfd614d71565b5060010190565b600060208284031215614e1657600080fd5b5051919050565b808202811582820484141761040c5761040c614d71565b8183823760009101908152919050565b878152602081018790526001600160a01b0386811660408301528516606082015263ffffffff8416608082015260c060a08201819052600090614e8a90830184866147f1565b9998505050505050505050565b82151581526040602082015260006123b86040830184614b58565b60ff828116828216039081111561040c5761040c614d71565b600181815b80851115614f06578160001904821115614eec57614eec614d71565b80851615614ef957918102915b93841c9390800290614ed0565b509250929050565b600082614f1d5750600161040c565b81614f2a5750600061040c565b8160018114614f405760028114614f4a57614f66565b600191505061040c565b60ff841115614f5b57614f5b614d71565b50506001821b61040c565b5060208310610133831016604e8410600b8410161715614f89575081810a61040c565b614f938383614ecb565b8060001904821115614fa757614fa7614d71565b029392505050565b600061205460ff841683614f0e565b63ffffffff60e01b8660e01b168152846004820152614fdc8461450f565b60f89390931b60248401526025830191909152604582015260650192915050565b60006020828403121561500f57600080fd5b8151612054816141d1565b63ffffffff84168152826020820152606060408201526000611d766060830184614b58565b6000806040838503121561505257600080fd5b8251915060208301516001600160401b0381111561506f57600080fd5b8301601f8101851361508057600080fd5b805161508e61465f82614619565b8181528660208385010111156150a357600080fd5b6150b4826020830160208601614b34565b8093505050509250929050565b60a0815260006150d460a0830188614b84565b6001600160a01b038781166020850152604084018790528516606084015282810360808401526151048185614b58565b98975050505050505050565b60006020828403121561512257600080fd5b815161205481614600565b600082516147a2818460208701614b34565b6020815260006120546020830184614b5856fea264697066735822122083a85792fc0e29cd905f805175da0fd17a6a6073b7d3197f199a713d8d3885bf64736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80636989ca7c116100a0578063affed0e011610064578063affed0e01461033e578063b49c53a714610353578063bfd7903014610373578063c2fb26a6146103b0578063cb8058ba146103d557600080fd5b80636989ca7c146102b85780638a336231146102d85780638aac16ba146102f857806391f5de791461030b57806393f18ac51461031e57600080fd5b806341bdc8b5116100e757806341bdc8b51461020a578063541267111461022a57806359efa1621461024a57806363e3e7d21461026a578063674dc9331461029857600080fd5b8063121cca3114610124578063159e041f146101615780631a8bc0e1146101aa5780632424401f146101d75780633339df96146101ec575b600080fd5b34801561013057600080fd5b5061014461013f3660046141b4565b6103f5565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016d57600080fd5b5061019a61017c3660046141f1565b6001600160a01b03166000908152601f602052604090205460ff1690565b6040519015158152602001610158565b3480156101b657600080fd5b506101ca6101c536600461420e565b610412565b6040516101589190614227565b6101ea6101e536600461420e565b61047e565b005b3480156101f857600080fd5b506020546001600160a01b0316610144565b34801561021657600080fd5b506101ea6102253660046141f1565b610507565b34801561023657600080fd5b506101ea61024536600461428d565b610664565b34801561025657600080fd5b506101ea6102653660046142d1565b610766565b34801561027657600080fd5b5061028a610285366004614309565b6107fb565b604051908152602001610158565b3480156102a457600080fd5b5061028a6102b3366004614384565b6109ba565b3480156102c457600080fd5b506101ea6102d33660046141f1565b610ae2565b3480156102e457600080fd5b506101ea6102f33660046141f1565b610bda565b61028a61030636600461442d565b610cf6565b61028a61031936600461442d565b610e1b565b34801561032a57600080fd5b5061028a610339366004614384565b610f2d565b34801561034a57600080fd5b5060035461028a565b34801561035f57600080fd5b506101ea61036e3660046144cd565b611041565b34801561037f57600080fd5b506103a361038e36600461420e565b60009081526008602052604090205460ff1690565b604051610158919061452d565b3480156103bc57600080fd5b5060045460405163ffffffff9091168152602001610158565b3480156103e157600080fd5b506101ea6103f0366004614540565b61115f565b63ffffffff81166000908152600f60205260408120545b92915050565b60008181526009602090815260409182902080548351818402810184019094528084526060939283018282801561047257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610454575b50505050509050919050565b601654600119016104a257604051637ce54e2d60e11b815260040160405180910390fd5b6002601655601a54600160a01b900460ff16156104d257604051633ee5b89360e01b815260040160405180910390fd5b346000036104f3576040516348e7dc3f60e01b815260040160405180910390fd5b6104ff8160003461122c565b506001601655565b336105106112d2565b6001600160a01b03161415801561054b575060033360009081526014602052604090205460ff166003811115610548576105486144f9565b14155b1561056957604051637b32c26b60e01b815260040160405180910390fd5b600480546040805163234d8e3d60e21b81529051849363ffffffff909316926001600160a01b03851692638d3638f492818301926020928290030181865afa1580156105b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105dd9190614574565b63ffffffff161461060057604051621ff66160e61b815260040160405180910390fd5b604080516001600160a01b03841681523360208201527fd6e53d12bb441b2201be4949c7f431b383623888df2abfeef43aaaf272802d50910160405180910390a1602080546001600160a01b0319166001600160a01b039290921691909117905550565b813361067660a08301608084016141f1565b6001600160a01b03161461069d5760405163e3613aff60e01b815260040160405180910390fd5b6127108211156106c057604051633345cd4360e11b815260040160405180910390fd5b60045463ffffffff166106d960408501602086016141b4565b63ffffffff16146106fd57604051632a8e462760e01b815260040160405180910390fd5b600061071061070b85614696565b611300565b6000818152600d6020526040908190208590555190915081907fb243c3cea6cd1bbfd64d5d0765f13734ca7b87fdf14e017391fe12a8891434ca906107589086815260200190565b60405180910390a250505050565b6016546001190161078a57604051637ce54e2d60e11b815260040160405180910390fd5b6002601655601a54600160a01b900460ff16156107ba57604051633ee5b89360e01b815260040160405180910390fd5b806000036107db576040516348e7dc3f60e01b815260040160405180910390fd5b6107e482611330565b50506107f183838361122c565b5050600160165550565b6016546000906001190161082257604051637ce54e2d60e11b815260040160405180910390fd5b6002601655601a54600160a01b900460ff161561085257604051633ee5b89360e01b815260040160405180910390fd5b60008061085e846113a6565b909250905060006001826003811115610879576108796144f9565b14610885576002610888565b60035b60008481526008602052604090208054919250829160ff191660018360038111156108b5576108b56144f9565b021790555060008080610910866108f46108cf8b8061478b565b61018001356108de8c8061478b565b6108ef9060608101906040016141b4565b611767565b6003876003811115610908576109086144f9565b14158b6117a9565b91945092509050600061093a8985858a60038a6003811115610934576109346144f9565b14611d36565b90506001600160a01b0383166109508a8061478b565b6109619060808101906060016141f1565b6001600160a01b0316887f0b07a8b0b083f8976b3c832b720632f49cb8ba1e7a99e1b145f51a47d3391cb78c8686336040516109a09493929190614908565b60405180910390a450506001601655509295945050505050565b601754600090600119016109e1576040516363b468cb60e11b815260040160405180910390fd5b6002601755604080516101a08101825260045463ffffffff90811682528c1660208083019190915260008284018190526001600160a01b03808e1660608501528b166080840152600160a08401528351601f88018390048302810183019094528684529260c08301918890889081908401838280828437600092018290525093855250505060208083018a905233604080850191909152606084018390526080840183905260a0840183905260c090930191909152815180830183526001600160a01b038d168082528183018c905283518085019094528352908201869052919250610ace918391611d7f565b60016017559b9a5050505050505050505050565b33610aeb6112d2565b6001600160a01b031614158015610b26575060033360009081526014602052604090205460ff166003811115610b2357610b236144f9565b14155b15610b4457604051637b32c26b60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff16610b7d57604051637840a40d60e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020908152604091829020805460ff19169055815192835233908301527f4860b0a180d4b5969c2757493a999f05d0b22318320f154a02170aa239e24b1391015b60405180910390a150565b33610be36112d2565b6001600160a01b031614158015610c1e575060033360009081526014602052604090205460ff166003811115610c1b57610c1b6144f9565b14155b15610c3c57604051637b32c26b60e01b815260040160405180910390fd5b6001600160a01b038116610c63576040516332f9c08d60e11b815260040160405180910390fd5b6001600160a01b0381166000908152601f602052604090205460ff1615610c9d5760405163e2a4506360e01b815260040160405180910390fd5b6001600160a01b0381166000818152601f6020908152604091829020805460ff19166001179055815192835233908301527f3860a100215fe93b6b95ed1ae0870e538f85a73b30d073f63fefc60e08b0c1249101610bcf565b60175460009060011901610d1d576040516363b468cb60e11b815260040160405180910390fd5b6002601755604080516101a08101825260045463ffffffff90811682528b1660208083019190915260008284018190526001600160a01b03808d1660608501528a16608084015260a083018190528351601f87018390048302810183019094528584529260c083019187908790819084018382808284376000920182905250938552505050602080830189905233604080850191909152606084018390526080840183905260a0840183905260c0909301829052825180840184526001600160a01b038d1681528082018b905283518085019094529183523490830152919250610e08918391611d7f565b60016017559a9950505050505050505050565b60175460009060011901610e42576040516363b468cb60e11b815260040160405180910390fd5b6002601755604080516101a08101825260045463ffffffff90811682528b1660208083019190915260008284018190526001600160a01b03808d1660608501528a166080840152600160a08401528351601f87018390048302810183019094528584529260c083019187908790819084018382808284376000920182905250938552505050602080830189905233604080850191909152606084018390526080840183905260a0840183905260c0909301829052825180840184526001600160a01b038d1681528082018b905283518085019094529183523490830152919250610e08918391611d7f565b60175460009060011901610f54576040516363b468cb60e11b815260040160405180910390fd5b6002601755604080516101a08101825260045463ffffffff90811682528c1660208083019190915260008284018190526001600160a01b03808e1660608501528b16608084015260a083018190528351601f88018390048302810183019094528684529260c08301918890889081908401838280828437600092018290525093855250505060208083018a905233604080850191909152606084018390526080840183905260a0840183905260c090930191909152815180830183526001600160a01b038d168082528183018c905283518085019094528352908201869052919250610ace918391611d7f565b3361104a6112d2565b6001600160a01b031614158015611085575060033360009081526014602052604090205460ff166003811115611082576110826144f9565b14155b156110a357604051637b32c26b60e01b815260040160405180910390fd5b806110c157604051633bca644d60e11b815260040160405180910390fd5b63ffffffff821615806110de575060045463ffffffff8381169116145b156110fc57604051632892757b60e21b815260040160405180910390fd5b63ffffffff82166000818152600f602090815260409182902084905581519283526001600160a01b038416908301523382820152517fb07f562723347d6ea7f9f37b3b31f96b65104c3339d1c89e1b6fa88e2410b85c9181900360600190a15050565b803361117160a08301608084016141f1565b6001600160a01b0316146111985760405163e3613aff60e01b815260040160405180910390fd5b60045463ffffffff166111b160408401602085016141b4565b63ffffffff16146111d557604051630ada556f60e31b815260040160405180910390fd5b60006111e361070b84614696565b6000818152600e6020526040808220805460ff191660011790555191925082917f2510041334ede909998b9aefcca4300fc36c670dd00e1f7f0afffaca56adcb399190a2505050565b6002546001600160a01b03168061125657604051630bd7619560e41b815260040160405180910390fd5b6001600160a01b0383166112735761126e818361205b565b611288565b61127d838361217e565b6112888382846122cf565b604080518381526001600160a01b0385166020820152339181019190915284907ff90d3aafcedf55a0da208dd26d915e0ce1870ee9221586012487a0b366106f6590606001610758565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6000816040516020016113139190614c82565b604051602081830303815290604052805190602001209050919050565b60408051808201909152600080825260208201526000806113508461230e565b9050600061136682602001518360000151611767565b90506113718161232d565b60020154600160a01b900460ff1661139c5760405163a13f958f60e01b815260040160405180910390fd5b9094909350915050565b336000908152600b6020526040812054819060ff161580156113f457506113cd838061478b565b6113de9060a08101906080016141f1565b6001600160a01b0316336001600160a01b031614155b1561141257604051637c32a2b360e01b815260040160405180910390fd5b60045463ffffffff16611425848061478b565b6114369060408101906020016141b4565b63ffffffff161461145a5760405163b6bb322560e01b815260040160405180910390fd5b60006114696020850185614c95565b91506000905061148561147c868061478b565b61070b90614696565b60008181526008602052604090205490915060ff16821561172a57600c548311156114c3576040516313c06ef360e01b815260040160405180910390fd5b60008160038111156114d7576114d76144f9565b146114f557604051630caaeb0b60e11b815260040160405180910390fd5b601f60006115096080890160608a016141f1565b6001600160a01b0316815260208101919091526040016000205460ff1661154357604051631fa09b5360e31b815260040160405180910390fd5b611590826115546020890189614c95565b60405160200161156693929190614cde565b60408051601f19818403018152919052805160209091012061158b6080890189614cf8565b61236e565b6001600160a01b03166115a960808801606089016141f1565b6001600160a01b0316146115d057604051638579eca560e01b815260040160405180910390fd5b6040805160208082018590528183018690528251808303840181526060909201909252805191012060005b848110156117235761160b6123c0565b15801561166857506015600061162460208b018b614c95565b8481811061163457611634614d3e565b905060200201602081019061164991906141f1565b6001600160a01b0316815260208101919091526040016000205460ff16155b1561168657604051630e1eb7f760e31b815260040160405180910390fd5b6116b98261169760408b018b614c95565b848181106116a7576116a7614d3e565b905060200281019061158b9190614cf8565b6001600160a01b03166116cf60208a018a614c95565b838181106116df576116df614d3e565b90506020020160208101906116f491906141f1565b6001600160a01b03161461171b57604051633a1dd23360e21b815260040160405180910390fd5b6001016115fb565b505061175c565b600181600381111561173e5761173e6144f9565b1461175c57604051636320d2cf60e11b815260040160405180910390fd5b909590945092505050565b6000828260405160200161178b92919091825263ffffffff16602082015260400190565b60405160208183030381529060405280519060200120905092915050565b600080806117ba6020850185614c95565b60008981526009602052604090206117d392909161411f565b5060006117e0858061478b565b6117f19060608101906040016141b4565b63ffffffff16156118325761182f8761180a878061478b565b6101800135611819888061478b565b61182a9060608101906040016141b4565b6123e7565b90505b61183c858061478b565b610120013560000361185657600093509150819050611d2c565b6000611862868061478b565b6118739060c081019060a001614d54565b8061188c57506000898152600e602052604090205460ff165b9050600061189a878061478b565b610120013590508715611c3a5760006118b66020890189614c95565b91506118da90506118c7898061478b565b61012001356000600101546127106123f6565b915080600103611acb5782158015611951575081600a60006118ff60208c018c614c95565b600081811061191057611910614d3e565b905060200201602081019061192591906141f1565b6001600160a01b0390811682526020808301939093526040918201600090812091891681529252902054105b80156119675750601b546001600160a01b031615155b15611a36576015600061197d60208b018b614c95565b600081811061198e5761198e614d3e565b90506020020160208101906119a391906141f1565b6001600160a01b03168152602081019190915260400160002054610100900460ff166119e2576040516310c4e50960e01b815260040160405180910390fd5b600080611a238d8d866119f860208f018f614c95565b6000818110611a0957611a09614d3e565b9050602002016020810190611a1e91906141f1565b61240d565b9099509750949550611d2c945050505050565b81600a6000611a4860208c018c614c95565b6000818110611a5957611a59614d3e565b9050602002016020810190611a6e91906141f1565b6001600160a01b03166001600160a01b031681526020019081526020016000206000866001600160a01b03166001600160a01b031681526020019081526020016000206000828254611ac09190614d87565b90915550611c389050565b6000611ad78284614db0565b905060005b611ae7600184614d87565b811015611b845781600a6000611b0060208e018e614c95565b85818110611b1057611b10614d3e565b9050602002016020810190611b2591906141f1565b6001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611b779190614d87565b9091555050600101611adc565b506000611b918385614dc4565b611b9b9083614dd8565b905080600a6000611baf60208e018e614c95565b611bba600189614d87565b818110611bc957611bc9614d3e565b9050602002016020810190611bde91906141f1565b6001600160a01b03166001600160a01b031681526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611c309190614d87565b909155505050505b505b611c44878061478b565b611c559060608101906040016141b4565b60045463ffffffff9081169116148015611c7b57506000611c758a61232d565b60030154115b15611ca75760008981526007602052604081206004018054839290611ca1908490614d87565b90915550505b8115611cd25760008a8152600e60205260409020805460ff191690559450909250829150611d2c9050565b60008a8152600d602052604081208054908290559080611d1e8c8786868503611d0857611cff8e8061478b565b60e00135611d0a565b865b611d148f8061478b565b61014001356125cc565b909950975094955050505050505b9450945094915050565b6000611d5d84611d46888061478b565b611d579060808101906060016141f1565b876122cf565b611d7383868685611d6e8b8061478b565b612651565b50835b95945050505050565b601a54600090600160a01b900460ff1615611dad57604051633ee5b89360e01b815260040160405180910390fd5b82516000906001600160a01b0316158015611dcb5750602084015115155b15611de95760405163ae715ad360e01b815260040160405180910390fd5b611df685602001516127c5565b60608601519091506001600160a01b0316611e235760405162845fdd60e41b815260040160405180910390fd5b6127108560e001511115611e4a5760405163388d723160e11b815260040160405180910390fd5b6040805180820190915260008082526020820181905290819086516000906001600160a01b031615611ff1576000611e858960000151611330565b90935090506000611e958261232d565b84518c5163ffffffff9081169116149350905082611ebd5780546001600160a01b0316611ec3565b60208401515b95506001600160a01b038616611eec5760405163965a46c160e01b815260040160405180910390fd5b6003810154838015611efe5750600081115b15611f4f5760008b602001518360040154611f199190614dd8565b905081811115611f3c576040516348ba8bf160e01b815260040160405180910390fd5b6000848152600760205260409020600401555b50835163ffffffff1660408c01526020808501516101808d01528a015115611fee57611f838a600001518b6020015161217e565b611f9c828b60000151888d602001518f60e001516127fe565b6101208c01528951611fe7906001600160a01b03888116911614611fce576001820154600160a01b900460ff16611fdb565b8154600160a01b900460ff165b60128c60200151612881565b6101408c01525b50505b6003805490600061200183614deb565b909155506101608a015261201489611300565b60208801519093501561203457612034838860000151896020015161122c565b61204c838a8a600001518b6020015189878a886128ec565b509093505050505b9392505050565b804710156120b05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146120fd576040519150601f19603f3d011682016040523d82523d6000602084013e612102565b606091505b50509050806121795760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016120a7565b505050565b8060000361218a575050565b6001600160a01b0382166121b157604051632a38b13360e01b815260040160405180910390fd5b6040516370a0823160e01b815230600482015282906000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156121fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221e9190614e04565b90506122356001600160a01b038316333086612ad3565b6040516370a0823160e01b8152306004820152839082906001600160a01b038516906370a0823190602401602060405180830381865afa15801561227d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a19190614e04565b6122ab9190614d87565b146122c957604051630e40773560e21b815260040160405180910390fd5b50505050565b806000036122dc57505050565b6001600160a01b03831661230357604051633a48ca7b60e11b815260040160405180910390fd5b612179838383612b3e565b604080518082019091526000808252602082015261040c826000612b6e565b6000818152600760205260408120600180820154839291600160a01b90910460ff1610156120545760405163618cca3f60e11b815260040160405180910390fd5b60006123b861237c85612c66565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612ca192505050565b949350505050565b6000806123cb6112d2565b6001600160a01b031614806123e2575060125460ff165b905090565b60006123b88484846000612cc5565b6000816124038486614e1d565b6123b89190614db0565b600080600061241b86612d00565b601b546040516369a933a560e01b81526001600160a01b03808416600483015260248201899052306044830152600060648301529293509116906369a933a590608401600060405180830381600087803b15801561247857600080fd5b505af115801561248c573d6000803e3d6000fd5b5050601b54604051631a4ca37b60e21b81526001600160a01b038581166004830152602482018a90523060448301526000945090911691506369328dec906064016020604051808303816000875af11580156124ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125109190614e04565b9050858110156125335760405163407559a360e11b815260040160405180910390fd5b6000888152601d60205260409020869055601c5461271090612556908890614e1d565b6125609190614db0565b6000898152601e60209081526040918290209290925580516001600160a01b038581168252928101899052918716918a917f2d3ba0fa5be2ef8cb1ec8920a07a6cbccc2397b18ca3e70f48ea695500b8f218910160405180910390a35084925090505b94509492505050565b60008060006125da8861232d565b60018101549091506001600160a01b0390811690881681036126025786935091506126479050565b866000036126165786935091506126479050565b6126408989838a61263b60128860010160149054906101000a900460ff168c8e612d39565b612d85565b9350935050505b9550959350505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47061267f60c0830183614cf8565b60405161268d929190614e34565b604051809103902003156127be576000806127546126b160808501606086016141f1565b6127105a6126bf9190614d87565b600061010063fd614f4160e01b8c8c8c8c6126db5760006126ed565b6126ed6101208d016101008e016141f1565b6126fa60208e018e6141b4565b61270760c08f018f614cf8565b60405160240161271d9796959493929190614e44565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612ec4565b9150915083158015612764575081155b15612781576040516264cdd360e41b815260040160405180910390fd5b867fb1a4ab59facaedd6d3a71da3902e0a1fa5b99750c0e20cd878334378a41cb33583836040516127b3929190614e97565b60405180910390a250505b5050505050565b63ffffffff81166000908152600f6020526040902054806127f957604051630c3bcd4960e41b815260040160405180910390fd5b919050565b60008260000361281057506000611d76565b846001600160a01b0316846001600160a01b031603612830575081611d76565b600061283b8761232d565b905060006128748888888861263b8760010160149054906101000a900460ff168860000160149054906101000a900460ff168c8c612d39565b5098975050505050505050565b60008260ff168460ff1603612897575080612054565b60008360ff168560ff1610156128cd576128b18585614eb2565b6128bc90600a614faf565b6128c69084614e1d565b90506123b8565b6128d78486614eb2565b6128e290600a614faf565b611d769084614db0565b610120870151801561295e578161295e57604051632770a7eb60e21b8152306004820152602481018290526001600160a01b03841690639dc29fac90604401600060405180830381600087803b15801561294557600080fd5b505af1158015612959573d6000803e3d6000fd5b505050505b6000846000015185602001516003848d604051602001612982959493929190614fbe565b60408051601f1981840301815282825260208054639fa92f9d60e01b8552925191945060009384936001600160a01b031692639fa92f9d926004808401939192918290030181865afa1580156129dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a009190614ffd565b6001600160a01b031663fa31de018c602001518a866040518463ffffffff1660e01b8152600401612a339392919061501a565b6000604051808303816000875af1158015612a52573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a7a919081019061503f565b91509150818b61016001518d7fed8e6ba697dd65259e5ce532ac08ff06d1a3607bcec58f8f0937fe36a5666c548e8e8e8c88604051612abd9594939291906150c1565b60405180910390a4505050505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526122c99085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612f4e565b6040516001600160a01b03831660248201526044810182905261217990849063a9059cbb60e01b90606401612b07565b604080518082019091526000808252602082015260408051808201909152600080825260208201526001600160a01b038416612bab57905061040c565b506001600160a01b03831660009081526005830160209081526040918290208251808401909352805463ffffffff168084526001909101549183019190915215612bf657905061040c565b612c008484613020565b15612c2657600483015463ffffffff1681526001600160a01b0384166020820152612054565b506001600160a01b03831660009081526006830160209081526040918290208251808401909352805463ffffffff16835260010154908201529392505050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01611313565b6000806000612cb0858561305f565b91509150612cbd816130a4565b509392505050565b600481015460009063ffffffff90811690841603612ce45750826123b8565b612ced8561232d565b546001600160a01b031695945050505050565b600080612d0c8361232d565b600101546001600160a01b031690508061040c57604051630558a50760e31b815260040160405180910390fd5b600082600003612d4b575060006123b8565b6000612710612d5a8482614d87565b612d649086614e1d565b612d6e9190614db0565b9050612d7b868683612881565b9695505050505050565b600085815260186020526040812081908190612da0816131f1565b15612dd257612dc6612db28a8a61320e565b612dbc8b8a61320e565b839190898961328e565b87935093505050612647565b6000612ddd8a61232d565b600201546001600160a01b0390811691508990612dfe908216836000613597565b612e126001600160a01b038216838a6136ac565b6001600160a01b03821663d460f0a2898c8c8b612e31610e1042614dd8565b6040516001600160e01b031960e088901b16815260048101959095526001600160a01b0393841660248601529290911660448401526064830152608482015260a4016020604051808303816000875af1158015612e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb69190614e04565b899550955050505050612647565b6000606060008060008661ffff166001600160401b03811115612ee957612ee9614591565b6040519080825280601f01601f191660200182016040528015612f13576020820181803683370190505b5090506000808751602089018b8e8ef191503d925086831115612f34578692505b828152826000602083013e90999098509650505050505050565b6000612fa3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661375e9092919063ffffffff16565b8051909150156121795780806020019051810190612fc19190615110565b6121795760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016120a7565b6001600160a01b038216600090815260068201602052604081205463ffffffff161561304e5750600061040c565b50506001600160a01b03163b151590565b60008082516041036130955760208301516040840151606085015160001a6130898782858561376d565b9450945050505061309d565b506000905060025b9250929050565b60008160048111156130b8576130b86144f9565b036130c05750565b60018160048111156130d4576130d46144f9565b036131215760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016120a7565b6002816004811115613135576131356144f9565b036131825760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016120a7565b6003816004811115613196576131966144f9565b036131ee5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016120a7565b50565b600c81015460009060ff1615801561040c57505060080154151590565b60008281526019602090815260408083206001600160a01b0385168085529083528184205486855260189093529083206008018054849360ff169291908390811061325b5761325b614d3e565b6000918252602090912001546001600160a01b0316146123b85760405163054e442960e41b815260040160405180910390fd5b600c85015460009060ff16156132d65760405162461bcd60e51b815260206004820152600d60248201526c191a5cd8589b1959081c1bdbdb609a1b60448201526064016120a7565b85600a018560ff16815481106132ee576132ee614d3e565b90600052602060002001548311156133415760405162461bcd60e51b81526020600482015260166024820152756d6f7265207468616e20706f6f6c2062616c616e636560501b60448201526064016120a7565b600080600088600a0180548060200260200160405190810160405280929190818152602001828054801561339457602002820191906000526020600020905b815481526020019060010190808311613380575b505050505090506133a8898989898561382e565b9093509150848310156133ea5760405162461bcd60e51b815260206004820152600a6024820152696479203c206d696e447960b01b60448201526064016120a7565b6000896009018860ff168154811061340457613404614d3e565b90600052602060002001546402540be4008b60060154856134259190614e1d565b61342f9190614db0565b6134399190614db0565b905086828a60ff168151811061345157613451614d3e565b60200260200101516134639190614dd8565b8a600a018a60ff168154811061347b5761347b614d3e565b90600052602060002001819055508084838a60ff16815181106134a0576134a0614d3e565b60200260200101516134b29190614d87565b6134bc9190614d87565b8a600a018960ff16815481106134d4576134d4614d3e565b600091825260209091200155801561353957808a600b018960ff16815481106134ff576134ff614d3e565b90600052602060002001546135149190614dd8565b8a600b018960ff168154811061352c5761352c614d3e565b6000918252602090912001555b8954604080518981526020810187905260ff8c8116828401528b16606082015290513392917f28d4cf2d5709da3b474b5f05cfd7083faffd601f9500d1f8439b8a13ec7df320919081900360800190a3509198975050505050505050565b8015806136115750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156135eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360f9190614e04565b155b61367c5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016120a7565b6040516001600160a01b03831660248201526044810182905261217990849063095ea7b360e01b90606401612b07565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa1580156136fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137219190614e04565b61372b9190614dd8565b6040516001600160a01b0385166024820152604481018290529091506122c990859063095ea7b360e01b90606401612b07565b60606123b884846000856139f4565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156137a457506000905060036125c3565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156137f8573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116613821576000600192509250506125c3565b9660009650945050505050565b60008060008760090180548060200260200160405190810160405280929190818152602001828054801561388157602002820191906000526020600020905b81548152602001906001019080831161386d575b5050505050905060006138948583613acf565b905080518860ff161080156138ac575080518760ff16105b6138ed5760405162461bcd60e51b8152602060048201526012602482015271696e646578206f7574206f662072616e676560701b60448201526064016120a7565b6000818960ff168151811061390457613904614d3e565b6020026020010151838a60ff168151811061392157613921614d3e565b6020026020010151886139349190614e1d565b61393e9190614dd8565b9050600061395761394e8c613bd9565b8b8b8587613be4565b9050600181848b60ff168151811061397157613971614d3e565b60200260200101516139839190614d87565b61398d9190614d87565b95506402540be4008b60050154876139a59190614e1d565b6139af9190614db0565b9450838960ff16815181106139c6576139c6614d3e565b602002602001015185876139da9190614d87565b6139e49190614db0565b9550505050509550959350505050565b606082471015613a555760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016120a7565b600080866001600160a01b03168587604051613a71919061512d565b60006040518083038185875af1925050503d8060008114613aae576040519150601f19603f3d011682016040523d82523d6000602084013e613ab3565b606091505b5091509150613ac487838387613e4b565b979650505050505050565b81518151606091908114613b1c5760405162461bcd60e51b81526020600482015260146024820152736d69736d61746368206d756c7469706c6965727360601b60448201526064016120a7565b6000816001600160401b03811115613b3657613b36614591565b604051908082528060200260200182016040528015613b5f578160200160208202803683370190505b50905060005b82811015613bd057848181518110613b7f57613b7f614d3e565b6020026020010151868281518110613b9957613b99614d3e565b6020026020010151613bab9190614e1d565b828281518110613bbd57613bbd614d3e565b6020908102919091010152600101613b65565b50949350505050565b600061040c82613ec4565b805160009060ff80861690871603613c3e5760405162461bcd60e51b815260206004820152601760248201527f636f6d7061726520746f6b656e20746f20697473656c6600000000000000000060448201526064016120a7565b808660ff16108015613c525750808560ff16105b613c905760405162461bcd60e51b815260206004820152600f60248201526e1d1bdad95b881b9bdd08199bdd5b99608a1b60448201526064016120a7565b6000613c9c8489613f0d565b905080600080613cac8b86614e1d565b90506000805b86811015613d33578b60ff168103613ccc57899150613cff565b8a60ff168114613cf757888181518110613ce857613ce8614d3e565b60200260200101519150613cff565b600101613cb2565b613d098285614dd8565b9350613d158783614e1d565b613d1f8787614e1d565b613d299190614db0565b9450600101613cb2565b50613d3e8683614e1d565b6064613d4a8787614e1d565b613d549190614e1d565b613d5e9190614db0565b9350600082613d6e606488614e1d565b613d789190614db0565b613d829085614dd8565b9050600086815b610100811015613e02578192508884836002613da59190614e1d565b613daf9190614dd8565b613db99190614d87565b88613dc48480614e1d565b613dce9190614dd8565b613dd89190614db0565b9150613de482846140ba565b15613dfa57509850611d76975050505050505050565b600101613d89565b5060405162461bcd60e51b815260206004820152601e60248201527f417070726f78696d6174696f6e20646964206e6f7420636f6e7665726765000060448201526064016120a7565b60608315613eba578251600003613eb3576001600160a01b0385163b613eb35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016120a7565b50816123b8565b6123b883836140d0565b600481015460028201546001830154909190808314801590613ee557508142105b15613f06576000846003015490508083038142038502428503840201049350505b5050919050565b815160009081805b82811015613f4c57858181518110613f2f57613f2f614d3e565b602002602001015182613f429190614dd8565b9150600101613f15565b5080600003613f605760009250505061040c565b60008181613f6e8588614e1d565b905060005b61010081101561407b578260005b87811015613fcc57878b8281518110613f9c57613f9c614d3e565b6020026020010151613fae9190614e1d565b613fb88684614e1d565b613fc29190614db0565b9150600101613f81565b5083945080876001613fde9190614dd8565b613fe89190614e1d565b606485613ff58287614d87565b613fff9190614e1d565b6140099190614db0565b6140139190614dd8565b8461401e8984614e1d565b606461402a8a88614e1d565b6140349190614db0565b61403e9190614dd8565b6140489190614e1d565b6140529190614db0565b935061405e84866140ba565b15614072578397505050505050505061040c565b50600101613f73565b5060405162461bcd60e51b81526020600482015260136024820152724420646f6573206e6f7420636f6e766572676560681b60448201526064016120a7565b600060026140c884846140fa565b109392505050565b8151156140e05781518083602001fd5b8060405162461bcd60e51b81526004016120a7919061513f565b6000818311156141155761410e8284614d87565b905061040c565b6120548383614d87565b828054828255906000526020600020908101928215614172579160200282015b828111156141725781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061413f565b5061417e929150614182565b5090565b5b8082111561417e5760008155600101614183565b63ffffffff811681146131ee57600080fd5b80356127f981614197565b6000602082840312156141c657600080fd5b813561205481614197565b6001600160a01b03811681146131ee57600080fd5b80356127f9816141d1565b60006020828403121561420357600080fd5b8135612054816141d1565b60006020828403121561422057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156142685783516001600160a01b031683529284019291840191600101614243565b50909695505050505050565b60006101a0828403121561428757600080fd5b50919050565b600080604083850312156142a057600080fd5b82356001600160401b038111156142b657600080fd5b6142c285828601614274565b95602094909401359450505050565b6000806000606084860312156142e657600080fd5b8335925060208401356142f8816141d1565b929592945050506040919091013590565b60006020828403121561431b57600080fd5b81356001600160401b0381111561433157600080fd5b820160a0818503121561205457600080fd5b60008083601f84011261435557600080fd5b5081356001600160401b0381111561436c57600080fd5b60208301915083602082850101111561309d57600080fd5b60008060008060008060008060006101008a8c0312156143a357600080fd5b89356143ae81614197565b985060208a01356143be816141d1565b975060408a01356143ce816141d1565b965060608a01356143de816141d1565b955060808a0135945060a08a0135935060c08a01356001600160401b0381111561440757600080fd5b6144138c828d01614343565b9a9d999c50979a9699959894979660e00135949350505050565b60008060008060008060008060e0898b03121561444957600080fd5b883561445481614197565b97506020890135614464816141d1565b96506040890135614474816141d1565b95506060890135614484816141d1565b94506080890135935060a0890135925060c08901356001600160401b038111156144ad57600080fd5b6144b98b828c01614343565b999c989b5096995094979396929594505050565b600080604083850312156144e057600080fd5b82356144eb81614197565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600481106131ee57634e487b7160e01b600052602160045260246000fd5b6020810161453a8361450f565b91905290565b60006020828403121561455257600080fd5b81356001600160401b0381111561456857600080fd5b6123b884828501614274565b60006020828403121561458657600080fd5b815161205481614197565b634e487b7160e01b600052604160045260246000fd5b6040516101a081016001600160401b03811182821017156145ca576145ca614591565b60405290565b604051601f8201601f191681016001600160401b03811182821017156145f8576145f8614591565b604052919050565b80151581146131ee57600080fd5b80356127f981614600565b60006001600160401b0382111561463257614632614591565b50601f01601f191660200190565b600082601f83011261465157600080fd5b813561466461465f82614619565b6145d0565b81815284602083860101111561467957600080fd5b816020850160208301376000918101602001919091529392505050565b60006101a082360312156146a957600080fd5b6146b16145a7565b6146ba836141a9565b81526146c8602084016141a9565b60208201526146d9604084016141a9565b60408201526146ea606084016141e6565b60608201526146fb608084016141e6565b608082015261470c60a0840161460e565b60a082015260c08301356001600160401b0381111561472a57600080fd5b61473636828601614640565b60c08301525060e083013560e08201526101006147548185016141e6565b9082015261012083810135908201526101408084013590820152610160808401359082015261018092830135928101929092525090565b6000823561019e198336030181126147a257600080fd5b9190910192915050565b6000808335601e198436030181126147c357600080fd5b83016020810192503590506001600160401b038111156147e257600080fd5b80360382131561309d57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e1984360301811261483157600080fd5b83016020810192503590506001600160401b0381111561485057600080fd5b8060051b360382131561309d57600080fd5b8183526000602080850194508260005b858110156148a0578135614885816141d1565b6001600160a01b031687529582019590820190600101614872565b509495945050505050565b81835260006020808501808196508560051b810191508460005b878110156148fb5782840389526148dc82886147ac565b6148e78682846147f1565b9a87019a95505050908401906001016148c5565b5091979650505050505050565b608081526000610120863561019e1988360301811261492657600080fd5b60a06080850152870161494882850161493e836141a9565b63ffffffff169052565b614954602082016141a9565b6101406149688187018363ffffffff169052565b614974604084016141a9565b915061016061498a8188018463ffffffff169052565b614996606085016141e6565b92506101806149af818901856001600160a01b03169052565b6149bb608086016141e6565b93506101a06149d4818a01866001600160a01b03169052565b6149e060a0870161460e565b8015156101c08b015294506149f860c08701876147ac565b9550816101e08b0152614a106102c08b0187836147f1565b9550505060e0850135610200890152610100614a2d8187016141e6565b6001600160a01b03166102208a0152858701356102408a0152838601356102608a0152828601356102808a0152818601356102a08a0152614a7160208e018e61481a565b97509550607f199350838986030160a08a0152614a8f858888614862565b9650614a9e60408e018e61481a565b96509450838988030160c08a0152614ab78787876148ab565b9650614ac560608e016141e6565b6001600160a01b03811660e08b01529550614ae360808e018e6147ac565b965094508389880301818a015250505050614aff8383836147f1565b9350505050614b1960208301866001600160a01b03169052565b836040830152611d7660608301846001600160a01b03169052565b60005b83811015614b4f578181015183820152602001614b37565b50506000910152565b60008151808452614b70816020860160208601614b34565b601f01601f19169290920160200192915050565b805163ffffffff16825260006101a06020830151614baa602086018263ffffffff169052565b506040830151614bc2604086018263ffffffff169052565b506060830151614bdd60608601826001600160a01b03169052565b506080830151614bf860808601826001600160a01b03169052565b5060a0830151614c0c60a086018215159052565b5060c08301518160c0860152614c2482860182614b58565b91505060e083015160e085015261010080840151614c4c828701826001600160a01b03169052565b50506101208381015190850152610140808401519085015261016080840151908501526101809283015192909301919091525090565b6020815260006120546020830184614b84565b6000808335601e19843603018112614cac57600080fd5b8301803591506001600160401b03821115614cc657600080fd5b6020019150600581901b360382131561309d57600080fd5b838152604060208201526000611d76604083018486614862565b6000808335601e19843603018112614d0f57600080fd5b8301803591506001600160401b03821115614d2957600080fd5b60200191503681900382131561309d57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215614d6657600080fd5b813561205481614600565b634e487b7160e01b600052601160045260246000fd5b8181038181111561040c5761040c614d71565b634e487b7160e01b600052601260045260246000fd5b600082614dbf57614dbf614d9a565b500490565b600082614dd357614dd3614d9a565b500690565b8082018082111561040c5761040c614d71565b600060018201614dfd57614dfd614d71565b5060010190565b600060208284031215614e1657600080fd5b5051919050565b808202811582820484141761040c5761040c614d71565b8183823760009101908152919050565b878152602081018790526001600160a01b0386811660408301528516606082015263ffffffff8416608082015260c060a08201819052600090614e8a90830184866147f1565b9998505050505050505050565b82151581526040602082015260006123b86040830184614b58565b60ff828116828216039081111561040c5761040c614d71565b600181815b80851115614f06578160001904821115614eec57614eec614d71565b80851615614ef957918102915b93841c9390800290614ed0565b509250929050565b600082614f1d5750600161040c565b81614f2a5750600061040c565b8160018114614f405760028114614f4a57614f66565b600191505061040c565b60ff841115614f5b57614f5b614d71565b50506001821b61040c565b5060208310610133831016604e8410600b8410161715614f89575081810a61040c565b614f938383614ecb565b8060001904821115614fa757614fa7614d71565b029392505050565b600061205460ff841683614f0e565b63ffffffff60e01b8660e01b168152846004820152614fdc8461450f565b60f89390931b60248401526025830191909152604582015260650192915050565b60006020828403121561500f57600080fd5b8151612054816141d1565b63ffffffff84168152826020820152606060408201526000611d766060830184614b58565b6000806040838503121561505257600080fd5b8251915060208301516001600160401b0381111561506f57600080fd5b8301601f8101851361508057600080fd5b805161508e61465f82614619565b8181528660208385010111156150a357600080fd5b6150b4826020830160208601614b34565b8093505050509250929050565b60a0815260006150d460a0830188614b84565b6001600160a01b038781166020850152604084018790528516606084015282810360808401526151048185614b58565b98975050505050505050565b60006020828403121561512257600080fd5b815161205481614600565b600082516147a2818460208701614b34565b6020815260006120546020830184614b5856fea264697066735822122083a85792fc0e29cd905f805175da0fd17a6a6073b7d3197f199a713d8d3885bf64736f6c63430008110033",
  "devdoc": {
    "events": {
      "AavePortalMintUnbacked(bytes32,address,address,uint256)": {
        "params": {
          "amount": "- The amount of asset that was provided by Aave Portal",
          "asset": "- The asset that was provided by Aave Portal",
          "router": "- The authorized router that used Aave Portal liquidity",
          "transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "Executed(bytes32,address,address,((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),address,uint256,address)": {
        "details": "`execute` may be called when providing fast liquidity or when processing a reconciled (slow) transfer.",
        "params": {
          "amount": "- The amount of transferring asset the recipient address receives or the external call is executed with.",
          "args": "- The `ExecuteArgs` provided to the function.",
          "asset": "- The asset the recipient is given or the external call is executed with. Should be the adopted asset on that chain.",
          "caller": "- The account that called the function.",
          "local": "- The local asset that was either supplied by the router for a fast-liquidity transfer or minted by the bridge in a reconciled (slow) transfer. Could be the same as the adopted `asset` param.",
          "to": "- The recipient `TransferInfo.to` provided, created as indexed parameter.",
          "transferId": "- The unique identifier of the crosschain transfer."
        }
      },
      "ExternalCalldataExecuted(bytes32,bool,bytes)": {
        "params": {
          "returnData": "- Return bytes from the IXReceiver",
          "success": "- Whether calldata succeeded",
          "transferId": "- The unique identifier of the crosschain transfer."
        }
      },
      "ForceReceiveLocal(bytes32)": {
        "params": {
          "transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "RemoteAdded(uint32,address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "domain": "- The domain the remote instance is on",
          "remote": "- The address of the remote instance"
        }
      },
      "SequencerAdded(address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "sequencer": "- The sequencer address to be added or removed"
        }
      },
      "SequencerRemoved(address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "sequencer": "- The sequencer address to be added or removed"
        }
      },
      "SlippageUpdated(bytes32,uint256)": {
        "params": {
          "slippage": "- The updated slippage boundary",
          "transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "TransferRelayerFeesIncreased(bytes32,uint256,address,address)": {
        "params": {
          "asset": "- The asset the fee was increased with",
          "caller": "- The account that called the function",
          "increase": "- The additional amount fees increased by",
          "transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "XAppConnectionManagerSet(address,address)": {
        "params": {
          "caller": "- The account that called the function",
          "updated": "- The updated address"
        }
      },
      "XCalled(bytes32,uint256,bytes32,(uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address,uint256,address,bytes)": {
        "params": {
          "amount": "- The amount sent in with xcall",
          "asset": "- The asset sent in with xcall",
          "local": "- The local asset that is controlled by the bridge and can be burned/minted",
          "messageHash": "- The hash of the message bytes (containing all transfer info) that were bridged.",
          "nonce": "- The bridge nonce of the transfer on the origin domain.",
          "params": "- The `TransferInfo` provided to the function.",
          "transferId": "- The unique identifier of the crosschain transfer."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addSequencer(address)": {
        "params": {
          "_sequencer": "- The sequencer address to add."
        }
      },
      "bumpTransfer(bytes32)": {
        "params": {
          "_transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "bumpTransfer(bytes32,address,uint256)": {
        "params": {
          "_relayerFee": "- The amount you want to bump transfer fee with",
          "_relayerFeeAsset": "- The asset you are bumping fee with",
          "_transferId": "- The unique identifier of the crosschain transaction"
        }
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "params": {
          "_domain": "The domain of the remote xApp Router",
          "_router": "The address of the remote xApp Router"
        }
      },
      "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))": {
        "details": "Can be called before or after `handle` [reconcile] is called (regarding the same transfer), depending on whether the fast liquidity route (i.e. funds provided by routers) is being used for this transfer. As a result, executed calldata (including properties like `originSender`) may or may not be verified depending on whether the reconcile has been completed (i.e. the optimistic confirmation period has elapsed).",
        "params": {
          "_args": "- ExecuteArgs arguments."
        },
        "returns": {
          "_0": "bytes32 - The transfer ID of the crosschain transfer. Should match the xcall's transfer ID in order for reconciliation to occur."
        }
      },
      "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))": {
        "details": "Calldata will still be executed with the local asset. `IXReceiver` contracts should be able to handle local assets in event of failures.",
        "params": {
          "_params": "TransferInfo associated with the transfer"
        }
      },
      "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)": {
        "params": {
          "_params": "TransferInfo associated with the transfer",
          "_slippage": "The updated slippage"
        }
      },
      "removeSequencer(address)": {
        "params": {
          "_sequencer": "- The sequencer address to remove."
        }
      },
      "setXAppConnectionManager(address)": {
        "params": {
          "_xAppConnectionManager": "The address of the xAppConnectionManager contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AavePortalMintUnbacked(bytes32,address,address,uint256)": {
        "notice": "Emitted when a router used Aave Portal liquidity for fast transfer"
      },
      "Executed(bytes32,address,address,((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),address,uint256,address)": {
        "notice": "Emitted when `execute` is called on the destination domain of a transfer."
      },
      "ExternalCalldataExecuted(bytes32,bool,bytes)": {
        "notice": "Emitted when a transfer has its external data executed"
      },
      "ForceReceiveLocal(bytes32)": {
        "notice": "Emitted when `forceReceiveLocal` is called by a user-delegated EOA on the destination domain"
      },
      "RemoteAdded(uint32,address,address)": {
        "notice": "Emitted when a new remote instance is added"
      },
      "SequencerAdded(address,address)": {
        "notice": "Emitted when a sequencer is added or removed from allowlists"
      },
      "SequencerRemoved(address,address)": {
        "notice": "Emitted when a sequencer is added or removed from allowlists"
      },
      "SlippageUpdated(bytes32,uint256)": {
        "notice": "Emitted when `forceUpdateSlippage` is called by user-delegated EOA on the destination domain"
      },
      "TransferRelayerFeesIncreased(bytes32,uint256,address,address)": {
        "notice": "Emitted when `_bumpTransfer` is called by an user on the origin domain both in `xcall` and `bumpTransfer`"
      },
      "XAppConnectionManagerSet(address,address)": {
        "notice": "Emitted `xAppConnectionManager` is updated"
      },
      "XCalled(bytes32,uint256,bytes32,(uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address,uint256,address,bytes)": {
        "notice": "Emitted when `xcall` is called on the origin domain of a transfer."
      }
    },
    "kind": "user",
    "methods": {
      "addSequencer(address)": {
        "notice": "Used to add an approved sequencer to the allowlist."
      },
      "bumpTransfer(bytes32)": {
        "notice": "Anyone can call this function on the origin domain to increase the relayer fee for a transfer."
      },
      "bumpTransfer(bytes32,address,uint256)": {
        "notice": "Anyone can call this function on the origin domain t o increase the relayer fee for a given transfer using a specific asset."
      },
      "enrollRemoteRouter(uint32,bytes32)": {
        "notice": "Register the address of a Router contract for the same xApp on a remote chain"
      },
      "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes))": {
        "notice": "Called on a destination domain to disburse correct assets to end recipient and execute any included calldata."
      },
      "forceReceiveLocal((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32))": {
        "notice": "Allows a user-specified account to withdraw the local asset directly"
      },
      "forceUpdateSlippage((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),uint256)": {
        "notice": "Allows a user-specified account to update the slippage they are willing to take on destination transfers."
      },
      "removeSequencer(address)": {
        "notice": "Used to remove an approved sequencer from the allowlist."
      },
      "setXAppConnectionManager(address)": {
        "notice": "Modify the contract the xApp uses to validate Replica contracts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5874,
        "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
        "label": "s",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AppStorage)23688_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)2960)dyn_storage": {
        "base": "t_contract(IERC20)2960",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConnectorManager)46295": {
        "encoding": "inplace",
        "label": "contract IConnectorManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2960": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LPToken)15569": {
        "encoding": "inplace",
        "label": "contract LPToken",
        "numberOfBytes": "20"
      },
      "t_enum(DestinationTransferStatus)23476": {
        "encoding": "inplace",
        "label": "enum DestinationTransferStatus",
        "numberOfBytes": "1"
      },
      "t_enum(Role)23471": {
        "encoding": "inplace",
        "label": "enum Role",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(Role)23471)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum Role)",
        "numberOfBytes": "32",
        "value": "t_enum(Role)23471"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(RouterConfig)23530_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RouterConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(RouterConfig)23530_storage"
      },
      "t_mapping(t_address,t_struct(TokenId)31880_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenId)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenId)31880_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_enum(DestinationTransferStatus)23476)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum DestinationTransferStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(DestinationTransferStatus)23476"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint8))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint8))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint8)"
      },
      "t_mapping(t_bytes32,t_struct(Swap)24938_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SwapUtils.Swap)",
        "numberOfBytes": "32",
        "value": "t_struct(Swap)24938_storage"
      },
      "t_mapping(t_bytes32,t_struct(TokenConfig)23547_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenConfig)23547_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(AppStorage)23688_storage": {
        "encoding": "inplace",
        "label": "struct AppStorage",
        "members": [
          {
            "astId": 23549,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23551,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "LIQUIDITY_FEE_NUMERATOR",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23554,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "relayerFeeVault",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 23557,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "nonce",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23560,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "domain",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 23566,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adoptedToCanonical",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(TokenId)31880_storage)"
          },
          {
            "astId": 23572,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "representationToCanonical",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_struct(TokenId)31880_storage)"
          },
          {
            "astId": 23578,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "tokenConfigs",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_bytes32,t_struct(TokenConfig)23547_storage)"
          },
          {
            "astId": 23584,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "transferStatus",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_bytes32,t_enum(DestinationTransferStatus)23476)"
          },
          {
            "astId": 23590,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "routedTransfers",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)"
          },
          {
            "astId": 23597,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "routerBalances",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
          },
          {
            "astId": 23602,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "approvedRelayers",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 23605,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "maxRoutersPerTransfer",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 23610,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "slippage",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 23615,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "receiveLocalOverride",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_bytes32,t_bool)"
          },
          {
            "astId": 23620,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "remotes",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint32,t_bytes32)"
          },
          {
            "astId": 23622,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_proposed",
            "offset": 0,
            "slot": "16",
            "type": "t_address"
          },
          {
            "astId": 23624,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_proposedOwnershipTimestamp",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 23626,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_routerAllowlistRemoved",
            "offset": 0,
            "slot": "18",
            "type": "t_bool"
          },
          {
            "astId": 23628,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_routerAllowlistTimestamp",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 23634,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "roles",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_enum(Role)23471)"
          },
          {
            "astId": 23639,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "routerConfigs",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_address,t_struct(RouterConfig)23530_storage)"
          },
          {
            "astId": 23641,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_status",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 23643,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_xcallStatus",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 23649,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "swapStorages",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_bytes32,t_struct(Swap)24938_storage)"
          },
          {
            "astId": 23656,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "tokenIndexes",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint8))"
          },
          {
            "astId": 23659,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "lpTokenTargetAddress",
            "offset": 0,
            "slot": "26",
            "type": "t_address"
          },
          {
            "astId": 23662,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "_paused",
            "offset": 20,
            "slot": "26",
            "type": "t_bool"
          },
          {
            "astId": 23665,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "aavePool",
            "offset": 0,
            "slot": "27",
            "type": "t_address"
          },
          {
            "astId": 23668,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "aavePortalFeeNumerator",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256"
          },
          {
            "astId": 23673,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "portalDebt",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 23678,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "portalFeeDebt",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 23683,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "approvedSequencers",
            "offset": 0,
            "slot": "31",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 23687,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "xAppConnectionManager",
            "offset": 0,
            "slot": "32",
            "type": "t_contract(IConnectorManager)46295"
          }
        ],
        "numberOfBytes": "1056"
      },
      "t_struct(RouterConfig)23530_storage": {
        "encoding": "inplace",
        "label": "struct RouterConfig",
        "members": [
          {
            "astId": 23519,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "approved",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23521,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "portalApproved",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 23523,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "owner",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23525,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 23527,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "proposed",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 23529,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "proposedTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Swap)24938_storage": {
        "encoding": "inplace",
        "label": "struct SwapUtils.Swap",
        "members": [
          {
            "astId": 24905,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 24907,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "initialA",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24909,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "futureA",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 24911,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "initialATime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 24913,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "futureATime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 24915,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "swapFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 24917,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adminFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 24920,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "lpToken",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(LPToken)15569"
          },
          {
            "astId": 24924,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "pooledTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_contract(IERC20)2960)dyn_storage"
          },
          {
            "astId": 24927,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "tokenPrecisionMultipliers",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 24930,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "balances",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 24933,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adminFees",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 24935,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "disabled",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 24937,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "removeTime",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(TokenConfig)23547_storage": {
        "encoding": "inplace",
        "label": "struct TokenConfig",
        "members": [
          {
            "astId": 23532,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "representation",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 23534,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "representationDecimals",
            "offset": 20,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 23536,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adopted",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 23538,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adoptedDecimals",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 23540,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "adoptedToLocalExternalPools",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 23542,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "approval",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 23544,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "cap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23546,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "custodied",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TokenId)31880_storage": {
        "encoding": "inplace",
        "label": "struct TokenId",
        "members": [
          {
            "astId": 31877,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "domain",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 31879,
            "contract": "contracts/core/connext/facets/BridgeFacet.sol:BridgeFacet",
            "label": "id",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}