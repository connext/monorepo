{
  "address": "0xe54d6A0AF692f949622DADa01Ed1d64A1aCC9C76",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "connext",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__ownershipDelayElapsed_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsDelivered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "WrongAsset",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONNEXT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WRAPPER",
      "outputs": [
        {
          "internalType": "contract IWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unwrapAndSweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x74b0432eedba9805de1f186d8429a37e4e6a9d760e334046cbbb76144ea2032e",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0xe54d6A0AF692f949622DADa01Ed1d64A1aCC9C76",
    "transactionIndex": 5,
    "gasUsed": "816877",
    "logsBloom": "0x
    "blockHash": "0x855663374747032d88074d47ccb72a885c0c2497d52922986b061a7b4db4d04f",
    "transactionHash": "0x74b0432eedba9805de1f186d8429a37e4e6a9d760e334046cbbb76144ea2032e",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 3909608,
        "transactionHash": "0x74b0432eedba9805de1f186d8429a37e4e6a9d760e334046cbbb76144ea2032e",
        "address": "0xe54d6A0AF692f949622DADa01Ed1d64A1aCC9C76",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x855663374747032d88074d47ccb72a885c0c2497d52922986b061a7b4db4d04f"
      }
    ],
    "blockNumber": 3909608,
    "cumulativeGasUsed": "1079908",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfD9B8B1B7e44b39DFA04D66159Ac21B68141eD38",
    "0x4200000000000000000000000000000000000006"
  ],
  "numDeployments": 1,
  "solcInputHash": "f27fc0c5a728e8290f4e343b9381d1ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"connext\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__ownershipDelayElapsed_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"WrongAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONNEXT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPER\",\"outputs\":[{\"internalType\":\"contract IWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrapAndSweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"The `xreceive` function of contract may fail in the following ways: - unwrapping fails - the wrong asset is delivered, and transferring that fails - sending the native asset fails - the caller is not connext - the amount is zero - balance of the contract != amount In the event of these failures, funds for the crosschain transfer will be sent to this contract and will be held here. To rescue them, the owner of this contract can call `sweep` or `unwrapAndSweep` to transfer assets from this contract to a specified address. It is unlikely failures of these types will occur, so ownership of this contract should be renounced after a suitable trial period on mainnet.Ownership of this contract is governed using the same ProposedOwnable setup that is prevalent throughout the system.\",\"events\":{\"FundsDelivered(address,address,uint256)\":{\"params\":{\"amount\":\"- The amount of the asset sent\",\"asset\":\"- The asset sent.\",\"recipient\":\"- The target recipient address.\"}},\"WrongAsset(address,address)\":{\"params\":{\"asset\":\"- The asset sent.\",\"recipient\":\"- The target recipient address.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"The initial owner is set to the `msg.sender` of the contract.\"},\"sweep(address,address,uint256)\":{\"details\":\"Only the owner of this contract can call this function.Funds will end up on this contract IFF the external call on the Connext contract fails and the transfer is reconciled. The `xreceive` function can fail in the following cases: - unwrapping fails - transferring the asset fails - `connext` is not the caller (should not sweep in this case) - amount is zero (should not sweep in this case). It is left to the admin to determine the proper amounts to sweep.\",\"params\":{\"amount\":\"Amount of asset to sweep from contract\",\"asset\":\"The asset to send from the contract to recipient\",\"recipient\":\"The address to send the funds to\"}},\"unwrapAndSweep(address,uint256)\":{\"details\":\"Only the owner of this contract can call this function.Funds will end up on this contract IFF the external call on the Connext contract fails and the transfer is reconciled. The `xreceive` function can fail in the following cases: - unwrapping fails - transferring the asset fails - `connext` is not the caller (should not sweep in this case) - amount is zero (should not sweep in this case). It is left to the admin to determine the proper amounts to sweep.\",\"params\":{\"amount\":\"Amount of asset to sweep from contract\",\"recipient\":\"The address to send the funds to\"}},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"details\":\"We mostly ignore `originSender` argument: this could be a contract or EOA, but our recipient should be specified in our `callData`! We only fallback to using `originSender` IFF recipient argument is missing.If unwrapping (i.e. `withdraw`) fails, will emit UnwrappingFailed event! We will attempt to transfer the wrapped tokens to the\",\"params\":{\"amount\":\"- The amount to transfer. Should NOT be 0, or this call will revert.\",\"asset\":\"- This *should be* the wrapper contract address, an ERC20 token approved by the Connext bridge. IFF this does NOT match the WRAPPER contract address stored in this contract, we'll try to `IERC20.transfer` the assets to the intended recipient.\",\"callData\":\"- Should be a tuple of just `(address)`. The address is the intended recipient of the unwrapped native tokens. Whether it's ether or wether (i.e. whether it's wrapped native tokens or native tokens) depends on whether we succeeded in the unwrapping process.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"FundsDelivered(address,address,uint256)\":{\"notice\":\"Emitted when funds are sent from this contract\"},\"WrongAsset(address,address)\":{\"notice\":\"Emitted if the wrong wrapper asset is sent.\"}},\"kind\":\"user\",\"methods\":{\"CONNEXT()\":{\"notice\":\"Connext (diamond proxy) address, the only address permissioned to call `xReceive`.\"},\"WRAPPER()\":{\"notice\":\"The wrapper contract that this contract will always use for unwrapping native token.\"},\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"sweep(address,address,uint256)\":{\"notice\":\"Sweeps the provided token from this address to a designated recipient.\"},\"unwrapAndSweep(address,uint256)\":{\"notice\":\"Unwraps and sweeps the provided token from this address to a designated recipient.\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"notice\":\"xReceive implementation for receiving cross-chain calls from Connext.\"}},\"notice\":\"A utility contract for unwrapping native tokens at the destination.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/xreceivers/Unwrapper.sol\":\"Unwrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/core/connext/interfaces/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x02ae47cb6441eb876b47ff35687ddd9f78eae75399af98815ada1ae618a3945c\",\"license\":\"UNLICENSED\"},\"contracts/core/xreceivers/Unwrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ProposedOwnable} from \\\"../../shared/ProposedOwnable.sol\\\";\\nimport {IXReceiver} from \\\"../connext/interfaces/IXReceiver.sol\\\";\\n\\ninterface IWrapper {\\n  function withdraw(uint256 wad) external;\\n\\n  function transfer(address dst, uint256 wad) external returns (bool);\\n}\\n\\n/**\\n * @notice A utility contract for unwrapping native tokens at the destination.\\n *\\n * @dev The `xreceive` function of contract may fail in the following ways:\\n * - unwrapping fails\\n * - the wrong asset is delivered, and transferring that fails\\n * - sending the native asset fails\\n * - the caller is not connext\\n * - the amount is zero\\n * - balance of the contract != amount\\n *\\n * In the event of these failures, funds for the crosschain transfer will be sent\\n * to this contract and will be held here. To rescue them, the owner of this contract\\n * can call `sweep` or `unwrapAndSweep` to transfer assets from this contract to a\\n * specified address.\\n *\\n * It is unlikely failures of these types will occur, so ownership of this contract\\n * should be renounced after a suitable trial period on mainnet.\\n *\\n * @dev Ownership of this contract is governed using the same ProposedOwnable setup\\n * that is prevalent throughout the system.\\n */\\ncontract Unwrapper is ProposedOwnable, IXReceiver {\\n  // ============ Libraries ============\\n\\n  using SafeERC20 for IERC20;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted if the wrong wrapper asset is sent.\\n   * @param recipient - The target recipient address.\\n   * @param asset - The asset sent.\\n   */\\n  event WrongAsset(address recipient, address asset);\\n\\n  /**\\n   * @notice Emitted when funds are sent from this contract\\n   * @param recipient - The target recipient address.\\n   * @param asset - The asset sent.\\n   * @param amount - The amount of the asset sent\\n   */\\n  event FundsDelivered(address recipient, address asset, uint256 amount);\\n\\n  // ============ Properties ============\\n\\n  /**\\n   * @notice Connext (diamond proxy) address, the only address permissioned to call `xReceive`.\\n   */\\n  address public immutable CONNEXT;\\n\\n  /**\\n   * @notice The wrapper contract that this contract will always use for unwrapping native token.\\n   */\\n  IWrapper public immutable WRAPPER;\\n\\n  // ============= Modifiers ==============\\n\\n  /**\\n   * @notice Ensure caller is only the designated CONNEXT bridge address.\\n   */\\n  modifier onlyConnext() {\\n    require(msg.sender == CONNEXT, \\\"unwrap: !connext\\\");\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @dev The initial owner is set to the `msg.sender` of the contract.\\n   */\\n  constructor(address connext, address wrapper) ProposedOwnable() {\\n    _setOwner(msg.sender);\\n    WRAPPER = IWrapper(wrapper);\\n    CONNEXT = connext;\\n  }\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Sweeps the provided token from this address to a designated recipient.\\n   * @dev Only the owner of this contract can call this function.\\n   *\\n   * @dev Funds will end up on this contract IFF the external call on the Connext contract\\n   * fails and the transfer is reconciled. The `xreceive` function can fail in the following\\n   * cases:\\n   * - unwrapping fails\\n   * - transferring the asset fails\\n   * - `connext` is not the caller (should not sweep in this case)\\n   * - amount is zero (should not sweep in this case).\\n   *\\n   * It is left to the admin to determine the proper amounts to sweep.\\n   *\\n   * @param recipient The address to send the funds to\\n   * @param asset The asset to send from the contract to recipient\\n   * @param amount Amount of asset to sweep from contract\\n   */\\n  function sweep(\\n    address recipient,\\n    address asset,\\n    uint256 amount\\n  ) public onlyOwner {\\n    // Sanity check: amount is non-zero (otherwise, what are we unwrapping?).\\n    require(amount != 0, \\\"sweep: !amount\\\");\\n\\n    // Send funds to recipient\\n    _sweep(recipient, asset, amount);\\n  }\\n\\n  /**\\n   * @notice Unwraps and sweeps the provided token from this address to a designated recipient.\\n   * @dev Only the owner of this contract can call this function.\\n   *\\n   * @dev Funds will end up on this contract IFF the external call on the Connext contract\\n   * fails and the transfer is reconciled. The `xreceive` function can fail in the following\\n   * cases:\\n   * - unwrapping fails\\n   * - transferring the asset fails\\n   * - `connext` is not the caller (should not sweep in this case)\\n   * - amount is zero (should not sweep in this case).\\n   *\\n   * It is left to the admin to determine the proper amounts to sweep.\\n   *\\n   * @param recipient The address to send the funds to\\n   * @param amount Amount of asset to sweep from contract\\n   */\\n  function unwrapAndSweep(address recipient, uint256 amount) public onlyOwner {\\n    // Sanity check: amount is non-zero (otherwise, what are we unwrapping?).\\n    require(amount != 0, \\\"unwrapAndSweep: !amount\\\");\\n\\n    // Withdraw from wrapper\\n    WRAPPER.withdraw(amount);\\n\\n    // Send funds to recipient\\n    _sweep(recipient, address(0), amount);\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice xReceive implementation for receiving cross-chain calls from Connext.\\n   * @dev We mostly ignore `originSender` argument: this could be a contract or EOA, but our\\n   * recipient should be specified in our `callData`! We only fallback to using `originSender` IFF\\n   * recipient argument is missing.\\n   * @dev If unwrapping (i.e. `withdraw`) fails, will emit UnwrappingFailed event! We will attempt\\n   * to transfer the wrapped tokens to the\\n   *\\n   * @param amount - The amount to transfer. Should NOT be 0, or this call will revert.\\n   * @param asset - This *should be* the wrapper contract address, an ERC20 token approved by the\\n   * Connext bridge. IFF this does NOT match the WRAPPER contract address stored in this contract,\\n   * we'll try to `IERC20.transfer` the assets to the intended recipient.\\n   * @param callData - Should be a tuple of just `(address)`. The address is the intended\\n   * recipient of the unwrapped native tokens. Whether it's ether or wether (i.e. whether it's\\n   * wrapped native tokens or native tokens) depends on whether we succeeded in the unwrapping\\n   * process.\\n   */\\n  function xReceive(\\n    bytes32, // transferId\\n    uint256 amount,\\n    address asset,\\n    address, // originSender\\n    uint32, // origin domain\\n    bytes memory callData\\n  ) external onlyConnext returns (bytes memory) {\\n    // Sanity check: amount is non-zero (otherwise, what are we unwrapping?).\\n    require(amount != 0, \\\"unwrap: !amount\\\");\\n\\n    // Get the target recipient, which should be in the callData.\\n    // NOTE: If recipient is the zero address, funds will be burned!\\n    address recipient = abi.decode(callData, (address));\\n\\n    // Sanity check: asset we've received matches our target wrapper.\\n    if (asset != address(WRAPPER)) {\\n      emit WrongAsset(recipient, asset);\\n      // If the delivered asset does not match our target wrapper, we try sending it anyway.\\n      _sweep(recipient, asset, amount);\\n      return bytes(\\\"\\\");\\n    }\\n\\n    // We've received wrapped native tokens; withdraw native tokens from the wrapper contract.\\n    WRAPPER.withdraw(amount);\\n\\n    // Send to recipient\\n    _sweep(recipient, address(0), amount);\\n  }\\n\\n  /**\\n   * @notice Fallback function so this contract can receive the funds from WETH\\n   */\\n  receive() external payable {}\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice Sweeps the provided token from this address to a designated recipient.\\n   * @dev Emits the `FundsDelivered` event\\n   *\\n   * @param recipient The address to send the funds to\\n   * @param asset The asset (or address(0) for native) to send from the contract to recipient\\n   * @param amount Amount of asset to sweep from contract\\n   */\\n  function _sweep(\\n    address recipient,\\n    address asset,\\n    uint256 amount\\n  ) internal {\\n    if (asset == address(0)) {\\n      Address.sendValue(payable(recipient), amount);\\n    } else {\\n      IERC20(asset).transfer(recipient, amount);\\n    }\\n    emit FundsDelivered(recipient, asset, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x371665aa8145fbc9d4784f0da97046058a30983480c69fd58d0dc719b37323c5\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if the ownership delay has not elapsed\\n   */\\n  modifier ownershipDelayElapsed() {\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && _proposedOwnershipTimestamp != 0)\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner ownershipDelayElapsed {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(address(0));\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed ownershipDelayElapsed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n    delete _proposedOwnershipTimestamp;\\n    delete _proposed;\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\",\"keccak256\":\"0xa96eff4fdff55ffa29cda5c18285a9af04c3cbaf55f83696085cdd2251a8d6c0\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0x4ec1aa589d37d0c1eac9966e26d2d3540d1661b81763e678f14d2c6fa0682323\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610e83380380610e8383398101604081905261002f916100d0565b6100383361004f565b6001600160a01b0390811660a05216608052610103565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b80516001600160a01b03811681146100cb57600080fd5b919050565b600080604083850312156100e357600080fd5b6100ec836100b4565b91506100fa602084016100b4565b90509250929050565b60805160a051610d3f610144600039600081816102570152818161057d015281816106ba015261076b01526000818161018701526105fe0152610d3f6000f3fe6080604052600436106100c65760003560e01c8063b1f8100d1161007f578063d232c22011610059578063d232c220146101fc578063e03720c014610225578063e1eb13c114610245578063fd614f411461027957600080fd5b8063b1f8100d146101a9578063c5b350df146101c9578063d1851c92146101de57600080fd5b80633cf52ffb146100d257806362c06767146100f65780636a42b8f814610118578063715018a61461012e5780638da5cb5b1461014357806392f75cb21461017557600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506002545b6040519081526020015b60405180910390f35b34801561010257600080fd5b50610116610111366004610aaa565b6102a6565b005b34801561012457600080fd5b5062093a806100e3565b34801561013a57600080fd5b50610116610327565b34801561014f57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100ed565b34801561018157600080fd5b5061015d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101b557600080fd5b506101166101c4366004610aeb565b6103db565b3480156101d557600080fd5b5061011661047c565b3480156101ea57600080fd5b506001546001600160a01b031661015d565b34801561020857600080fd5b506000546040516001600160a01b039091161581526020016100ed565b34801561023157600080fd5b50610116610240366004610b0f565b6104ec565b34801561025157600080fd5b5061015d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561028557600080fd5b50610299610294366004610b51565b6105f1565b6040516100ed9190610c55565b6000546001600160a01b031633146102d1576040516311a8a1bb60e31b815260040160405180910390fd5b806000036103175760405162461bcd60e51b815260206004820152600e60248201526d1cddd9595c0e8808585b5bdd5b9d60921b60448201526064015b60405180910390fd5b6103228383836107e7565b505050565b6000546001600160a01b03163314610352576040516311a8a1bb60e31b815260040160405180910390fd5b62093a80600254426103649190610ca3565b11610382576040516324e0285f60e21b815260040160405180910390fd5b6002546000036103a557604051630e4b303f60e21b815260040160405180910390fd5b6001546001600160a01b0316156103cf576040516323295ef960e01b815260040160405180910390fd5b6103d960006108c9565b565b6000546001600160a01b03163314610406576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610424575060025415155b15610442576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361047057604051634a2fb73f60e11b815260040160405180910390fd5b6104798161092e565b50565b6001546001600160a01b031633146104a7576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426104b99190610ca3565b116104d7576040516324e0285f60e21b815260040160405180910390fd5b6001546103d9906001600160a01b03166108c9565b6000546001600160a01b03163314610517576040516311a8a1bb60e31b815260040160405180910390fd5b806000036105675760405162461bcd60e51b815260206004820152601760248201527f756e77726170416e6453776565703a2021616d6f756e74000000000000000000604482015260640161030e565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b505050506105ed826000836107e7565b5050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461065e5760405162461bcd60e51b815260206004820152601060248201526f1d5b9ddc985c0e880858dbdb9b995e1d60821b604482015260640161030e565b856000036106a05760405162461bcd60e51b815260206004820152600f60248201526e1d5b9ddc985c0e8808585b5bdd5b9d608a1b604482015260640161030e565b6000828060200190518101906106b69190610cca565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b03161461075557604080516001600160a01b038084168252881660208201527f9f79eedfea1da16b88bd43866c5385861173a9895ac74e1628662f7f2192962e910160405180910390a161073f8187896107e7565b50506040805160208101909152600081526107dd565b604051632e1a7d4d60e01b8152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156107b757600080fd5b505af11580156107cb573d6000803e3d6000fd5b505050506107db816000896107e7565b505b9695505050505050565b6001600160a01b038216610804576107ff838261097c565b610879565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190610ce7565b505b604080516001600160a01b038086168252841660208201529081018290527f91ebf95f2932ae1bb84918555319ba9cf24fd2359b03932337af5599f2553fa99060600160405180910390a1505050565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b804710156109cc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161030e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610a19576040519150601f19603f3d011682016040523d82523d6000602084013e610a1e565b606091505b50509050806103225760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161030e565b6001600160a01b038116811461047957600080fd5b600080600060608486031215610abf57600080fd5b8335610aca81610a95565b92506020840135610ada81610a95565b929592945050506040919091013590565b600060208284031215610afd57600080fd5b8135610b0881610a95565b9392505050565b60008060408385031215610b2257600080fd5b8235610b2d81610a95565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610b6a57600080fd5b86359550602087013594506040870135610b8381610a95565b93506060870135610b9381610a95565b9250608087013563ffffffff81168114610bac57600080fd5b915060a087013567ffffffffffffffff80821115610bc957600080fd5b818901915089601f830112610bdd57600080fd5b813581811115610bef57610bef610b3b565b604051601f8201601f19908116603f01168101908382118183101715610c1757610c17610b3b565b816040528281528c6020848701011115610c3057600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b600060208083528351808285015260005b81811015610c8257858101830151858201604001528201610c66565b506000604082860101526040601f19601f8301168501019250505092915050565b81810381811115610cc457634e487b7160e01b600052601160045260246000fd5b92915050565b600060208284031215610cdc57600080fd5b8151610b0881610a95565b600060208284031215610cf957600080fd5b81518015158114610b0857600080fdfea2646970667358221220f6b28a7547d9416268a270b6b949192890b994c51b055287f898d24006f507bb64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c8063b1f8100d1161007f578063d232c22011610059578063d232c220146101fc578063e03720c014610225578063e1eb13c114610245578063fd614f411461027957600080fd5b8063b1f8100d146101a9578063c5b350df146101c9578063d1851c92146101de57600080fd5b80633cf52ffb146100d257806362c06767146100f65780636a42b8f814610118578063715018a61461012e5780638da5cb5b1461014357806392f75cb21461017557600080fd5b366100cd57005b600080fd5b3480156100de57600080fd5b506002545b6040519081526020015b60405180910390f35b34801561010257600080fd5b50610116610111366004610aaa565b6102a6565b005b34801561012457600080fd5b5062093a806100e3565b34801561013a57600080fd5b50610116610327565b34801561014f57600080fd5b506000546001600160a01b03165b6040516001600160a01b0390911681526020016100ed565b34801561018157600080fd5b5061015d7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101b557600080fd5b506101166101c4366004610aeb565b6103db565b3480156101d557600080fd5b5061011661047c565b3480156101ea57600080fd5b506001546001600160a01b031661015d565b34801561020857600080fd5b506000546040516001600160a01b039091161581526020016100ed565b34801561023157600080fd5b50610116610240366004610b0f565b6104ec565b34801561025157600080fd5b5061015d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561028557600080fd5b50610299610294366004610b51565b6105f1565b6040516100ed9190610c55565b6000546001600160a01b031633146102d1576040516311a8a1bb60e31b815260040160405180910390fd5b806000036103175760405162461bcd60e51b815260206004820152600e60248201526d1cddd9595c0e8808585b5bdd5b9d60921b60448201526064015b60405180910390fd5b6103228383836107e7565b505050565b6000546001600160a01b03163314610352576040516311a8a1bb60e31b815260040160405180910390fd5b62093a80600254426103649190610ca3565b11610382576040516324e0285f60e21b815260040160405180910390fd5b6002546000036103a557604051630e4b303f60e21b815260040160405180910390fd5b6001546001600160a01b0316156103cf576040516323295ef960e01b815260040160405180910390fd5b6103d960006108c9565b565b6000546001600160a01b03163314610406576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015610424575060025415155b15610442576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361047057604051634a2fb73f60e11b815260040160405180910390fd5b6104798161092e565b50565b6001546001600160a01b031633146104a7576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426104b99190610ca3565b116104d7576040516324e0285f60e21b815260040160405180910390fd5b6001546103d9906001600160a01b03166108c9565b6000546001600160a01b03163314610517576040516311a8a1bb60e31b815260040160405180910390fd5b806000036105675760405162461bcd60e51b815260206004820152601760248201527f756e77726170416e6453776565703a2021616d6f756e74000000000000000000604482015260640161030e565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b505050506105ed826000836107e7565b5050565b6060336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461065e5760405162461bcd60e51b815260206004820152601060248201526f1d5b9ddc985c0e880858dbdb9b995e1d60821b604482015260640161030e565b856000036106a05760405162461bcd60e51b815260206004820152600f60248201526e1d5b9ddc985c0e8808585b5bdd5b9d608a1b604482015260640161030e565b6000828060200190518101906106b69190610cca565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b03161461075557604080516001600160a01b038084168252881660208201527f9f79eedfea1da16b88bd43866c5385861173a9895ac74e1628662f7f2192962e910160405180910390a161073f8187896107e7565b50506040805160208101909152600081526107dd565b604051632e1a7d4d60e01b8152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156107b757600080fd5b505af11580156107cb573d6000803e3d6000fd5b505050506107db816000896107e7565b505b9695505050505050565b6001600160a01b038216610804576107ff838261097c565b610879565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190610ce7565b505b604080516001600160a01b038086168252841660208201529081018290527f91ebf95f2932ae1bb84918555319ba9cf24fd2359b03932337af5599f2553fa99060600160405180910390a1505050565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b804710156109cc5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161030e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610a19576040519150601f19603f3d011682016040523d82523d6000602084013e610a1e565b606091505b50509050806103225760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161030e565b6001600160a01b038116811461047957600080fd5b600080600060608486031215610abf57600080fd5b8335610aca81610a95565b92506020840135610ada81610a95565b929592945050506040919091013590565b600060208284031215610afd57600080fd5b8135610b0881610a95565b9392505050565b60008060408385031215610b2257600080fd5b8235610b2d81610a95565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c08789031215610b6a57600080fd5b86359550602087013594506040870135610b8381610a95565b93506060870135610b9381610a95565b9250608087013563ffffffff81168114610bac57600080fd5b915060a087013567ffffffffffffffff80821115610bc957600080fd5b818901915089601f830112610bdd57600080fd5b813581811115610bef57610bef610b3b565b604051601f8201601f19908116603f01168101908382118183101715610c1757610c17610b3b565b816040528281528c6020848701011115610c3057600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b600060208083528351808285015260005b81811015610c8257858101830151858201604001528201610c66565b506000604082860101526040601f19601f8301168501019250505092915050565b81810381811115610cc457634e487b7160e01b600052601160045260246000fd5b92915050565b600060208284031215610cdc57600080fd5b8151610b0881610a95565b600060208284031215610cf957600080fd5b81518015158114610b0857600080fdfea2646970667358221220f6b28a7547d9416268a270b6b949192890b994c51b055287f898d24006f507bb64736f6c63430008110033",
  "devdoc": {
    "details": "The `xreceive` function of contract may fail in the following ways: - unwrapping fails - the wrong asset is delivered, and transferring that fails - sending the native asset fails - the caller is not connext - the amount is zero - balance of the contract != amount In the event of these failures, funds for the crosschain transfer will be sent to this contract and will be held here. To rescue them, the owner of this contract can call `sweep` or `unwrapAndSweep` to transfer assets from this contract to a specified address. It is unlikely failures of these types will occur, so ownership of this contract should be renounced after a suitable trial period on mainnet.Ownership of this contract is governed using the same ProposedOwnable setup that is prevalent throughout the system.",
    "events": {
      "FundsDelivered(address,address,uint256)": {
        "params": {
          "amount": "- The amount of the asset sent",
          "asset": "- The asset sent.",
          "recipient": "- The target recipient address."
        }
      },
      "WrongAsset(address,address)": {
        "params": {
          "asset": "- The asset sent.",
          "recipient": "- The target recipient address."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "The initial owner is set to the `msg.sender` of the contract."
      },
      "sweep(address,address,uint256)": {
        "details": "Only the owner of this contract can call this function.Funds will end up on this contract IFF the external call on the Connext contract fails and the transfer is reconciled. The `xreceive` function can fail in the following cases: - unwrapping fails - transferring the asset fails - `connext` is not the caller (should not sweep in this case) - amount is zero (should not sweep in this case). It is left to the admin to determine the proper amounts to sweep.",
        "params": {
          "amount": "Amount of asset to sweep from contract",
          "asset": "The asset to send from the contract to recipient",
          "recipient": "The address to send the funds to"
        }
      },
      "unwrapAndSweep(address,uint256)": {
        "details": "Only the owner of this contract can call this function.Funds will end up on this contract IFF the external call on the Connext contract fails and the transfer is reconciled. The `xreceive` function can fail in the following cases: - unwrapping fails - transferring the asset fails - `connext` is not the caller (should not sweep in this case) - amount is zero (should not sweep in this case). It is left to the admin to determine the proper amounts to sweep.",
        "params": {
          "amount": "Amount of asset to sweep from contract",
          "recipient": "The address to send the funds to"
        }
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "details": "We mostly ignore `originSender` argument: this could be a contract or EOA, but our recipient should be specified in our `callData`! We only fallback to using `originSender` IFF recipient argument is missing.If unwrapping (i.e. `withdraw`) fails, will emit UnwrappingFailed event! We will attempt to transfer the wrapped tokens to the",
        "params": {
          "amount": "- The amount to transfer. Should NOT be 0, or this call will revert.",
          "asset": "- This *should be* the wrapper contract address, an ERC20 token approved by the Connext bridge. IFF this does NOT match the WRAPPER contract address stored in this contract, we'll try to `IERC20.transfer` the assets to the intended recipient.",
          "callData": "- Should be a tuple of just `(address)`. The address is the intended recipient of the unwrapped native tokens. Whether it's ether or wether (i.e. whether it's wrapped native tokens or native tokens) depends on whether we succeeded in the unwrapping process."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "FundsDelivered(address,address,uint256)": {
        "notice": "Emitted when funds are sent from this contract"
      },
      "WrongAsset(address,address)": {
        "notice": "Emitted if the wrong wrapper asset is sent."
      }
    },
    "kind": "user",
    "methods": {
      "CONNEXT()": {
        "notice": "Connext (diamond proxy) address, the only address permissioned to call `xReceive`."
      },
      "WRAPPER()": {
        "notice": "The wrapper contract that this contract will always use for unwrapping native token."
      },
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "sweep(address,address,uint256)": {
        "notice": "Sweeps the provided token from this address to a designated recipient."
      },
      "unwrapAndSweep(address,uint256)": {
        "notice": "Unwraps and sweeps the provided token from this address to a designated recipient."
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "notice": "xReceive implementation for receiving cross-chain calls from Connext."
      }
    },
    "notice": "A utility contract for unwrapping native tokens at the destination.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 49365,
        "contract": "contracts/core/xreceivers/Unwrapper.sol:Unwrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 49367,
        "contract": "contracts/core/xreceivers/Unwrapper.sol:Unwrapper",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 49369,
        "contract": "contracts/core/xreceivers/Unwrapper.sol:Unwrapper",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}