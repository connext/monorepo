{
  "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "connext",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spokeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gelatoRelayer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeCollector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "keep3r",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rootManager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "autonolas",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "propagateCooldown",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalizeCooldown",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proposeAggregateRootCooldown",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "hubConnectors",
              "type": "address[]"
            },
            {
              "internalType": "uint32[]",
              "name": "hubConnectorChains",
              "type": "uint32[]"
            }
          ],
          "internalType": "struct RelayerProxyHub.HubConstructorParams",
          "name": "_params",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyOwner_notOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__onlyProposed_notProposedOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__ownershipDelayElapsed_delayNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__proposeNewOwner_noOwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_invalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProposedOwnable__renounceOwnership_noProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxyHub__processFromRoot_alreadyProcessed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxyHub__processFromRoot_noHubConnector",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxyHub__processFromRoot_unsupportedChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxyHub__propagateCooledDown_notCooledDown",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "RelayerProxyHub__validateProposeSignature_notProposer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxy__addRelayer_relayerAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxy__definedAddress_empty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxy__finalizeCooledDown_notCooledDown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxy__isWorkableBySender_notWorkable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxy__onlyRelayer_notRelayer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxy__proposeAggregateRootCooledDown_notCooledDown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxy__removeRelayer_relayerNotAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RelayerProxy__validateAndPayWithCredits_notKeep3r",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "RelayerProxy__validateProposeSignature_notProposer",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        }
      ],
      "name": "AutonolasChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum RelayerProxyHub.AutonolasPriorityFunction",
          "name": "fn",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "updated",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "previous",
          "type": "uint8"
        }
      ],
      "name": "AutonolasPriorityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        }
      ],
      "name": "ConnextChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        }
      ],
      "name": "FeeCollectorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalizeCooldown",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFinalizeCooldown",
          "type": "uint256"
        }
      ],
      "name": "FinalizeCooldownChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "FundsDeducted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "FundsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        }
      ],
      "name": "GelatoRelayerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "hubConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldHubConnector",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "chain",
          "type": "uint32"
        }
      ],
      "name": "HubConnectorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        }
      ],
      "name": "Keep3rChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "propagateCooldown",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPropagateCooldown",
          "type": "uint256"
        }
      ],
      "name": "PropagateCooldownChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposeAggregateRootCooldown",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProposeAggregateRootCooldown",
          "type": "uint256"
        }
      ],
      "name": "ProposeAggregateRootCooldownChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rootManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRootManager",
          "type": "address"
        }
      ],
      "name": "RootManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "updated",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previous",
          "type": "address"
        }
      ],
      "name": "SpokeConnectorChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptProposedOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "addRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedRelayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autonolas",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RelayerProxyHub.AutonolasPriorityFunction",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "autonolasPriority",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnext",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "originDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "destinationDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "canonicalDomain",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "delegate",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "receiveLocal",
                  "type": "bool"
                },
                {
                  "internalType": "bytes",
                  "name": "callData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "slippage",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "originSender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "bridgedAmt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "normalizedIn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "canonicalId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct TransferInfo",
              "name": "params",
              "type": "tuple"
            },
            {
              "internalType": "address[]",
              "name": "routers",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "routerSignatures",
              "type": "bytes[]"
            },
            {
              "internalType": "address",
              "name": "sequencer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sequencerSignature",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExecuteArgs",
          "name": "_args",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proposedAggregateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_rootTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endOfDispute",
          "type": "uint256"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_connectors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_fees",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_encodedData",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "_proposedAggregateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_endOfDispute",
          "type": "uint256"
        }
      ],
      "name": "finalizeAndPropagate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_connectors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_fees",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_encodedData",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "_proposedAggregateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_endOfDispute",
          "type": "uint256"
        }
      ],
      "name": "finalizeAndPropagateKeep3r",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_proposedAggregateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_endOfDispute",
          "type": "uint256"
        }
      ],
      "name": "finalizeOnRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelatoRelayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "hubConnectors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keep3r",
      "outputs": [
        {
          "internalType": "contract IKeep3rV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastFinalizeAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPropagateAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProposeAggregateRootAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_encodedData",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_fromChain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_l2Hash",
          "type": "bytes32"
        }
      ],
      "name": "processFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_encodedData",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "_fromChain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_l2Hash",
          "type": "bytes32"
        }
      ],
      "name": "processFromRootKeep3r",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedRootMessages",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_connectors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_messageFees",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_encodedData",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256",
          "name": "_relayerFee",
          "type": "uint256"
        }
      ],
      "name": "propagate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "propagateCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_connectors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_messageFees",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_encodedData",
          "type": "bytes[]"
        }
      ],
      "name": "propagateKeep3r",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "domains",
          "type": "uint32[]"
        }
      ],
      "name": "propagateWorkable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_aggregateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_rootTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "proposeAggregateRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposeAggregateRootCooldown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_snapshotId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_aggregateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_snapshotsRoots",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_domains",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "proposeAggregateRootOnRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_snapshotId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_aggregateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_snapshotsRoots",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_domains",
          "type": "uint32[]"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "proposeAggregateRootOnRootKeep3r",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newlyProposed",
          "type": "address"
        }
      ],
      "name": "proposeNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposedTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            },
            {
              "internalType": "bytes32[32]",
              "name": "path",
              "type": "bytes32[32]"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISpokeConnector.Proof[]",
          "name": "_proofs",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes32",
          "name": "_aggregateRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[32]",
          "name": "_aggregatePath",
          "type": "bytes32[32]"
        },
        {
          "internalType": "uint256",
          "name": "_aggregateIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "proveAndProcess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "removeRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounced",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootManager",
      "outputs": [
        {
          "internalType": "contract IRootManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_encodedData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_messageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_relayerFee",
          "type": "uint256"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendRootToHubSpoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_autonolas",
          "type": "address"
        }
      ],
      "name": "setAutonolas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RelayerProxyHub.AutonolasPriorityFunction",
          "name": "_function",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_autonolasPriority",
          "type": "uint8"
        }
      ],
      "name": "setAutonolasPriority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        }
      ],
      "name": "setConnext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeCollector",
          "type": "address"
        }
      ],
      "name": "setFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_finalizeCooldown",
          "type": "uint256"
        }
      ],
      "name": "setFinalizeCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelatoRelayer",
          "type": "address"
        }
      ],
      "name": "setGelatoRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hubConnector",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_chain",
          "type": "uint32"
        }
      ],
      "name": "setHubConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keep3r",
          "type": "address"
        }
      ],
      "name": "setKeep3r",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_propagateCooldown",
          "type": "uint256"
        }
      ],
      "name": "setPropagateCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposeCooldown",
          "type": "uint256"
        }
      ],
      "name": "setProposeAggregateRootCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rootManager",
          "type": "address"
        }
      ],
      "name": "setRootManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spokeConnector",
          "type": "address"
        }
      ],
      "name": "setSpokeConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spokeConnector",
      "outputs": [
        {
          "internalType": "contract ISpokeConnector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
  "receipt": {
    "to": null,
    "from": "0xade09131C6f43fe22C2CbABb759636C43cFc181e",
    "contractAddress": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
    "transactionIndex": 121,
    "gasUsed": "5102697",
    "logsBloom": "0x
    "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906",
    "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
    "logs": [
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ade09131c6f43fe22c2cbabb759636c43cfc181e"
        ],
        "data": "0x",
        "logIndex": 197,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x87539ad41983c0ecff8f321db8edf4dd9e830593562770bdacdda085b83e3bb2"
        ],
        "data": "0x0000000000000000000000005e1ba88978b1f9b61448c5e6881e21a7d771d1390000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 198,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x66948d99d8431a8416af2202bc301823b7cdd87beb9bddaa274aedac0611a5fd"
        ],
        "data": "0x0000000000000000000000001db5ee7b6235e6c31efb4b3ee45190ca14e1a2140000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 199,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x5db4a067a1f787c3269642464a2a1560868b50b0873e7dec83939ae2359f6128"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 200,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x649c5e3d0ed183894196148e193af316452b0037e77d2ff0fef23b7dc722bed0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 201,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x711d2a81db157c0acede64f080708460163dfaddcd4266c2c609efb458d3e4c0"
        ],
        "data": "0x000000000000000000000000eb02addcfd8b773a5ffa6b9d1fe99c566f8c44cc0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 202,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x289d6927dc5ba66abb928c5be9d3aecd2baf7c8e89f1faec6a791b8b21589a5d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000007080000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 203,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x2a1ca87adff1a64c5b6edc218dfd6b80208260b240fbc939ea43e07c2764f5ca"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000007080000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 204,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c5"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 205,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x3124eaf4f16c6ddd81951200c6d8f65d5800753bef06584bd672c8b22c76b487"
        ],
        "data": "0x0000000000000000000000000031d290b8526e2eb6ac22111e5ff96eca7602580000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 206,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x5d93bbdda0d794fed18c39a7b776dc86cbf6ed443032e6baac71373996b85010"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000007080000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 207,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x289d6927dc5ba66abb928c5be9d3aecd2baf7c8e89f1faec6a791b8b21589a5d"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000007080000000000000000000000000000000000000000000000000000000000000708",
        "logIndex": 208,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0x17da78d98886c3b8819430ab0693a44c32dfa6426a4db4601ce45bc4bc2385ec"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 209,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x0000000000000000000000001db5ee7b6235e6c31efb4b3ee45190ca14e1a21400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 210,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x0000000000000000000000004d9f990e96d7b9180c7cafe003456add60aa98600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a",
        "logIndex": 211,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x0000000000000000000000001b891d279a763426394c9e2100205005c0dcaf4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038",
        "logIndex": 212,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x000000000000000000000000a98f36ca759271928d18ae9b8bc6e214c279fded00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 213,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x00000000000000000000000062c3f15eee9a932b90c64b07c02ee9962b8dbb5a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089",
        "logIndex": 214,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x0000000000000000000000004d9f990e96d7b9180c7cafe003456add60aa9860000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fc",
        "logIndex": 215,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x00000000000000000000000018a7a4e4c70fcec6eb4844eb84bc98523f58b89800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000144",
        "logIndex": 216,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x0000000000000000000000005fa89ea322708b30882d3aa3a9fc3da4775274c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000440",
        "logIndex": 217,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x000000000000000000000000d2a6cdd411d8d7357a0e87b8fdba6ae53b4a231d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d",
        "logIndex": 218,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x0000000000000000000000005b447756e2e55ceb8d0e46217ea666cf3e037cdd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001388",
        "logIndex": 219,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x000000000000000000000000af00e0b7b5ce2d3a0b5d02dec936254550228b6100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002105",
        "logIndex": 220,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x000000000000000000000000842ad61a06f8f6bc125e8059bcd4d6d3440eca340000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000868b",
        "logIndex": 221,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x0000000000000000000000007d8d16c500b89e4a1fde991f284d84d57e949ae30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4b1",
        "logIndex": 222,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x000000000000000000000000d5ae7b90dba594899977072e363bbf164e7b1d150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a86a",
        "logIndex": 223,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x00000000000000000000000089285703326a9b3192841f67121dd714e49686890000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e708",
        "logIndex": 224,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      },
      {
        "transactionIndex": 121,
        "blockNumber": 19566620,
        "transactionHash": "0x39d069eaffae36c10df1e77943b8cd89499485cbef517a7db260d473b4e6560d",
        "address": "0x2D20B01E5979309b50cF461689333CA14e6E876D",
        "topics": [
          "0xf3f83f3e1df056d9be522e74b3fe84add98c686289a646ae5570827743424092"
        ],
        "data": "0x0000000000000000000000003b1edf344f03489b86de923f288514de80aa929a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082750",
        "logIndex": 225,
        "blockHash": "0x169334d76b0c529362df27b1217f88875aca770d3491a2bf6f8916285afdd906"
      }
    ],
    "blockNumber": 19566620,
    "cumulativeGasUsed": "15591946",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "connext": "0x5e1ba88978B1f9b61448C5e6881e21A7d771D139",
      "spokeConnector": "0x1dB5Ee7B6235e6C31EFb4b3eE45190Ca14E1a214",
      "gelatoRelayer": "0x0000000000000000000000000000000000000000",
      "feeCollector": "0x0000000000000000000000000000000000000000",
      "keep3r": "0xeb02addCfD8B773A5FFA6B9d1FE99c566f8c44CC",
      "rootManager": "0x0031d290B8526e2Eb6ac22111E5fF96EcA760258",
      "autonolas": "0x0000000000000000000000000000000000000000",
      "propagateCooldown": 1800,
      "finalizeCooldown": 1800,
      "proposeAggregateRootCooldown": 1800,
      "hubConnectors": [
        "0x1dB5Ee7B6235e6C31EFb4b3eE45190Ca14E1a214",
        "0x4d9F990E96d7B9180c7cAFe003456AdD60aA9860",
        "0x1b891D279a763426394c9E2100205005C0DCAf43",
        "0xa98f36ca759271928d18AE9b8BC6e214C279fDeD",
        "0x62C3f15Eee9A932B90c64B07c02EE9962b8DbB5A",
        "0x4d9F990E96d7B9180c7cAFe003456AdD60aA9860",
        "0x18a7a4e4C70fcec6Eb4844eb84bc98523F58b898",
        "0x5FA89ea322708b30882D3aa3a9fC3DA4775274c0",
        "0xD2a6cDd411d8d7357a0E87b8fDBa6ae53B4A231d",
        "0x5b447756e2E55CEB8d0e46217ea666CF3e037cdd",
        "0xAf00e0b7B5cE2D3a0B5d02DEc936254550228b61",
        "0x842aD61A06f8f6bC125E8059bcD4D6D3440ECA34",
        "0x7D8d16c500b89E4A1fdE991F284d84d57E949aE3",
        "0xd5aE7b90Dba594899977072e363bBf164E7B1D15",
        "0x89285703326a9b3192841f67121DD714E4968689",
        "0x3B1edF344F03489b86DE923f288514De80aa929A"
      ],
      "hubConnectorChains": [
        1,
        10,
        56,
        100,
        137,
        252,
        324,
        1088,
        1101,
        5000,
        8453,
        34443,
        42161,
        43114,
        59144,
        534352
      ]
    }
  ],
  "numDeployments": 2,
  "solcInputHash": "dd554adc81396e5175040a2eb9916e3d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"connext\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spokeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gelatoRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keep3r\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rootManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"autonolas\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"propagateCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalizeCooldown\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposeAggregateRootCooldown\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"hubConnectors\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"hubConnectorChains\",\"type\":\"uint32[]\"}],\"internalType\":\"struct RelayerProxyHub.HubConstructorParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyOwner_notOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__onlyProposed_notProposedOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__ownershipDelayElapsed_delayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__proposeNewOwner_noOwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProposedOwnable__renounceOwnership_noProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxyHub__processFromRoot_alreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxyHub__processFromRoot_noHubConnector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxyHub__processFromRoot_unsupportedChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxyHub__propagateCooledDown_notCooledDown\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"RelayerProxyHub__validateProposeSignature_notProposer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxy__addRelayer_relayerAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxy__definedAddress_empty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxy__finalizeCooledDown_notCooledDown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxy__isWorkableBySender_notWorkable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxy__onlyRelayer_notRelayer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxy__proposeAggregateRootCooledDown_notCooledDown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxy__removeRelayer_relayerNotAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RelayerProxy__validateAndPayWithCredits_notKeep3r\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"RelayerProxy__validateProposeSignature_notProposer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"}],\"name\":\"AutonolasChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum RelayerProxyHub.AutonolasPriorityFunction\",\"name\":\"fn\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"updated\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"previous\",\"type\":\"uint8\"}],\"name\":\"AutonolasPriorityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"}],\"name\":\"ConnextChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"}],\"name\":\"FeeCollectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalizeCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFinalizeCooldown\",\"type\":\"uint256\"}],\"name\":\"FinalizeCooldownChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"FundsDeducted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"}],\"name\":\"GelatoRelayerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hubConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldHubConnector\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chain\",\"type\":\"uint32\"}],\"name\":\"HubConnectorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"}],\"name\":\"Keep3rChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedOwner\",\"type\":\"address\"}],\"name\":\"OwnershipProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"propagateCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPropagateCooldown\",\"type\":\"uint256\"}],\"name\":\"PropagateCooldownChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposeAggregateRootCooldown\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposeAggregateRootCooldown\",\"type\":\"uint256\"}],\"name\":\"ProposeAggregateRootCooldownChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rootManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRootManager\",\"type\":\"address\"}],\"name\":\"RootManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updated\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previous\",\"type\":\"address\"}],\"name\":\"SpokeConnectorChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptProposedOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"addRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autonolas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RelayerProxyHub.AutonolasPriorityFunction\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"autonolasPriority\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"canonicalDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"receiveLocal\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bridgedAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"normalizedIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"canonicalId\",\"type\":\"bytes32\"}],\"internalType\":\"struct TransferInfo\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"routers\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"routerSignatures\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"sequencer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sequencerSignature\",\"type\":\"bytes\"}],\"internalType\":\"struct ExecuteArgs\",\"name\":\"_args\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposedAggregateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_rootTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endOfDispute\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_encodedData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"_proposedAggregateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_endOfDispute\",\"type\":\"uint256\"}],\"name\":\"finalizeAndPropagate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_encodedData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"_proposedAggregateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_endOfDispute\",\"type\":\"uint256\"}],\"name\":\"finalizeAndPropagateKeep3r\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_proposedAggregateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_endOfDispute\",\"type\":\"uint256\"}],\"name\":\"finalizeOnRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelatoRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"hubConnectors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3r\",\"outputs\":[{\"internalType\":\"contract IKeep3rV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastFinalizeAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPropagateAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProposeAggregateRootAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_encodedData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_fromChain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_l2Hash\",\"type\":\"bytes32\"}],\"name\":\"processFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_encodedData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"_fromChain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_l2Hash\",\"type\":\"bytes32\"}],\"name\":\"processFromRootKeep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedRootMessages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_messageFees\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_encodedData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"_relayerFee\",\"type\":\"uint256\"}],\"name\":\"propagate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propagateCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_connectors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_messageFees\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_encodedData\",\"type\":\"bytes[]\"}],\"name\":\"propagateKeep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"domains\",\"type\":\"uint32[]\"}],\"name\":\"propagateWorkable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_aggregateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_rootTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"proposeAggregateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposeAggregateRootCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_snapshotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_aggregateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_snapshotsRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"proposeAggregateRootOnRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_snapshotId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_aggregateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_snapshotsRoots\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_domains\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"proposeAggregateRootOnRootKeep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlyProposed\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[32]\",\"name\":\"path\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct ISpokeConnector.Proof[]\",\"name\":\"_proofs\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"_aggregateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[32]\",\"name\":\"_aggregatePath\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint256\",\"name\":\"_aggregateIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"proveAndProcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"removeRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounced\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootManager\",\"outputs\":[{\"internalType\":\"contract IRootManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_encodedData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_messageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_relayerFee\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRootToHubSpoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_autonolas\",\"type\":\"address\"}],\"name\":\"setAutonolas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RelayerProxyHub.AutonolasPriorityFunction\",\"name\":\"_function\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_autonolasPriority\",\"type\":\"uint8\"}],\"name\":\"setAutonolasPriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"}],\"name\":\"setConnext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalizeCooldown\",\"type\":\"uint256\"}],\"name\":\"setFinalizeCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelatoRelayer\",\"type\":\"address\"}],\"name\":\"setGelatoRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hubConnector\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_chain\",\"type\":\"uint32\"}],\"name\":\"setHubConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"name\":\"setKeep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_propagateCooldown\",\"type\":\"uint256\"}],\"name\":\"setPropagateCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposeCooldown\",\"type\":\"uint256\"}],\"name\":\"setProposeAggregateRootCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rootManager\",\"type\":\"address\"}],\"name\":\"setRootManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spokeConnector\",\"type\":\"address\"}],\"name\":\"setSpokeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spokeConnector\",\"outputs\":[{\"internalType\":\"contract ISpokeConnector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Connext Labs, Inc.\",\"events\":{\"AutonolasChanged(address,address)\":{\"params\":{\"previous\":\"Old Autonolas address in the contract\",\"updated\":\"New Autonolas address in the contract\"}},\"AutonolasPriorityChanged(uint8,uint8,uint8)\":{\"params\":{\"previous\":\"Old Autonolas priority in the contract\",\"updated\":\"New Autonolas priority in the contract\"}},\"HubConnectorChanged(address,address,uint32)\":{\"params\":{\"chain\":\"Chain ID of the hub connector\",\"hubConnector\":\"New hub connector address\",\"oldHubConnector\":\"Old hub connector address\"}},\"PropagateCooldownChanged(uint256,uint256)\":{\"params\":{\"oldPropagateCooldown\":\"Old cooldown period\",\"propagateCooldown\":\"New cooldown period\"}},\"RootManagerChanged(address,address)\":{\"params\":{\"oldRootManager\":\"Old root manager address in the contract\",\"rootManager\":\"New root manager address in the contract\"}}},\"kind\":\"dev\",\"methods\":{\"addRelayer(address)\":{\"params\":{\"_relayer\":\"- Relayer address to add.\"}},\"execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),uint256)\":{\"params\":{\"_args\":\"- ExecuteArgs arguments.\",\"_fee\":\"- Fee to be paid to relayer.\"},\"returns\":{\"transferId\":\"- The transfer ID of the crosschain transfer. Should match the xcall's transfer ID in order for reconciliation to occur.\"}},\"finalize(bytes32,uint256,uint256)\":{\"params\":{\"_endOfDispute\":\"The block in which the dispute period for proposed root finalizes\",\"_proposedAggregateRoot\":\"The aggregate root currently proposed\",\"_rootTimestamp\":\"Block.timestamp at which the root was finalized in the root manager contract.\"}},\"finalizeAndPropagate(address[],uint256[],bytes[],bytes32,uint256)\":{\"params\":{\"_connectors\":\"Array of connectors: should match exactly the array of `connectors` in storage;\",\"_encodedData\":\"Array of encodedData: extra params for each AMB if required\",\"_endOfDispute\":\"The timestamp when the dispute period ends.\",\"_fees\":\"Array of fees in native token for an AMB if required\",\"_proposedAggregateRoot\":\"The aggregate root to be proposed.\"}},\"finalizeAndPropagateKeep3r(address[],uint256[],bytes[],bytes32,uint256)\":{\"params\":{\"_connectors\":\"Array of connectors: should match exactly the array of `connectors` in storage;\",\"_encodedData\":\"Array of encodedData: extra params for each AMB if required\",\"_endOfDispute\":\"The timestamp when the dispute period ends.\",\"_fees\":\"Array of fees in native token for an AMB if required\",\"_proposedAggregateRoot\":\"The aggregate root to be proposed.\"}},\"finalizeOnRoot(bytes32,uint256)\":{\"params\":{\"_endOfDispute\":\"The block in which the dispute period for proposed root finalizes\",\"_proposedAggregateRoot\":\"The aggregate root currently proposed\"}},\"processFromRoot(bytes,uint32,bytes32)\":{\"params\":{\"_encodedData\":\"Array of encoded data for HubConnector function.\",\"_fromChain\":\"Chain ID of the chain the message is coming from.\",\"_l2Hash\":\"Hash of the message on the L2 chain.\"}},\"processFromRootKeep3r(bytes,uint32,bytes32)\":{\"params\":{\"_encodedData\":\"Array of encoded data for HubConnector function.\",\"_fromChain\":\"Chain ID of the chain the message is coming from.\",\"_l2Hash\":\"Hash of the message on the L2 chain.\"}},\"propagate(address[],uint256[],bytes[],uint256)\":{\"params\":{\"_connectors\":\"Array of connectors: should match exactly the array of `connectors` in storage; used here to reduce gas costs, and keep them static regardless of number of supported domains.\",\"_encodedData\":\"Array of encodedData: extra params for each AMB if required\",\"_messageFees\":\"Array of fees in native token for an AMB if required\",\"_relayerFee\":\"Fee to be paid to relayer\"}},\"propagateKeep3r(address[],uint256[],bytes[])\":{\"params\":{\"_connectors\":\"Array of connectors: should match exactly the array of `connectors` in storage; used here to reduce gas costs, and keep them static regardless of number of supported domains.\",\"_encodedData\":\"Array of encodedData: extra params for each AMB if required\",\"_messageFees\":\"Array of fees in native token for an AMB if required\"}},\"propagateWorkable(uint32[])\":{\"returns\":{\"_0\":\"True if the RootManager has a workable root.\"}},\"proposeAggregateRoot(bytes32,uint256,bytes,uint256)\":{\"details\":\"_rootTimestamp is required for off-chain agents to be able to know which root they should fetch from the root manager contract                     in order to compare it with the one being proposed. The off-chain agents should also ensure the proposed root is                     not an old one.\",\"params\":{\"_aggregateRoot\":\"The aggregate root to propose.\",\"_fee\":\"- Fee to be paid to relayer.\",\"_rootTimestamp\":\"Block.timestamp at which the root was finalized in the root manager contract.\",\"_signature\":\"Signature from the approved proposer.\"}},\"proposeAggregateRootOnRoot(uint256,bytes32,bytes32[],uint32[],bytes)\":{\"details\":\"This contract will validate the signer is a whitelisted proposer on the RootManager, and then call `propose` itself. This means this contract must *also* be whitelisted as a proposer on the RootManager.\",\"params\":{\"_aggregateRoot\":\"The aggregate root to be proposed.\",\"_domains\":\"The domains of the snapshots to be proposed.\",\"_signature\":\"Signature from the approved proposer.\",\"_snapshotId\":\"The snapshot id of the root to be proposed.\",\"_snapshotsRoots\":\"The roots of the connectors included in the aggregate.\"}},\"proposeAggregateRootOnRootKeep3r(uint256,bytes32,bytes32[],uint32[],bytes)\":{\"details\":\"This contract will validate the signer is a whitelisted proposer on the RootManager, and then call `propose` itself. This means this contract must *also* be whitelisted as a proposer on the RootManager.\",\"params\":{\"_aggregateRoot\":\"The aggregate root to be proposed.\",\"_domains\":\"The domains of the snapshots to be proposed.\",\"_snapshotId\":\"The snapshot id of the root to be proposed.\",\"_snapshotsRoots\":\"The roots of the connectors included in the aggregate.\"}},\"proveAndProcess((bytes,bytes32[32],uint256)[],bytes32,bytes32[32],uint256,uint256)\":{\"params\":{\"_aggregateIndex\":\"Index of the inbound root in the aggregator's merkle tree in the hub.\",\"_aggregatePath\":\"Merkle path of inclusion for the inbound root.\",\"_aggregateRoot\":\"The target aggregate root we want to prove inclusion for. This root must have already been delivered to this spoke connector contract and surpassed the validation period.\",\"_fee\":\"- Fee to be paid to relayer.\",\"_proofs\":\"Batch of Proofs containing messages for proving/processing.\"}},\"removeRelayer(address)\":{\"params\":{\"_relayer\":\"- Relayer address to remove.\"}},\"send(bytes,uint256,uint256)\":{\"params\":{\"_encodedData\":\"- Data to be sent to Connext SpokeConnector\",\"_messageFee\":\"- Fee to be paid to the SpokeConnector for connected AMBs that require fees.\",\"_relayerFee\":\"- Fee to be paid to relayer.\"}},\"setAutonolas(address)\":{\"params\":{\"_autonolas\":\"- New Autonolas contract address.\"}},\"setAutonolasPriority(uint8,uint8)\":{\"params\":{\"_autonolasPriority\":\"- New Autonolas priority.\"}},\"setConnext(address)\":{\"params\":{\"_connext\":\"- New Connext address.\"}},\"setFeeCollector(address)\":{\"params\":{\"_feeCollector\":\"- New Gelato Fee Collector address.\"}},\"setFinalizeCooldown(uint256)\":{\"params\":{\"_finalizeCooldown\":\"The new cooldown in seconds.\"}},\"setGelatoRelayer(address)\":{\"params\":{\"_gelatoRelayer\":\"- New Gelato relayer address.\"}},\"setHubConnector(address,uint32)\":{\"params\":{\"_hubConnector\":\"The address of the new HubConnector on this domain.\"}},\"setKeep3r(address)\":{\"params\":{\"_keep3r\":\"- New Keep3r contract address.\"}},\"setPropagateCooldown(uint256)\":{\"params\":{\"_propagateCooldown\":\"The new cooldown in seconds.\"}},\"setProposeAggregateRootCooldown(uint256)\":{\"params\":{\"_proposeCooldown\":\"The new cooldown in seconds.\"}},\"setRootManager(address)\":{\"params\":{\"_rootManager\":\"The address of the new RootManager on this domain.\"}},\"setSpokeConnector(address)\":{\"params\":{\"_spokeConnector\":\"- New SpokeConnector address.\"}}},\"stateVariables\":{\"autonolas\":{\"details\":\"Special consideration for Autonolas keeper\"},\"autonolasPriority\":{\"details\":\"number between 0 and 10 to determine priority that Autonolas has for jobs. 0 is disabled, 10 will work for every block.\"}},\"title\":\"RelayerProxyHub\",\"version\":1},\"userdoc\":{\"events\":{\"AutonolasChanged(address,address)\":{\"notice\":\"Emitted when Autonolas address is updated by admin\"},\"AutonolasPriorityChanged(uint8,uint8,uint8)\":{\"notice\":\"Emitted when Autonolas priority is updated by admin\"},\"ConnextChanged(address,address)\":{\"notice\":\"Emitted when Connext contract address is updated by admin\"},\"FeeCollectorChanged(address,address)\":{\"notice\":\"Emitted when FeeCollectorChanged address is updated by admin\"},\"FinalizeCooldownChanged(uint256,uint256)\":{\"notice\":\"Emitted when the cooldown period for finalize is updated\"},\"FundsDeducted(address,uint256,uint256)\":{\"notice\":\"Emitted when funds removed from the contract by admin\"},\"FundsReceived(uint256,uint256)\":{\"notice\":\"Emitted when funds added to the contract\"},\"GelatoRelayerChanged(address,address)\":{\"notice\":\"Emitted when GelatoRelayer address is updated by admin\"},\"HubConnectorChanged(address,address,uint32)\":{\"notice\":\"Emitted when a new hub connector is updated\"},\"Keep3rChanged(address,address)\":{\"notice\":\"Emitted when Keep3r address is updated by admin\"},\"PropagateCooldownChanged(uint256,uint256)\":{\"notice\":\"Emitted when the cooldown period for propagate is updated\"},\"ProposeAggregateRootCooldownChanged(uint256,uint256)\":{\"notice\":\"Emitted when the cooldown period for proposeAggregateRoot is updated\"},\"RelayerAdded(address)\":{\"notice\":\"Emitted when a new relayer is allowlisted by admin\"},\"RelayerRemoved(address)\":{\"notice\":\"Emitted when a relayer is removed from allowlist by admin\"},\"RootManagerChanged(address,address)\":{\"notice\":\"Emitted when the root manager is updated by admin\"},\"SpokeConnectorChanged(address,address)\":{\"notice\":\"Emitted when SpokeConnector contract address is updated by admin\"}},\"kind\":\"user\",\"methods\":{\"acceptProposedOwner()\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"addRelayer(address)\":{\"notice\":\"Adds a relayer address to the allowed relayers mapping.\"},\"autonolas()\":{\"notice\":\"Address of Autonolas keeper contract\"},\"autonolasPriority(uint8)\":{\"notice\":\"Mapping of Autonolas priority function to priority number\"},\"constructor\":{\"notice\":\"Creates a new RelayerProxyHub instance.\"},\"delay()\":{\"notice\":\"Returns the delay period before a new owner can be accepted.\"},\"execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),uint256)\":{\"notice\":\"Wraps the call to execute() on Connext and pays either the caller or hardcoded relayer from this contract's balance for completing the transaction.\"},\"finalize(bytes32,uint256,uint256)\":{\"notice\":\"Wraps the `finalize` function on root manager\"},\"finalizeAndPropagate(address[],uint256[],bytes[],bytes32,uint256)\":{\"notice\":\"Wraps the `finalizeAndPropagate` function\"},\"finalizeAndPropagateKeep3r(address[],uint256[],bytes[],bytes32,uint256)\":{\"notice\":\"Wraps the `finalizeAndPropagate` function\"},\"finalizeCooldown()\":{\"notice\":\"Delay for the finalize function\"},\"finalizeOnRoot(bytes32,uint256)\":{\"notice\":\"Wraps the `finalize` function on root manager\"},\"hubConnectors(uint32)\":{\"notice\":\"Mapping of identifier to hub connector contract address\"},\"lastFinalizeAt()\":{\"notice\":\"Timestamp of the last time the finalize job was worked.\"},\"lastPropagateAt()\":{\"notice\":\"Timestamp of the last time the propagate job was worked.\"},\"lastProposeAggregateRootAt()\":{\"notice\":\"Timestamp of when last aggregate was proposed\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"processFromRoot(bytes,uint32,bytes32)\":{\"notice\":\"Wraps the call to processFromRoot() on RootManager. Only allowed to be called by registered relayer.\"},\"processFromRootKeep3r(bytes,uint32,bytes32)\":{\"notice\":\"Wraps the call to processFromRoot() on RootManager and pays with Keep3r credits. Only allowed to be called by registered Keep3r.\"},\"processedRootMessages(uint32,bytes32)\":{\"notice\":\"Mapping of identifier to root message hash to boolean indicating if the message has been processed\"},\"propagate(address[],uint256[],bytes[],uint256)\":{\"notice\":\"Wraps the call to propagate() on RootManager and pays either the caller or hardcoded relayer from this contract's balance for completing the transaction.\"},\"propagateCooldown()\":{\"notice\":\"Delay for the propagate function\"},\"propagateKeep3r(address[],uint256[],bytes[])\":{\"notice\":\"Wraps the call to propagate() on RootManager and pays with Keep3r credits. Only allowed to be called by registered Keep3r.\"},\"propagateWorkable(uint32[])\":{\"notice\":\"Checks if the RootManager has a workable root. Calls the rootManager's dequeue() function to check if the RootManager has a sendable root. This is an expensive function so it should only be called off-chain to determine if the relayer should call the propagate() function.\"},\"proposeAggregateRoot(bytes32,uint256,bytes,uint256)\":{\"notice\":\"Wraps the call to proposeAggregateRoot() on SpokeConnector and pays either the caller or hardcoded relayer\"},\"proposeAggregateRootCooldown()\":{\"notice\":\"Delay for the proposeAggregateRoot function\"},\"proposeAggregateRootOnRoot(uint256,bytes32,bytes32[],uint32[],bytes)\":{\"notice\":\"Wraps the `proposeAggregateRoot` function of RootManager\"},\"proposeAggregateRootOnRootKeep3r(uint256,bytes32,bytes32[],uint32[],bytes)\":{\"notice\":\"Wraps the `proposeAggregateRoot` function of RootManager\"},\"proposeNewOwner(address)\":{\"notice\":\"Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process\"},\"proposed()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proposedTimestamp()\":{\"notice\":\"Returns the address of the proposed owner.\"},\"proveAndProcess((bytes,bytes32[32],uint256)[],bytes32,bytes32[32],uint256,uint256)\":{\"notice\":\"Wraps the call to proveAndProcess() on SpokeConnector and pays either the caller or hardcoded relayer from this contract's balance for completing the transaction.\"},\"removeRelayer(address)\":{\"notice\":\"Removes a relayer address from the allowed relayers mapping.\"},\"renounceOwnership()\":{\"notice\":\"Renounces ownership of the contract after a delay\"},\"renounced()\":{\"notice\":\"Indicates if the ownership has been renounced() by checking if current owner is address(0)\"},\"rootManager()\":{\"notice\":\"Address of the RootManager contract\"},\"send(bytes,uint256,uint256)\":{\"notice\":\"Wraps the call to send() on SpokeConnector and pays either the caller or hardcoded relayer from this contract's balance for completing the transaction.\"},\"sendRootToHubSpoke()\":{\"notice\":\"Wraps the `sendRootToHubSpoke` function of RootManager\"},\"setAutonolas(address)\":{\"notice\":\"Updates the Autonolas contract address on this contract.\"},\"setAutonolasPriority(uint8,uint8)\":{\"notice\":\"Updates the Autonolas priority on this contract.\"},\"setConnext(address)\":{\"notice\":\"Updates the Connext address on this contract.\"},\"setFeeCollector(address)\":{\"notice\":\"Updates the Gelato Fee Collector address on this contract.\"},\"setFinalizeCooldown(uint256)\":{\"notice\":\"Updates the finalize cooldown.\"},\"setGelatoRelayer(address)\":{\"notice\":\"Updates the Gelato relayer address on this contract.\"},\"setHubConnector(address,uint32)\":{\"notice\":\"Updates the HubConnector address.\"},\"setKeep3r(address)\":{\"notice\":\"Updates the Keep3r contract address on this contract.\"},\"setPropagateCooldown(uint256)\":{\"notice\":\"Updates the propagate cooldown.\"},\"setProposeAggregateRootCooldown(uint256)\":{\"notice\":\"Updates the propose cooldown.\"},\"setRootManager(address)\":{\"notice\":\"Updates the RootManager address.\"},\"setSpokeConnector(address)\":{\"notice\":\"Updates the SpokeConnector address on this contract.\"},\"withdraw(address)\":{\"notice\":\"Withdraws tokens stored on this contract to msg.sender.\"}},\"notice\":\"This is a temporary contract that wraps the Connext RootManager's propagate() function so that it can be called by Gelato's legacy relayer network. The contract stores native assets and pays them to the relayer on function call.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/core/connext/helpers/RelayerProxyHub.sol\":\"RelayerProxyHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayBase} from \\\"./base/GelatoRelayBase.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 20;\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayFeeCollector\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction __getFeeCollector() pure returns (address feeCollector) {\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n/**\\n * @dev Context variant with only feeCollector appended to msg.data\\n * Expects calldata encoding:\\n *   abi.encodePacked(bytes data, address feeCollectorAddress)\\n * Therefore, we're expecting 20bytes to be appended to normal msgData\\n * 20bytes start offsets from calldatasize:\\n *    feeCollector: -20\\n */\\n/// @dev Do not use with GelatoRelayContext - pick only one\\nabstract contract GelatoRelayFeeCollector is GelatoRelayBase {\\n    function _getMsgData() internal view returns (bytes calldata) {\\n        return\\n            _isGelatoRelay(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    // Only use with GelatoRelayBase onlyGelatoRelay or `_isGelatoRelay` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return __getFeeCollector();\\n    }\\n}\\n\",\"keccak256\":\"0x24d0c82254158c5d7cbb88bfafdab8197dbafc8be6e03d6dd13a3479bf7fc18d\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GELATO_RELAY} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayBase {\\n    modifier onlyGelatoRelay() {\\n        require(_isGelatoRelay(msg.sender), \\\"onlyGelatoRelay\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelay(address _forwarder) internal pure returns (bool) {\\n        return _forwarder == GELATO_RELAY;\\n    }\\n}\\n\",\"keccak256\":\"0x8b8ca04a1b6dce1b14b0b5f59783defe5562f876f0d6127aefa3e251b7631ba1\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771 = 0xBf175FCC7086b4f9bd59d5EAE8eA67b8f940DE0d;\\n\",\"keccak256\":\"0xa3f9966896db1bfafbcb1b58d1d76b44d1cd1660986e675d57398d5a9a74d242\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/core/connext/helpers/LPToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title Liquidity Provider Token\\n * @notice This token is an ERC20 detailed token with added capability to be minted by the owner.\\n * It is used to represent user's shares when providing liquidity to swap contracts.\\n * @dev Only Swap contracts should initialize and own LPToken contracts.\\n */\\ncontract LPToken is ERC20Upgradeable, OwnableUpgradeable {\\n  // ============ Storage ============\\n\\n  // ============ Initializer ============\\n\\n  /**\\n   * @notice Initializes this LPToken contract with the given name and symbol\\n   * @dev The caller of this function will become the owner. A Swap contract should call this\\n   * in its initializer function.\\n   * @param name name of this token\\n   * @param symbol symbol of this token\\n   */\\n  function initialize(string memory name, string memory symbol) external initializer returns (bool) {\\n    __Context_init_unchained();\\n    __ERC20_init_unchained(name, symbol);\\n    __Ownable_init_unchained();\\n    return true;\\n  }\\n\\n  // ============ External functions ============\\n\\n  /**\\n   * @notice Mints the given amount of LPToken to the recipient.\\n   * @dev only owner can call this mint function\\n   * @param recipient address of account to receive the tokens\\n   * @param amount amount of tokens to mint\\n   */\\n  function mint(address recipient, uint256 amount) external onlyOwner {\\n    require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n    _mint(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Burns the given amount of LPToken from provided account\\n   * @dev only owner can call this burn function\\n   * @param account address of account from which to burn token\\n   * @param amount amount of tokens to mint\\n   */\\n  function burnFrom(address account, uint256 amount) external onlyOwner {\\n    require(amount != 0, \\\"LPToken: cannot burn 0\\\");\\n    _burn(account, amount);\\n  }\\n\\n  // ============ Internal functions ============\\n\\n  /**\\n   * @dev Overrides ERC20._beforeTokenTransfer() which get called on every transfers including\\n   * minting and burning. This ensures that Swap.updateUserWithdrawFees are called everytime.\\n   * This assumes the owner is set to a Swap contract's address.\\n   */\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal virtual override(ERC20Upgradeable) {\\n    super._beforeTokenTransfer(from, to, amount);\\n    require(to != address(this), \\\"LPToken: cannot send to itself\\\");\\n  }\\n\\n  // ============ Upgrade Gap ============\\n  uint256[50] private __GAP; // gap for upgrade safety\\n}\\n\",\"keccak256\":\"0x81895c7ab368c08fe0b8fc3798535c2879ccaf0c3c2e1aaee5bcd43c4211ce9d\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/helpers/RelayerProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {GelatoRelayFeeCollector} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\\\";\\n\\nimport {ProposedOwnable} from \\\"../../../shared/ProposedOwnable.sol\\\";\\nimport {IConnext, ExecuteArgs} from \\\"../interfaces/IConnext.sol\\\";\\n\\ninterface ISpokeConnector {\\n  struct Proof {\\n    bytes message;\\n    bytes32[32] path;\\n    uint256 index;\\n  }\\n\\n  function DOMAIN() external view returns (uint32);\\n\\n  function proveAndProcess(\\n    Proof[] calldata _proofs,\\n    bytes32 _aggregateRoot,\\n    bytes32[32] calldata _aggregatePath,\\n    uint256 _aggregateIndex\\n  ) external;\\n\\n  function send(bytes memory _encodedData) external payable;\\n\\n  function proposeAggregateRoot(bytes32 _aggregateRoot, uint256 _rootTimestamp) external;\\n\\n  function finalize(bytes32 _proposedAggregateRoot, uint256 _rootTimestamp, uint256 _endOfDispute) external;\\n\\n  function allowlistedProposers(address _proposer) external view returns (bool);\\n}\\n\\ninterface IKeep3rV2 {\\n  function isKeeper(address _keeper) external returns (bool _isKeeper);\\n\\n  function worked(address _keeper) external;\\n}\\n\\n/**\\n * @title RelayerProxy\\n * @author Connext Labs, Inc.\\n * @notice This is a temporary contract that wraps fast path functions in the Connext interface so that they can be called by\\n * Gelato's legacy relayer network. The contract stores native assets and pays them to the relayer on function call.\\n */\\ncontract RelayerProxy is ProposedOwnable, ReentrancyGuard, GelatoRelayFeeCollector {\\n  using ECDSA for bytes32;\\n  // ============ Properties ============\\n  address public gelatoRelayer;\\n  address public feeCollector;\\n  IKeep3rV2 public keep3r;\\n  IConnext public connext;\\n  ISpokeConnector public spokeConnector;\\n  uint32 public domain;\\n\\n  /**\\n   * @notice Delay for the proposeAggregateRoot function\\n   * @dev Can be updated by admin\\n   */\\n  uint256 public proposeAggregateRootCooldown;\\n\\n  /**\\n   * @notice Timestamp of when last aggregate was proposed\\n   */\\n  uint256 public lastProposeAggregateRootAt;\\n\\n  /**\\n   * @notice Delay for the finalize function\\n   */\\n  uint256 public finalizeCooldown;\\n\\n  /**\\n   * @notice Timestamp of the last time the finalize job was worked.\\n   */\\n  uint256 public lastFinalizeAt;\\n\\n  mapping(address => bool) public allowedRelayer;\\n\\n  // ============ Modifier ============\\n\\n  modifier onlyRelayer() {\\n    if (!allowedRelayer[msg.sender]) {\\n      revert RelayerProxy__onlyRelayer_notRelayer();\\n    }\\n    _;\\n  }\\n\\n  modifier definedAddress(address _input) {\\n    if (_input == address(0)) {\\n      revert RelayerProxy__definedAddress_empty();\\n    }\\n    _;\\n  }\\n\\n  // Modifier in charge of verifying if the caller is a registered keeper as well as\\n  // rewarding them with an amount of KP3R equal to their gas spent + premium.\\n  modifier validateAndPayWithCredits(address _keeper) {\\n    if (!keep3r.isKeeper(_keeper)) {\\n      revert RelayerProxy__validateAndPayWithCredits_notKeep3r();\\n    }\\n    _;\\n    keep3r.worked(_keeper); // Pays the keeper for the work.\\n  }\\n\\n  modifier onlyProposeCooledDown() {\\n    if (block.timestamp < lastProposeAggregateRootAt + proposeAggregateRootCooldown) {\\n      revert RelayerProxy__proposeAggregateRootCooledDown_notCooledDown();\\n    }\\n    _;\\n    lastProposeAggregateRootAt = block.timestamp;\\n  }\\n\\n  modifier onlyFinalizeCooledDown() {\\n    if (block.timestamp < lastFinalizeAt + finalizeCooldown) {\\n      revert RelayerProxy__finalizeCooledDown_notCooledDown();\\n    }\\n    _;\\n    lastFinalizeAt = block.timestamp;\\n  }\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when funds added to the contract\\n   * @param amount The amount added\\n   * @param balance The updated balance of the contract\\n   */\\n  event FundsReceived(uint256 amount, uint256 balance);\\n\\n  /**\\n   * @notice Emitted when funds removed from the contract by admin\\n   * @param token The token address\\n   * @param amount The amount removed\\n   * @param balance The updated balance of the contract\\n   */\\n  event FundsDeducted(address token, uint256 amount, uint256 balance);\\n\\n  /**\\n   * @notice Emitted when a new relayer is allowlisted by admin\\n   * @param relayer Address of the added relayer\\n   */\\n  event RelayerAdded(address relayer);\\n\\n  /**\\n   * @notice Emitted when a relayer is removed from allowlist by admin\\n   * @param relayer Address of the removed relayer\\n   */\\n  event RelayerRemoved(address relayer);\\n\\n  /**\\n   * @notice Emitted when Connext contract address is updated by admin\\n   * @param updated New Connext address in the contract\\n   * @param previous Old Connext address in the contract\\n   */\\n  event ConnextChanged(address updated, address previous);\\n\\n  /**\\n   * @notice Emitted when SpokeConnector contract address is updated by admin\\n   * @param updated New SpokeConnector address in the contract\\n   * @param previous Old SpokeConnector address in the contract\\n   */\\n  event SpokeConnectorChanged(address updated, address previous);\\n\\n  /**\\n   * @notice Emitted when GelatoRelayer address is updated by admin\\n   * @param updated New GelatoRelayer address in the contract\\n   * @param previous Old Gelatorelayer address in the contract\\n   */\\n  event GelatoRelayerChanged(address updated, address previous);\\n\\n  /**\\n   * @notice Emitted when FeeCollectorChanged address is updated by admin\\n   * @param updated New FeeCollectorChanged address in the contract\\n   * @param previous Old FeeCollectorChanged address in the contract\\n   */\\n  event FeeCollectorChanged(address updated, address previous);\\n\\n  /**\\n   * @notice Emitted when Keep3r address is updated by admin\\n   * @param updated New Keep3r address in the contract\\n   * @param previous Old Keep3r address in the contract\\n   */\\n  event Keep3rChanged(address updated, address previous);\\n\\n  /**\\n   * @notice Emitted when the cooldown period for proposeAggregateRoot is updated\\n   * @param proposeAggregateRootCooldown New cooldown period\\n   * @param oldProposeAggregateRootCooldown Old cooldown period\\n   */\\n  event ProposeAggregateRootCooldownChanged(\\n    uint256 proposeAggregateRootCooldown,\\n    uint256 oldProposeAggregateRootCooldown\\n  );\\n\\n  /**\\n   * @notice Emitted when the cooldown period for finalize is updated\\n   * @param finalizeCooldown New cooldown period\\n   * @param oldFinalizeCooldown Old cooldown period\\n   */\\n  event FinalizeCooldownChanged(uint256 finalizeCooldown, uint256 oldFinalizeCooldown);\\n\\n  // ============ Error ============\\n  error RelayerProxy__addRelayer_relayerAdded();\\n  error RelayerProxy__removeRelayer_relayerNotAdded();\\n  error RelayerProxy__onlyRelayer_notRelayer();\\n  error RelayerProxy__definedAddress_empty();\\n  error RelayerProxy__isWorkableBySender_notWorkable();\\n  error RelayerProxy__validateAndPayWithCredits_notKeep3r();\\n  error RelayerProxy__validateProposeSignature_notProposer(address signer);\\n  error RelayerProxy__proposeAggregateRootCooledDown_notCooledDown();\\n  error RelayerProxy__finalizeCooledDown_notCooledDown();\\n\\n  // ============ Structs ============\\n\\n  /**\\n   * Struct containing the construstor arguments of a RelayerProxy\\n   * @param connext The address of the Connext on this domain.\\n   * @param spokeConnector The address of the SpokeConnector on this domain.\\n   * @param gelatoRelayer The address of the Gelato relayer on this domain.\\n   * @param feeCollector The address of the Gelato Fee Collector on this domain.\\n   * @param keep3r The address of the Keep3r on this domain.\\n   * @param proposeAggregateRootCooldown The delay for the propose function.\\n   * @param finalizeCooldown The delay for the finalize function.\\n   */\\n  struct ConstructorParams {\\n    address connext;\\n    address spokeConnector;\\n    address gelatoRelayer;\\n    address feeCollector;\\n    address keep3r;\\n    uint256 proposeAggregateRootCooldown;\\n    uint256 finalizeCooldown;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new RelayerProxy instance.\\n   */\\n  constructor(ConstructorParams memory _params) ProposedOwnable() {\\n    _setOwner(msg.sender);\\n    _setConnext(_params.connext);\\n    _setSpokeConnector(_params.spokeConnector);\\n    _setGelatoRelayer(_params.gelatoRelayer);\\n    _setFeeCollector(_params.feeCollector);\\n    _setKeep3r(_params.keep3r);\\n    _setProposeAggregateRootCooldown(_params.proposeAggregateRootCooldown);\\n    _setFinalizeCooldown(_params.finalizeCooldown);\\n\\n    _addRelayer(_params.gelatoRelayer);\\n\\n    domain = ISpokeConnector(_params.spokeConnector).DOMAIN();\\n  }\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Adds a relayer address to the allowed relayers mapping.\\n   *\\n   * @param _relayer - Relayer address to add.\\n   */\\n  function addRelayer(address _relayer) external onlyOwner definedAddress(_relayer) {\\n    _addRelayer(_relayer);\\n  }\\n\\n  /**\\n   * @notice Removes a relayer address from the allowed relayers mapping.\\n   *\\n   * @param _relayer - Relayer address to remove.\\n   */\\n  function removeRelayer(address _relayer) external onlyOwner definedAddress(_relayer) {\\n    _removeRelayer(_relayer);\\n  }\\n\\n  /**\\n   * @notice Updates the Connext address on this contract.\\n   *\\n   * @param _connext - New Connext address.\\n   */\\n  function setConnext(address _connext) external onlyOwner definedAddress(_connext) {\\n    _setConnext(_connext);\\n  }\\n\\n  /**\\n   * @notice Updates the SpokeConnector address on this contract.\\n   *\\n   * @param _spokeConnector - New SpokeConnector address.\\n   */\\n  function setSpokeConnector(address _spokeConnector) external onlyOwner definedAddress(_spokeConnector) {\\n    _setSpokeConnector(_spokeConnector);\\n  }\\n\\n  /**\\n   * @notice Updates the Gelato relayer address on this contract.\\n   *\\n   * @param _gelatoRelayer - New Gelato relayer address.\\n   */\\n  function setGelatoRelayer(address _gelatoRelayer) external onlyOwner definedAddress(_gelatoRelayer) {\\n    _setGelatoRelayer(_gelatoRelayer);\\n  }\\n\\n  /**\\n   * @notice Updates the Gelato Fee Collector address on this contract.\\n   *\\n   * @param _feeCollector - New Gelato Fee Collector address.\\n   */\\n  function setFeeCollector(address _feeCollector) external onlyOwner definedAddress(_feeCollector) {\\n    _setFeeCollector(_feeCollector);\\n  }\\n\\n  /**\\n   * @notice Updates the Keep3r contract address on this contract.\\n   *\\n   * @param _keep3r - New Keep3r contract address.\\n   */\\n  function setKeep3r(address _keep3r) external onlyOwner definedAddress(_keep3r) {\\n    _setKeep3r(_keep3r);\\n  }\\n\\n  /**\\n   * @notice Updates the propose cooldown.\\n   * @param _proposeCooldown The new cooldown in seconds.\\n   */\\n  function setProposeAggregateRootCooldown(uint256 _proposeCooldown) external onlyOwner {\\n    _setProposeAggregateRootCooldown(_proposeCooldown);\\n  }\\n\\n  /**\\n   * @notice Updates the finalize cooldown.\\n   * @param _finalizeCooldown The new cooldown in seconds.\\n   */\\n  function setFinalizeCooldown(uint256 _finalizeCooldown) external onlyOwner {\\n    _setFinalizeCooldown(_finalizeCooldown);\\n  }\\n\\n  /**\\n   * @notice Updates the propose cooldown period on this contract.\\n   *\\n   * @param _proposeAggregateRootCooldown - Delay for propose.\\n   */\\n  function _setProposeAggregateRootCooldown(uint256 _proposeAggregateRootCooldown) internal {\\n    emit ProposeAggregateRootCooldownChanged(_proposeAggregateRootCooldown, proposeAggregateRootCooldown);\\n    proposeAggregateRootCooldown = _proposeAggregateRootCooldown;\\n  }\\n\\n  /**\\n   * @notice Updates the finalize cooldown period on this contract.\\n   *\\n   * @param _finalizeCooldown - Delay for finalize.\\n   */\\n  function _setFinalizeCooldown(uint256 _finalizeCooldown) internal {\\n    emit FinalizeCooldownChanged(_finalizeCooldown, finalizeCooldown);\\n    finalizeCooldown = _finalizeCooldown;\\n  }\\n\\n  /**\\n   * @notice Withdraws tokens stored on this contract to msg.sender.\\n   */\\n  function withdraw(address _token) external onlyOwner nonReentrant {\\n    uint256 balance = _token == address(0) ? address(this).balance : IERC20(_token).balanceOf(address(this));\\n\\n    if (_token == address(0)) {\\n      Address.sendValue(payable(msg.sender), balance);\\n    } else {\\n      IERC20(_token).transfer(msg.sender, balance);\\n    }\\n\\n    emit FundsDeducted(_token, balance, balance);\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Wraps the call to execute() on Connext and pays either the caller or hardcoded relayer from this\\n   * contract's balance for completing the transaction.\\n   *\\n   * @param _args - ExecuteArgs arguments.\\n   * @param _fee - Fee to be paid to relayer.\\n   * @return transferId - The transfer ID of the crosschain transfer. Should match the xcall's transfer ID in order for\\n   * reconciliation to occur.\\n   */\\n  function execute(\\n    ExecuteArgs calldata _args,\\n    uint256 _fee\\n  ) external onlyRelayer nonReentrant returns (bytes32 transferId) {\\n    transferId = connext.execute(_args);\\n    transferRelayerFee(_fee);\\n  }\\n\\n  /**\\n   * @notice Wraps the call to proveAndProcess() on SpokeConnector and pays either the caller or hardcoded relayer\\n   * from this contract's balance for completing the transaction.\\n   *\\n   * @param _proofs Batch of Proofs containing messages for proving/processing.\\n   * @param _aggregateRoot The target aggregate root we want to prove inclusion for. This root must have\\n   * already been delivered to this spoke connector contract and surpassed the validation period.\\n   * @param _aggregatePath Merkle path of inclusion for the inbound root.\\n   * @param _aggregateIndex Index of the inbound root in the aggregator's merkle tree in the hub.\\n   * @param _fee - Fee to be paid to relayer.\\n   */\\n  function proveAndProcess(\\n    ISpokeConnector.Proof[] calldata _proofs,\\n    bytes32 _aggregateRoot,\\n    bytes32[32] calldata _aggregatePath,\\n    uint256 _aggregateIndex,\\n    uint256 _fee\\n  ) external onlyRelayer nonReentrant {\\n    spokeConnector.proveAndProcess(_proofs, _aggregateRoot, _aggregatePath, _aggregateIndex);\\n    transferRelayerFee(_fee);\\n  }\\n\\n  /**\\n   * @notice Wraps the call to send() on SpokeConnector and pays either the caller or hardcoded relayer from this\\n   * contract's balance for completing the transaction.\\n   *\\n   * @param _encodedData - Data to be sent to Connext SpokeConnector\\n   * @param _messageFee - Fee to be paid to the SpokeConnector for connected AMBs that require fees.\\n   * @param _relayerFee - Fee to be paid to relayer.\\n   */\\n  function send(bytes memory _encodedData, uint256 _messageFee, uint256 _relayerFee) external onlyRelayer nonReentrant {\\n    spokeConnector.send{value: _messageFee}(_encodedData);\\n    emit FundsDeducted(address(0), _messageFee, address(this).balance);\\n    transferRelayerFee(_relayerFee);\\n  }\\n\\n  /**\\n   * @notice Wraps the call to proposeAggregateRoot() on SpokeConnector and pays either the caller or hardcoded relayer\\n   * @dev _rootTimestamp is required for off-chain agents to be able to know which root they should fetch from the root manager contract\\n   *                     in order to compare it with the one being proposed. The off-chain agents should also ensure the proposed root is\\n   *                     not an old one.\\n   * @param _aggregateRoot The aggregate root to propose.\\n   * @param _rootTimestamp Block.timestamp at which the root was finalized in the root manager contract.\\n   * @param _signature Signature from the approved proposer.\\n   * @param _fee - Fee to be paid to relayer.\\n   */\\n  function proposeAggregateRoot(\\n    bytes32 _aggregateRoot,\\n    uint256 _rootTimestamp,\\n    bytes memory _signature,\\n    uint256 _fee\\n  ) external onlyRelayer onlyProposeCooledDown nonReentrant {\\n    // Validate the signer\\n    _validateProposeSignature(_aggregateRoot, _rootTimestamp, lastProposeAggregateRootAt, _signature);\\n\\n    spokeConnector.proposeAggregateRoot(_aggregateRoot, _rootTimestamp);\\n\\n    transferRelayerFee(_fee);\\n  }\\n\\n  /**\\n   * @notice Wraps the `finalize` function on root manager\\n   * @param _proposedAggregateRoot The aggregate root currently proposed\\n   * @param _rootTimestamp         Block.timestamp at which the root was finalized in the root manager contract.\\n   * @param _endOfDispute          The block in which the dispute period for proposed root finalizes\\n   */\\n  function finalize(\\n    bytes32 _proposedAggregateRoot,\\n    uint256 _rootTimestamp,\\n    uint256 _endOfDispute\\n  ) external onlyFinalizeCooledDown nonReentrant {\\n    // Finalized the proposed aggregate root\\n    spokeConnector.finalize(_proposedAggregateRoot, _rootTimestamp, _endOfDispute);\\n  }\\n\\n  receive() external payable {\\n    emit FundsReceived(msg.value, address(this).balance);\\n  }\\n\\n  // ============ Internal Functions ============\\n\\n  /**\\n   * @notice helper function to transfer fees to either Gelato relayer via Fee Collector or to our\\n   * backup relayer (msg.sender).\\n   *\\n   * @param _fee - Fee to be paid to relayer.\\n   */\\n  function transferRelayerFee(uint256 _fee) internal {\\n    if (_fee == 0) {\\n      return;\\n    }\\n    if (msg.sender == gelatoRelayer) {\\n      Address.sendValue(payable(feeCollector), _fee);\\n    } else {\\n      Address.sendValue(payable(msg.sender), _fee);\\n    }\\n    emit FundsDeducted(address(0), _fee, address(this).balance);\\n  }\\n\\n  function _addRelayer(address _relayer) internal {\\n    if (allowedRelayer[_relayer]) {\\n      revert RelayerProxy__addRelayer_relayerAdded();\\n    }\\n\\n    allowedRelayer[_relayer] = true;\\n    emit RelayerAdded(_relayer);\\n  }\\n\\n  function _removeRelayer(address _relayer) internal {\\n    if (!allowedRelayer[_relayer]) {\\n      revert RelayerProxy__removeRelayer_relayerNotAdded();\\n    }\\n\\n    allowedRelayer[_relayer] = false;\\n    emit RelayerRemoved(_relayer);\\n  }\\n\\n  function _setConnext(address _connext) internal {\\n    emit ConnextChanged(_connext, address(connext));\\n    connext = IConnext(_connext);\\n  }\\n\\n  function _setSpokeConnector(address _spokeConnector) internal {\\n    emit SpokeConnectorChanged(_spokeConnector, address(spokeConnector));\\n    spokeConnector = ISpokeConnector(_spokeConnector);\\n  }\\n\\n  function _setGelatoRelayer(address _gelatoRelayer) internal {\\n    emit GelatoRelayerChanged(_gelatoRelayer, address(gelatoRelayer));\\n    gelatoRelayer = _gelatoRelayer;\\n  }\\n\\n  function _setFeeCollector(address _feeCollector) internal {\\n    emit FeeCollectorChanged(_feeCollector, address(feeCollector));\\n    feeCollector = _feeCollector;\\n  }\\n\\n  function _setKeep3r(address _keep3r) internal {\\n    emit Keep3rChanged(_keep3r, address(keep3r));\\n    keep3r = IKeep3rV2(_keep3r);\\n  }\\n\\n  function _validateProposeSignature(\\n    bytes32 _aggregateRoot,\\n    uint256 _rootTimestamp,\\n    uint256 _lastProposeAggregateRootAt,\\n    bytes memory _signature\\n  ) internal view {\\n    // Get the payload\\n    // To prevent signature replay, added `lastProposeAggregateRootAt` and `domain`.\\n    // `lastProposeAggregateRootAt` will be strictly increased after proposed, so same signature can't be used again.\\n    // Also domain will prevent the replay from other chains.\\n    bytes32 payload = keccak256(abi.encodePacked(_aggregateRoot, _rootTimestamp, _lastProposeAggregateRootAt, domain));\\n    // Recover signer\\n    address signer = payload.toEthSignedMessageHash().recover(_signature);\\n    if (!spokeConnector.allowlistedProposers(signer)) {\\n      revert RelayerProxy__validateProposeSignature_notProposer(signer);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x490c99f38a8d231e3f26b78d9669d50d8bb9e9d7374d3e3bbe10d460c957dbe5\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/helpers/RelayerProxyHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {GelatoRelayFeeCollector} from \\\"@gelatonetwork/relay-context/contracts/GelatoRelayFeeCollector.sol\\\";\\n\\nimport {ChainIDs} from \\\"../libraries/ChainIDs.sol\\\";\\nimport {Types} from \\\"../../../messaging/connectors/optimism/lib/Types.sol\\\";\\nimport {ProposedOwnable} from \\\"../../../shared/ProposedOwnable.sol\\\";\\nimport {RootManager} from \\\"../../../messaging/RootManager.sol\\\";\\n\\nimport {RelayerProxy} from \\\"./RelayerProxy.sol\\\";\\n\\ninterface IRootManager {\\n  function lastPropagatedRoot(uint32 _domain) external view returns (bytes32);\\n\\n  function propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData\\n  ) external payable;\\n\\n  function dequeue() external returns (bytes32, uint256);\\n\\n  function proposeAggregateRoot(\\n    uint256 _snapshotId,\\n    bytes32 _aggregateRoot,\\n    bytes32[] calldata _snapshotsRoots,\\n    uint32[] calldata _domains\\n  ) external;\\n\\n  function allowlistedProposers(address _proposer) external view returns (bool);\\n\\n  function finalizeAndPropagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData,\\n    bytes32 _proposedAggregateRoot,\\n    uint256 _endOfDispute\\n  ) external payable;\\n\\n  function finalize(bytes32 _proposedAggregateRoot, uint256 _endOfDispute) external payable;\\n\\n  function sendRootToHubSpoke() external;\\n}\\n\\ninterface IGnosisHubConnector {\\n  struct GnosisRootMessageData {\\n    bytes _data;\\n    bytes _signatures;\\n  }\\n\\n  function executeSignatures(bytes memory _data, bytes memory _signatures) external;\\n}\\n\\ninterface IArbitrumHubConnector {\\n  struct L2Message {\\n    address l2Sender;\\n    address to;\\n    uint256 l2Block;\\n    uint256 l1Block;\\n    uint256 l2Timestamp;\\n    uint256 value;\\n    bytes callData;\\n  }\\n\\n  struct ArbitrumRootMessageData {\\n    uint64 _nodeNum;\\n    bytes32 _sendRoot;\\n    bytes32 _blockHash;\\n    bytes32[] _proof;\\n    uint256 _index;\\n    L2Message _message;\\n  }\\n\\n  function processMessageFromRoot(\\n    uint64 _nodeNum,\\n    bytes32 _sendRoot,\\n    bytes32 _blockHash,\\n    bytes32[] calldata _proof,\\n    uint256 _index,\\n    L2Message calldata _message\\n  ) external;\\n}\\n\\ninterface IOptimismHubConnector {\\n  struct OptimismRootMessageData {\\n    Types.WithdrawalTransaction _tx;\\n    uint256 _l2OutputIndex;\\n    Types.OutputRootProof _outputRootProof;\\n    bytes[] _withdrawalProof;\\n  }\\n\\n  /**\\n   * @dev modified from: OptimismPortal contract\\n   * https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/contracts/L1/OptimismPortal.sol#L208\\n   */\\n  function processMessageFromRoot(\\n    Types.WithdrawalTransaction memory _tx,\\n    uint256 _l2OutputIndex,\\n    Types.OutputRootProof calldata _outputRootProof,\\n    bytes[] calldata _withdrawalProof\\n  ) external;\\n}\\n\\ninterface IPolygonHubConnector {\\n  function receiveMessage(bytes memory inputData) external;\\n}\\n\\ninterface IZkSyncHubConnector {\\n  struct ZkSyncRootMessageData {\\n    uint32 _l2BlockNumber;\\n    uint256 _l2MessageIndex;\\n    uint16 _l2TxNumberInBlock;\\n    bytes _message;\\n    bytes32[] _proof;\\n  }\\n\\n  function processMessageFromRoot(\\n    // zkSync block number in which the message was sent\\n    uint32 _l2BlockNumber,\\n    // Message index, that can be received via API\\n    uint256 _l2MessageIndex,\\n    // The L2 transaction number in a block, in which the log was sent\\n    uint16 _l2TxNumberInBlock,\\n    // The message that was sent from l2\\n    bytes calldata _message,\\n    // Merkle proof for the message\\n    bytes32[] calldata _proof\\n  ) external;\\n}\\n\\n/**\\n * @title RelayerProxyHub\\n * @author Connext Labs, Inc.\\n * @notice This is a temporary contract that wraps the Connext RootManager's propagate() function so that it can be called by\\n * Gelato's legacy relayer network. The contract stores native assets and pays them to the relayer on function call.\\n */\\ncontract RelayerProxyHub is RelayerProxy {\\n  using ECDSA for bytes32;\\n  // ============ Properties ============\\n\\n  /**\\n   * @notice Address of the RootManager contract\\n   */\\n  IRootManager public rootManager;\\n\\n  /**\\n   * @notice Delay for the propagate function\\n   */\\n  uint256 public propagateCooldown;\\n\\n  /**\\n   * @notice Timestamp of the last time the propagate job was worked.\\n   */\\n  uint256 public lastPropagateAt;\\n\\n  /**\\n   * @notice Address of Autonolas keeper contract\\n   * @dev Special consideration for Autonolas keeper\\n   */\\n  address public autonolas;\\n\\n  /**\\n   * @notice Enum of Autonolas functions with different priorities\\n   */\\n  enum AutonolasPriorityFunction {\\n    Propagate,\\n    ProcessFromRoot,\\n    ProposeAggregateRoot,\\n    FinalizeAndPropagate\\n  }\\n\\n  /**\\n   * @notice Mapping of Autonolas priority function to priority number\\n   * @dev number between 0 and 10 to determine priority that Autonolas has for jobs.\\n   * 0 is disabled, 10 will work for every block.\\n   */\\n  mapping(AutonolasPriorityFunction => uint8) public autonolasPriority;\\n\\n  /**\\n   * @notice Mapping of identifier to root message hash to boolean indicating if the message has been processed\\n   */\\n  mapping(uint32 => mapping(bytes32 => bool)) public processedRootMessages;\\n\\n  /**\\n   * @notice Mapping of identifier to hub connector contract address\\n   */\\n  mapping(uint32 => address) public hubConnectors;\\n\\n  // ============ Events ============\\n\\n  /**\\n   * @notice Emitted when the root manager is updated by admin\\n   * @param rootManager New root manager address in the contract\\n   * @param oldRootManager Old root manager address in the contract\\n   */\\n  event RootManagerChanged(address rootManager, address oldRootManager);\\n\\n  /**\\n   * @notice Emitted when the cooldown period for propagate is updated\\n   * @param propagateCooldown New cooldown period\\n   * @param oldPropagateCooldown Old cooldown period\\n   */\\n  event PropagateCooldownChanged(uint256 propagateCooldown, uint256 oldPropagateCooldown);\\n\\n  /**\\n   * @notice Emitted when a new hub connector is updated\\n   * @param hubConnector New hub connector address\\n   * @param oldHubConnector Old hub connector address\\n   * @param chain Chain ID of the hub connector\\n   */\\n  event HubConnectorChanged(address hubConnector, address oldHubConnector, uint32 chain);\\n\\n  /**\\n   * @notice Emitted when Autonolas address is updated by admin\\n   * @param updated New Autonolas address in the contract\\n   * @param previous Old Autonolas address in the contract\\n   */\\n  event AutonolasChanged(address updated, address previous);\\n\\n  /**\\n   * @notice Emitted when Autonolas priority is updated by admin\\n   * @param updated New Autonolas priority in the contract\\n   * @param previous Old Autonolas priority in the contract\\n   */\\n  event AutonolasPriorityChanged(AutonolasPriorityFunction fn, uint8 updated, uint8 previous);\\n\\n  // ============ Errors ============\\n  error RelayerProxyHub__propagateCooledDown_notCooledDown();\\n  error RelayerProxyHub__validateProposeSignature_notProposer(address signer);\\n  error RelayerProxyHub__processFromRoot_alreadyProcessed();\\n  error RelayerProxyHub__processFromRoot_noHubConnector();\\n  error RelayerProxyHub__processFromRoot_unsupportedChain();\\n\\n  // ============ Modifiers ============\\n  /**\\n   * @notice Indicates if the job is workable by the sender. Takes into account the Autonolas priority.\\n   * For example, if priority is 3, then sender will not be able to work on blocks 0, 1, 2, unless they are Autonolas.\\n   * Priority 0 disables Autonolas priority completely.\\n   * @param _sender The address of the caller\\n   */\\n  modifier isWorkableBySender(AutonolasPriorityFunction _function, address _sender) {\\n    if (\\n      _sender != autonolas && autonolasPriority[_function] != 0 && block.number % 10 <= autonolasPriority[_function] - 1\\n    ) {\\n      revert RelayerProxy__isWorkableBySender_notWorkable();\\n    }\\n    _;\\n  }\\n\\n  modifier onlyPropagateCooledDown() {\\n    if (block.timestamp < lastPropagateAt + propagateCooldown) {\\n      revert RelayerProxyHub__propagateCooledDown_notCooledDown();\\n    }\\n    _;\\n    lastPropagateAt = block.timestamp;\\n  }\\n\\n  // ============ Structs ============\\n\\n  /**\\n   * Struct containing the construstor arguments of a RelayerProxyHub\\n   * @param connext The address of the Connext on this domain.\\n   * @param spokeConnector The address of the SpokeConnector on this domain.\\n   * @param gelatoRelayer The address of the Gelato relayer on this domain.\\n   * @param feeCollector The address of the Gelato Fee Collector on this domain.\\n   * @param keep3r The address of the Keep3r on this domain.\\n   * @param rootManager The address of the Root Manager on this domain.\\n   * @param autonolas The address of the Autonolas keeper contract on this domain.\\n   * @param propagateCooldown The delay for the propagate function.\\n   * @param finalizeCooldown The delay for the finalize function.\\n   * @param proposeAggregateRootCooldown The delay for the proposeAggregateRoot function.\\n   * @param hubConnectors The addresses of the hub connectors on this domain.\\n   * @param hubConnectorChains The identifiers of the hub connectors on this domain.\\n   */\\n  struct HubConstructorParams {\\n    address connext;\\n    address spokeConnector;\\n    address gelatoRelayer;\\n    address feeCollector;\\n    address keep3r;\\n    address rootManager;\\n    address autonolas;\\n    uint256 propagateCooldown;\\n    uint256 finalizeCooldown;\\n    uint256 proposeAggregateRootCooldown;\\n    address[] hubConnectors;\\n    uint32[] hubConnectorChains;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new RelayerProxyHub instance.\\n   */\\n  constructor(\\n    HubConstructorParams memory _params\\n  )\\n    RelayerProxy(\\n      ConstructorParams(\\n        _params.connext,\\n        _params.spokeConnector,\\n        _params.gelatoRelayer,\\n        _params.feeCollector,\\n        _params.keep3r,\\n        _params.proposeAggregateRootCooldown,\\n        _params.finalizeCooldown\\n      )\\n    )\\n  {\\n    _setRootManager(_params.rootManager);\\n    _setPropagateCooldown(_params.propagateCooldown);\\n    _setProposeAggregateRootCooldown(_params.proposeAggregateRootCooldown);\\n    _setAutonolas(_params.autonolas);\\n    for (uint256 i = 0; i < _params.hubConnectors.length; i++) {\\n      _setHubConnector(_params.hubConnectors[i], _params.hubConnectorChains[i]);\\n    }\\n  }\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Updates the RootManager address.\\n   * @param _rootManager The address of the new RootManager on this domain.\\n   */\\n  function setRootManager(address _rootManager) external onlyOwner definedAddress(_rootManager) {\\n    _setRootManager(_rootManager);\\n  }\\n\\n  /**\\n   * @notice Updates the propagate cooldown.\\n   * @param _propagateCooldown The new cooldown in seconds.\\n   */\\n  function setPropagateCooldown(uint256 _propagateCooldown) external onlyOwner {\\n    _setPropagateCooldown(_propagateCooldown);\\n  }\\n\\n  /**\\n   * @notice Updates the HubConnector address.\\n   * @param _hubConnector The address of the new HubConnector on this domain.\\n   */\\n  function setHubConnector(address _hubConnector, uint32 _chain) external onlyOwner definedAddress(_hubConnector) {\\n    _setHubConnector(_hubConnector, _chain);\\n  }\\n\\n  /**\\n   * @notice Updates the Autonolas contract address on this contract.\\n   * @param _autonolas - New Autonolas contract address.\\n   */\\n  function setAutonolas(address _autonolas) external onlyOwner definedAddress(_autonolas) {\\n    _setAutonolas(_autonolas);\\n  }\\n\\n  /**\\n   * @notice Updates the Autonolas priority on this contract.\\n   * @param _autonolasPriority - New Autonolas priority.\\n   */\\n  function setAutonolasPriority(AutonolasPriorityFunction _function, uint8 _autonolasPriority) external onlyOwner {\\n    _setAutonolasPriority(_function, _autonolasPriority);\\n  }\\n\\n  // ============ External Functions ============\\n\\n  /**\\n   * @notice Checks if the RootManager has a workable root. Calls the rootManager's dequeue() function to check if the\\n   * RootManager has a sendable root. This is an expensive function so it should only be called off-chain to determine\\n   * if the relayer should call the propagate() function.\\n   *\\n   * @return True if the RootManager has a workable root.\\n   */\\n  function propagateWorkable(uint32[] memory domains) public returns (bool) {\\n    (bytes32 _aggregateRoot, ) = rootManager.dequeue();\\n    bool updatedRoot = false;\\n    for (uint256 i; i < domains.length; i++) {\\n      updatedRoot = rootManager.lastPropagatedRoot(domains[i]) != _aggregateRoot;\\n      if (updatedRoot) {\\n        break;\\n      }\\n    }\\n    return updatedRoot && block.timestamp >= lastPropagateAt + propagateCooldown;\\n  }\\n\\n  /**\\n   * @notice Wraps the call to propagate() on RootManager and pays either the caller or hardcoded relayer\\n   * from this contract's balance for completing the transaction.\\n   *\\n   * @param _connectors Array of connectors: should match exactly the array of `connectors` in storage;\\n   * used here to reduce gas costs, and keep them static regardless of number of supported domains.\\n   * @param _messageFees Array of fees in native token for an AMB if required\\n   * @param _encodedData Array of encodedData: extra params for each AMB if required\\n   * @param _relayerFee Fee to be paid to relayer\\n   */\\n  function propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _messageFees,\\n    bytes[] memory _encodedData,\\n    uint256 _relayerFee\\n  ) external onlyRelayer onlyPropagateCooledDown nonReentrant {\\n    uint256 sum = _propagate(_connectors, _messageFees, _encodedData);\\n    emit FundsDeducted(address(0), sum, address(this).balance);\\n    transferRelayerFee(_relayerFee);\\n  }\\n\\n  /**\\n   * @notice Wraps the call to propagate() on RootManager and pays with Keep3r credits. Only allowed to be called\\n   * by registered Keep3r.\\n   *\\n   * @param _connectors Array of connectors: should match exactly the array of `connectors` in storage;\\n   * used here to reduce gas costs, and keep them static regardless of number of supported domains.\\n   * @param _messageFees Array of fees in native token for an AMB if required\\n   * @param _encodedData Array of encodedData: extra params for each AMB if required\\n   */\\n  function propagateKeep3r(\\n    address[] calldata _connectors,\\n    uint256[] calldata _messageFees,\\n    bytes[] memory _encodedData\\n  )\\n    external\\n    isWorkableBySender(AutonolasPriorityFunction.Propagate, msg.sender)\\n    validateAndPayWithCredits(msg.sender)\\n    onlyPropagateCooledDown\\n    nonReentrant\\n  {\\n    _propagate(_connectors, _messageFees, _encodedData);\\n  }\\n\\n  /**\\n   * Wraps the call to processFromRoot() on RootManager. Only allowed to be called by registered relayer.\\n   *\\n   * @param _encodedData Array of encoded data for HubConnector function.\\n   * @param _fromChain Chain ID of the chain the message is coming from.\\n   * @param _l2Hash Hash of the message on the L2 chain.\\n   */\\n  function processFromRoot(\\n    bytes calldata _encodedData,\\n    uint32 _fromChain,\\n    bytes32 _l2Hash\\n  ) external onlyRelayer nonReentrant {\\n    _processFromRoot(_encodedData, _fromChain, _l2Hash);\\n  }\\n\\n  /**\\n   * Wraps the call to processFromRoot() on RootManager and pays with Keep3r credits. Only allowed to be called\\n   * by registered Keep3r.\\n   *\\n   * @param _encodedData Array of encoded data for HubConnector function.\\n   * @param _fromChain Chain ID of the chain the message is coming from.\\n   * @param _l2Hash Hash of the message on the L2 chain.\\n   */\\n  function processFromRootKeep3r(\\n    bytes calldata _encodedData,\\n    uint32 _fromChain,\\n    bytes32 _l2Hash\\n  )\\n    external\\n    isWorkableBySender(AutonolasPriorityFunction.ProcessFromRoot, msg.sender)\\n    validateAndPayWithCredits(msg.sender)\\n  {\\n    _processFromRoot(_encodedData, _fromChain, _l2Hash);\\n  }\\n\\n  /**\\n   * @notice Wraps the `proposeAggregateRoot` function of RootManager\\n   * @dev This contract will validate the signer is a whitelisted proposer on the RootManager,\\n   * and then call `propose` itself. This means this contract must *also* be whitelisted as a\\n   * proposer on the RootManager.\\n   * @param _snapshotId The snapshot id of the root to be proposed.\\n   * @param _aggregateRoot The aggregate root to be proposed.\\n   * @param _snapshotsRoots The roots of the connectors included in the aggregate.\\n   * @param _domains The domains of the snapshots to be proposed.\\n   */\\n  function proposeAggregateRootOnRootKeep3r(\\n    uint256 _snapshotId,\\n    bytes32 _aggregateRoot,\\n    bytes32[] calldata _snapshotsRoots,\\n    uint32[] calldata _domains,\\n    bytes memory _signature\\n  )\\n    external\\n    isWorkableBySender(AutonolasPriorityFunction.ProposeAggregateRoot, msg.sender)\\n    validateAndPayWithCredits(msg.sender)\\n    onlyProposeCooledDown\\n  {\\n    // Validate the signer\\n    _validateProposeSignature(_snapshotId, _aggregateRoot, lastProposeAggregateRootAt, _signature);\\n\\n    // Propose the aggregate\\n    rootManager.proposeAggregateRoot(_snapshotId, _aggregateRoot, _snapshotsRoots, _domains);\\n  }\\n\\n  /**\\n   * @notice Wraps the `proposeAggregateRoot` function of RootManager\\n   * @dev This contract will validate the signer is a whitelisted proposer on the RootManager,\\n   * and then call `propose` itself. This means this contract must *also* be whitelisted as a\\n   * proposer on the RootManager.\\n   * @param _snapshotId The snapshot id of the root to be proposed.\\n   * @param _aggregateRoot The aggregate root to be proposed.\\n   * @param _snapshotsRoots The roots of the connectors included in the aggregate.\\n   * @param _domains The domains of the snapshots to be proposed.\\n   * @param _signature Signature from the approved proposer.\\n   */\\n  function proposeAggregateRootOnRoot(\\n    uint256 _snapshotId,\\n    bytes32 _aggregateRoot,\\n    bytes32[] calldata _snapshotsRoots,\\n    uint32[] calldata _domains,\\n    bytes memory _signature\\n  ) external onlyRelayer onlyProposeCooledDown nonReentrant {\\n    // Validate the signer\\n    _validateProposeSignature(_snapshotId, _aggregateRoot, lastProposeAggregateRootAt, _signature);\\n\\n    // Propose the aggregate root\\n    rootManager.proposeAggregateRoot(_snapshotId, _aggregateRoot, _snapshotsRoots, _domains);\\n  }\\n\\n  /**\\n   * @notice Wraps the `finalizeAndPropagate` function\\n   * @param _connectors Array of connectors: should match exactly the array of `connectors` in storage;\\n   * @param _fees Array of fees in native token for an AMB if required\\n   * @param _encodedData Array of encodedData: extra params for each AMB if required\\n   * @param _proposedAggregateRoot The aggregate root to be proposed.\\n   * @param _endOfDispute The timestamp when the dispute period ends.\\n   */\\n  function finalizeAndPropagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData,\\n    bytes32 _proposedAggregateRoot,\\n    uint256 _endOfDispute\\n  ) external onlyRelayer onlyPropagateCooledDown nonReentrant returns (uint256 _fee) {\\n    // Finalized the proposed aggregate root\\n    _fee = _finalizeAndPropagate(_connectors, _fees, _encodedData, _proposedAggregateRoot, _endOfDispute);\\n  }\\n\\n  /**\\n   * @notice Wraps the `finalize` function on root manager\\n   * @param _proposedAggregateRoot The aggregate root currently proposed\\n   * @param _endOfDispute          The block in which the dispute period for proposed root finalizes\\n   */\\n  function finalizeOnRoot(\\n    bytes32 _proposedAggregateRoot,\\n    uint256 _endOfDispute\\n  ) external onlyFinalizeCooledDown nonReentrant {\\n    // Finalized the proposed aggregate root\\n    rootManager.finalize(_proposedAggregateRoot, _endOfDispute);\\n  }\\n\\n  /**\\n   * @notice Wraps the `finalizeAndPropagate` function\\n   * @param _connectors Array of connectors: should match exactly the array of `connectors` in storage;\\n   * @param _fees Array of fees in native token for an AMB if required\\n   * @param _encodedData Array of encodedData: extra params for each AMB if required\\n   * @param _proposedAggregateRoot The aggregate root to be proposed.\\n   * @param _endOfDispute The timestamp when the dispute period ends.\\n   */\\n  function finalizeAndPropagateKeep3r(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData,\\n    bytes32 _proposedAggregateRoot,\\n    uint256 _endOfDispute\\n  )\\n    external\\n    isWorkableBySender(AutonolasPriorityFunction.Propagate, msg.sender)\\n    validateAndPayWithCredits(msg.sender)\\n    onlyPropagateCooledDown\\n    nonReentrant\\n    returns (uint256 _fee)\\n  {\\n    _fee = _finalizeAndPropagate(_connectors, _fees, _encodedData, _proposedAggregateRoot, _endOfDispute);\\n  }\\n\\n  /**\\n   * @notice Wraps the `sendRootToHubSpoke` function of RootManager\\n   */\\n  function sendRootToHubSpoke() external {\\n    // Send aggregate root to MainnetSpokeConnector\\n    rootManager.sendRootToHubSpoke();\\n  }\\n\\n  // ============ Internal Functions ============\\n  function _setRootManager(address _rootManager) internal {\\n    emit RootManagerChanged(_rootManager, address(rootManager));\\n    rootManager = IRootManager(_rootManager);\\n  }\\n\\n  function _setPropagateCooldown(uint256 _propagateCooldown) internal {\\n    emit PropagateCooldownChanged(_propagateCooldown, propagateCooldown);\\n    propagateCooldown = _propagateCooldown;\\n  }\\n\\n  function _setHubConnector(address _hubConnector, uint32 chain) internal {\\n    emit HubConnectorChanged(_hubConnector, hubConnectors[chain], chain);\\n    hubConnectors[chain] = _hubConnector;\\n  }\\n\\n  function _setAutonolas(address _autonolas) internal {\\n    emit AutonolasChanged(_autonolas, autonolas);\\n    autonolas = _autonolas;\\n  }\\n\\n  function _setAutonolasPriority(AutonolasPriorityFunction _function, uint8 _autonolasPriority) internal {\\n    emit AutonolasPriorityChanged(_function, _autonolasPriority, autonolasPriority[_function]);\\n    autonolasPriority[_function] = _autonolasPriority;\\n  }\\n\\n  function _validateProposeSignature(\\n    uint256 _snapshotId,\\n    bytes32 _aggregateRoot,\\n    uint256 _lastProposeAggregateRootAt,\\n    bytes memory _signature\\n  ) internal view {\\n    // Get the payload\\n    // To prevent signature replay, added `snapshotId`, `lastProposeAggregateRootAt` and `domain`.\\n    // `lastProposeAggregateRootAt` will be strictly increased after proposed, so same signature can't be used again.\\n    // Also domain will prevent the replay from other chains.\\n    bytes32 payload = keccak256(abi.encodePacked(_snapshotId, _aggregateRoot, _lastProposeAggregateRootAt, domain));\\n    // Recover signer\\n    address signer = payload.toEthSignedMessageHash().recover(_signature);\\n    if (!rootManager.allowlistedProposers(signer)) {\\n      revert RelayerProxyHub__validateProposeSignature_notProposer(signer);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calls propagate function on RootManager.\\n   */\\n  function _propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _messageFees,\\n    bytes[] memory _encodedData\\n  ) internal returns (uint256) {\\n    uint256 sum = 0;\\n    uint256 length = _connectors.length;\\n    for (uint32 i; i < length; ) {\\n      sum += _messageFees[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    rootManager.propagate{value: sum}(_connectors, _messageFees, _encodedData);\\n    return sum;\\n  }\\n\\n  function _finalizeAndPropagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData,\\n    bytes32 _proposedAggregateRoot,\\n    uint256 _endOfDispute\\n  ) internal returns (uint256) {\\n    uint256 sum = 0;\\n    uint256 length = _connectors.length;\\n    for (uint32 i; i < length; ) {\\n      sum += _fees[i];\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    rootManager.finalizeAndPropagate{value: sum}(\\n      _connectors,\\n      _fees,\\n      _encodedData,\\n      _proposedAggregateRoot,\\n      _endOfDispute\\n    );\\n    return sum;\\n  }\\n\\n  /**\\n   * @notice Calls processFromRoot function on RootManager.\\n   * Decodes the encodedData and calls the appropriate HubConnector function.\\n   */\\n  function _processFromRoot(bytes calldata encodedData, uint32 fromChain, bytes32 l2Hash) internal {\\n    if (processedRootMessages[fromChain][l2Hash]) {\\n      revert RelayerProxyHub__processFromRoot_alreadyProcessed();\\n    }\\n    if (hubConnectors[fromChain] == address(0)) {\\n      revert RelayerProxyHub__processFromRoot_noHubConnector();\\n    }\\n\\n    processedRootMessages[fromChain][l2Hash] = true;\\n\\n    if (fromChain == ChainIDs.GNOSIS || fromChain == ChainIDs.GNOSIS_CHIADO) {\\n      IGnosisHubConnector.GnosisRootMessageData memory data = abi.decode(\\n        encodedData,\\n        (IGnosisHubConnector.GnosisRootMessageData)\\n      );\\n      IGnosisHubConnector(hubConnectors[fromChain]).executeSignatures(data._data, data._signatures);\\n    } else if (fromChain == ChainIDs.ARBITRUM_ONE || fromChain == ChainIDs.ARBITRUM_GOERLI) {\\n      IArbitrumHubConnector.ArbitrumRootMessageData memory data = abi.decode(\\n        encodedData,\\n        (IArbitrumHubConnector.ArbitrumRootMessageData)\\n      );\\n      IArbitrumHubConnector(hubConnectors[fromChain]).processMessageFromRoot(\\n        data._nodeNum,\\n        data._sendRoot,\\n        data._blockHash,\\n        data._proof,\\n        data._index,\\n        data._message\\n      );\\n    } else if (fromChain == ChainIDs.OPTIMISM || fromChain == ChainIDs.OPTIMISM_GOERLI) {\\n      IOptimismHubConnector.OptimismRootMessageData memory data = abi.decode(\\n        encodedData,\\n        (IOptimismHubConnector.OptimismRootMessageData)\\n      );\\n      IOptimismHubConnector(hubConnectors[fromChain]).processMessageFromRoot(\\n        data._tx,\\n        data._l2OutputIndex,\\n        data._outputRootProof,\\n        data._withdrawalProof\\n      );\\n    } else if (fromChain == ChainIDs.ZKSYNC || fromChain == ChainIDs.ZKSYNC_TEST) {\\n      IZkSyncHubConnector.ZkSyncRootMessageData memory data = abi.decode(\\n        encodedData,\\n        (IZkSyncHubConnector.ZkSyncRootMessageData)\\n      );\\n      IZkSyncHubConnector(hubConnectors[fromChain]).processMessageFromRoot(\\n        data._l2BlockNumber,\\n        data._l2MessageIndex,\\n        data._l2TxNumberInBlock,\\n        data._message,\\n        data._proof\\n      );\\n    } else if (fromChain == ChainIDs.POLYGON_POS || fromChain == ChainIDs.MUMBAI) {\\n      IPolygonHubConnector(hubConnectors[fromChain]).receiveMessage(encodedData);\\n    } else {\\n      revert RelayerProxyHub__processFromRoot_unsupportedChain();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x794e94e71d4413e54fb1cb725f171361da9e7bda4e6278170a794eabc6025a9d\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/interfaces/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {SwapUtils} from \\\"../libraries/SwapUtils.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\nimport {IStableSwap} from \\\"./IStableSwap.sol\\\";\\n\\nimport {IDiamondCut} from \\\"./IDiamondCut.sol\\\";\\nimport {IDiamondLoupe} from \\\"./IDiamondLoupe.sol\\\";\\n\\ninterface IConnext is IDiamondLoupe, IDiamondCut {\\n  // TokenFacet\\n  function canonicalToAdopted(bytes32 _key) external view returns (address);\\n\\n  function canonicalToAdopted(TokenId calldata _canonical) external view returns (address);\\n\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function canonicalToRepresentation(bytes32 _key) external view returns (address);\\n\\n  function canonicalToRepresentation(TokenId calldata _canonical) external view returns (address);\\n\\n  function representationToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function getLocalAndAdoptedToken(bytes32 _id, uint32 _domain) external view returns (address, address);\\n\\n  function approvedAssets(bytes32 _key) external view returns (bool);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n\\n  function adoptedToLocalExternalPools(bytes32 _key) external view returns (IStableSwap);\\n\\n  function adoptedToLocalExternalPools(TokenId calldata _canonical) external view returns (IStableSwap);\\n\\n  function getTokenId(address _candidate) external view returns (TokenId memory);\\n\\n  function getCustodiedAmount(bytes32 _key) external view returns (uint256);\\n\\n  function setupAsset(\\n    TokenId calldata _canonical,\\n    uint8 _canonicalDecimals,\\n    string memory _representationName,\\n    string memory _representationSymbol,\\n    address _adoptedAssetId,\\n    address _stableSwapPool,\\n    uint256 _cap\\n  ) external returns (address);\\n\\n  function setupAssetWithDeployedRepresentation(\\n    TokenId calldata _canonical,\\n    address _representation,\\n    address _adoptedAssetId,\\n    address _stableSwapPool\\n  ) external returns (address);\\n\\n  function addStableSwapPool(TokenId calldata _canonical, address _stableSwapPool) external;\\n\\n  function updateLiquidityCap(TokenId calldata _canonical, uint256 _updated) external;\\n\\n  function removeAssetId(\\n    bytes32 _key,\\n    address _adoptedAssetId,\\n    address _representation\\n  ) external;\\n\\n  function removeAssetId(\\n    TokenId calldata _canonical,\\n    address _adoptedAssetId,\\n    address _representation\\n  ) external;\\n\\n  function updateDetails(\\n    TokenId calldata _canonical,\\n    string memory _name,\\n    string memory _symbol\\n  ) external;\\n\\n  // BaseConnextFacet\\n\\n  // BridgeFacet\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  function addConnextion(uint32 _domain, address _connext) external;\\n\\n  function addSequencer(address _sequencer) external;\\n\\n  function removeSequencer(address _sequencer) external;\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function setXAppConnectionManager(address _xAppConnectionManager) external;\\n\\n  function enrollRemoteRouter(uint32 _domain, bytes32 _router) external;\\n\\n  function enrollCustom(\\n    uint32 _domain,\\n    bytes32 _id,\\n    address _custom\\n  ) external;\\n\\n  // InboxFacet\\n\\n  function handle(\\n    uint32 _origin,\\n    uint32 _nonce,\\n    bytes32 _sender,\\n    bytes memory _message\\n  ) external;\\n\\n  // ProposedOwnableFacet\\n\\n  function owner() external view returns (address);\\n\\n  function routerAllowlistRemoved() external view returns (bool);\\n\\n  function proposed() external view returns (address);\\n\\n  function proposedTimestamp() external view returns (uint256);\\n\\n  function routerAllowlistTimestamp() external view returns (uint256);\\n\\n  function delay() external view returns (uint256);\\n\\n  function paused() external view returns (bool);\\n\\n  function proposeRouterAllowlistRemoval() external;\\n\\n  function removeRouterAllowlist() external;\\n\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  function acceptProposedOwner() external;\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  // RelayerFacet\\n  function approvedRelayers(address _relayer) external view returns (bool);\\n\\n  function relayerFeeVault() external view returns (address);\\n\\n  function setRelayerFeeVault(address _relayerFeeVault) external;\\n\\n  function addRelayer(address _relayer) external;\\n\\n  function removeRelayer(address _relayer) external;\\n\\n  // RoutersFacet\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function approveRouter(address _router) external;\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function unapproveRouter(address _router) external;\\n\\n  function setMaxRoutersPerTransfer(uint256 _newMaxRouters) external;\\n\\n  function setLiquidityFeeNumerator(uint256 _numerator) external;\\n\\n  function approveRouterForPortal(address _router) external;\\n\\n  function unapproveRouterForPortal(address _router) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to\\n  ) external;\\n\\n  // PortalFacet\\n  function getAavePortalDebt(bytes32 _transferId) external view returns (uint256);\\n\\n  function getAavePortalFeeDebt(bytes32 _transferId) external view returns (uint256);\\n\\n  function aavePool() external view returns (address);\\n\\n  function aavePortalFee() external view returns (uint256);\\n\\n  function setAavePool(address _aavePool) external;\\n\\n  function setAavePortalFee(uint256 _aavePortalFeeNumerator) external;\\n\\n  function repayAavePortal(\\n    TransferInfo calldata _params,\\n    uint256 _backingAmount,\\n    uint256 _feeAmount,\\n    uint256 _maxIn\\n  ) external;\\n\\n  function repayAavePortalFor(\\n    TransferInfo calldata _params,\\n    uint256 _backingAmount,\\n    uint256 _feeAmount\\n  ) external;\\n\\n  // StableSwapFacet\\n  function getSwapStorage(bytes32 canonicalId) external view returns (SwapUtils.Swap memory);\\n\\n  function getSwapLPToken(bytes32 canonicalId) external view returns (address);\\n\\n  function getSwapA(bytes32 canonicalId) external view returns (uint256);\\n\\n  function getSwapAPrecise(bytes32 canonicalId) external view returns (uint256);\\n\\n  function getSwapToken(bytes32 canonicalId, uint8 index) external view returns (IERC20);\\n\\n  function getSwapTokenIndex(bytes32 canonicalId, address tokenAddress) external view returns (uint8);\\n\\n  function getSwapTokenBalance(bytes32 canonicalId, uint8 index) external view returns (uint256);\\n\\n  function getSwapVirtualPrice(bytes32 canonicalId) external view returns (uint256);\\n\\n  function calculateSwap(\\n    bytes32 canonicalId,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateSwapTokenAmount(\\n    bytes32 canonicalId,\\n    uint256[] calldata amounts,\\n    bool deposit\\n  ) external view returns (uint256);\\n\\n  function calculateRemoveSwapLiquidity(bytes32 canonicalId, uint256 amount) external view returns (uint256[] memory);\\n\\n  function calculateRemoveSwapLiquidityOneToken(\\n    bytes32 canonicalId,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) external view returns (uint256);\\n\\n  function getSwapAdminBalance(bytes32 canonicalId, uint256 index) external view returns (uint256);\\n\\n  function swap(\\n    bytes32 canonicalId,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function swapExact(\\n    bytes32 canonicalId,\\n    uint256 amountIn,\\n    address assetIn,\\n    address assetOut,\\n    uint256 minAmountOut,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function swapExactOut(\\n    bytes32 canonicalId,\\n    uint256 amountOut,\\n    address assetIn,\\n    address assetOut,\\n    uint256 maxAmountIn,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function addSwapLiquidity(\\n    bytes32 canonicalId,\\n    uint256[] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeSwapLiquidity(\\n    bytes32 canonicalId,\\n    uint256 amount,\\n    uint256[] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[] memory);\\n\\n  function removeSwapLiquidityOneToken(\\n    bytes32 canonicalId,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeSwapLiquidityImbalance(\\n    bytes32 canonicalId,\\n    uint256[] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  // SwapAdminFacet\\n\\n  function initializeSwap(\\n    bytes32 _canonicalId,\\n    IERC20[] memory _pooledTokens,\\n    uint8[] memory decimals,\\n    string memory lpTokenName,\\n    string memory lpTokenSymbol,\\n    uint256 _a,\\n    uint256 _fee,\\n    uint256 _adminFee\\n  ) external;\\n\\n  function withdrawSwapAdminFees(bytes32 canonicalId) external;\\n\\n  function setSwapAdminFee(bytes32 canonicalId, uint256 newAdminFee) external;\\n\\n  function setSwapFee(bytes32 canonicalId, uint256 newSwapFee) external;\\n\\n  function rampA(\\n    bytes32 canonicalId,\\n    uint256 futureA,\\n    uint256 futureTime\\n  ) external;\\n\\n  function stopRampA(bytes32 canonicalId) external;\\n\\n  function lpTokenTargetAddress() external view returns (address);\\n\\n  function updateLpTokenTarget(address newAddress) external;\\n}\\n\",\"keccak256\":\"0x9af3b8c8daeee5ac3d431b8a1631e6e9aad600424a1932b2bced2e24866c699b\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n  enum FacetCutAction {\\n    Add,\\n    Replace,\\n    Remove\\n  }\\n  // Add=0, Replace=1, Remove=2\\n\\n  struct FacetCut {\\n    address facetAddress;\\n    FacetCutAction action;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Propose to add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function proposeDiamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCutProposed(FacetCut[] _diamondCut, address _init, bytes _calldata, uint256 deadline);\\n\\n  /// @notice Add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function diamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  /// @notice Propose to add/replace/remove any number of functions and optionally execute\\n  ///         a function with delegatecall\\n  /// @param _diamondCut Contains the facet addresses and function selectors\\n  /// @param _init The address of the contract or facet to execute _calldata\\n  /// @param _calldata A function call, including function selector and arguments\\n  ///                  _calldata is executed with delegatecall on _init\\n  function rescindDiamondCut(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external;\\n\\n  /**\\n   * @notice Returns the acceptance time for a given proposal\\n   * @param _diamondCut Contains the facet addresses and function selectors\\n   * @param _init The address of the contract or facet to execute _calldata\\n   * @param _calldata A function call, including function selector and arguments _calldata is\\n   * executed with delegatecall on _init\\n   */\\n  function getAcceptanceTime(\\n    FacetCut[] calldata _diamondCut,\\n    address _init,\\n    bytes calldata _calldata\\n  ) external returns (uint256);\\n\\n  event DiamondCutRescinded(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x4f0bf252cb5541d7ffd04fc49abdc7d2f2c838ba65f108201f787851c7b238fb\",\"license\":\"MIT\"},\"contracts/core/connext/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n  /// These functions are expected to be called frequently\\n  /// by tools.\\n\\n  struct Facet {\\n    address facetAddress;\\n    bytes4[] functionSelectors;\\n  }\\n\\n  /// @notice Gets all facet addresses and their four byte function selectors.\\n  /// @return facets_ Facet\\n  function facets() external view returns (Facet[] memory facets_);\\n\\n  /// @notice Gets all the function selectors supported by a specific facet.\\n  /// @param _facet The facet address.\\n  /// @return facetFunctionSelectors_\\n  function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n  /// @notice Get all the facet addresses used by a diamond.\\n  /// @return facetAddresses_\\n  function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n  /// @notice Gets the facet that supports the given selector.\\n  /// @dev If facet is not found return address(0).\\n  /// @param _functionSelector The function selector.\\n  /// @return facetAddress_ The facet address.\\n  function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0xc408c13dc42d9526b1f292bad3f3915efa15c2133f509d90a45422b5f6cf829c\",\"license\":\"MIT\"},\"contracts/core/connext/interfaces/IStableSwap.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStableSwap {\\n  /*** EVENTS ***/\\n\\n  // events replicated from SwapUtils to make the ABI easier for dumb\\n  // clients\\n  event TokenSwap(address indexed buyer, uint256 tokensSold, uint256 tokensBought, uint128 soldId, uint128 boughtId);\\n  event AddLiquidity(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(uint256 newAdminFee);\\n  event NewSwapFee(uint256 newSwapFee);\\n  event NewWithdrawFee(uint256 newWithdrawFee);\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  function swap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function swapExact(\\n    uint256 amountIn,\\n    address assetIn,\\n    address assetOut,\\n    uint256 minAmountOut,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function swapExactOut(\\n    uint256 amountOut,\\n    address assetIn,\\n    address assetOut,\\n    uint256 maxAmountIn,\\n    uint256 deadline\\n  ) external payable returns (uint256);\\n\\n  function getA() external view returns (uint256);\\n\\n  function getToken(uint8 index) external view returns (IERC20);\\n\\n  function getTokenIndex(address tokenAddress) external view returns (uint8);\\n\\n  function getTokenBalance(uint8 index) external view returns (uint256);\\n\\n  function getVirtualPrice() external view returns (uint256);\\n\\n  // min return calculation functions\\n  function calculateSwap(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function calculateSwapOut(\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy\\n  ) external view returns (uint256);\\n\\n  function calculateSwapFromAddress(\\n    address assetIn,\\n    address assetOut,\\n    uint256 amountIn\\n  ) external view returns (uint256);\\n\\n  function calculateSwapOutFromAddress(\\n    address assetIn,\\n    address assetOut,\\n    uint256 amountOut\\n  ) external view returns (uint256);\\n\\n  function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view returns (uint256);\\n\\n  function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[] memory);\\n\\n  function calculateRemoveLiquidityOneToken(uint256 tokenAmount, uint8 tokenIndex)\\n    external\\n    view\\n    returns (uint256 availableTokenAmount);\\n\\n  // state modifying functions\\n  function initialize(\\n    IERC20[] memory pooledTokens,\\n    uint8[] memory decimals,\\n    string memory lpTokenName,\\n    string memory lpTokenSymbol,\\n    uint256 a,\\n    uint256 fee,\\n    uint256 adminFee,\\n    address lpTokenTargetAddress\\n  ) external;\\n\\n  function addLiquidity(\\n    uint256[] calldata amounts,\\n    uint256 minToMint,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidity(\\n    uint256 amount,\\n    uint256[] calldata minAmounts,\\n    uint256 deadline\\n  ) external returns (uint256[] memory);\\n\\n  function removeLiquidityOneToken(\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n\\n  function removeLiquidityImbalance(\\n    uint256[] calldata amounts,\\n    uint256 maxBurnAmount,\\n    uint256 deadline\\n  ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc58596b5187e67d0d983d44aa5a98901a6a66fc770f157b556f99e243ed6d2d6\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/AmplificationUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {SwapUtils} from \\\"./SwapUtils.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title AmplificationUtils library\\n * @notice A library to calculate and ramp the A parameter of a given `SwapUtils.Swap` struct.\\n * This library assumes the struct is fully validated.\\n */\\nlibrary AmplificationUtils {\\n  event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n  event StopRampA(uint256 currentA, uint256 time);\\n\\n  /**\\n   * @notice Return A, the amplification coefficient * n ** (n - 1)\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter\\n   */\\n  function getA(SwapUtils.Swap storage self) internal view returns (uint256) {\\n    return _getAPrecise(self) / Constants.A_PRECISION;\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return A parameter in its raw precision form\\n   */\\n  function getAPrecise(SwapUtils.Swap storage self) internal view returns (uint256) {\\n    return _getAPrecise(self);\\n  }\\n\\n  /**\\n   * @notice Return A in its raw precision\\n   * @dev See the StableSwap paper for details\\n   * @param self Swap struct to read from\\n   * @return currentA A parameter in its raw precision form\\n   */\\n  function _getAPrecise(SwapUtils.Swap storage self) internal view returns (uint256 currentA) {\\n    uint256 t1 = self.futureATime; // time when ramp is finished\\n    currentA = self.futureA; // final A value when ramp is finished\\n    uint256 a0 = self.initialA; // initial A value when ramp is started\\n\\n    if (a0 != currentA && block.timestamp < t1) {\\n      uint256 t0 = self.initialATime; // time when ramp is started\\n      assembly {\\n        currentA := div(add(mul(a0, sub(t1, timestamp())), mul(currentA, sub(timestamp(), t0))), sub(t1, t0))\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n   * Checks if the change is too rapid, and commits the new A value only when it falls under\\n   * the limit range.\\n   * @param self Swap struct to update\\n   * @param futureA_ the new A to ramp towards\\n   * @param futureTime_ timestamp when the new A should be reached\\n   */\\n  function rampA(\\n    SwapUtils.Swap storage self,\\n    uint256 futureA_,\\n    uint256 futureTime_\\n  ) internal {\\n    require(block.timestamp >= self.initialATime + Constants.MIN_RAMP_DELAY, \\\"Wait 1 day before starting ramp\\\");\\n    require(futureTime_ >= block.timestamp + Constants.MIN_RAMP_TIME, \\\"Insufficient ramp time\\\");\\n    require(futureA_ != 0 && futureA_ < Constants.MAX_A, \\\"futureA_ must be > 0 and < MAX_A\\\");\\n\\n    uint256 initialAPrecise = _getAPrecise(self);\\n    uint256 futureAPrecise = futureA_ * Constants.A_PRECISION;\\n    require(initialAPrecise != futureAPrecise, \\\"!valid ramp\\\");\\n\\n    if (futureAPrecise < initialAPrecise) {\\n      require(futureAPrecise * Constants.MAX_A_CHANGE >= initialAPrecise, \\\"futureA_ is too small\\\");\\n    } else {\\n      require(futureAPrecise <= initialAPrecise * Constants.MAX_A_CHANGE, \\\"futureA_ is too large\\\");\\n    }\\n\\n    self.initialA = initialAPrecise;\\n    self.futureA = futureAPrecise;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = futureTime_;\\n\\n    emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureTime_);\\n  }\\n\\n  /**\\n   * @notice Stops ramping A immediately. Once this function is called, rampA()\\n   * cannot be called for another 24 hours\\n   * @param self Swap struct to update\\n   */\\n  function stopRampA(SwapUtils.Swap storage self) internal {\\n    require(self.futureATime > block.timestamp, \\\"Ramp is already stopped\\\");\\n\\n    uint256 currentA = _getAPrecise(self);\\n    self.initialA = currentA;\\n    self.futureA = currentA;\\n    self.initialATime = block.timestamp;\\n    self.futureATime = block.timestamp;\\n\\n    emit StopRampA(currentA, block.timestamp);\\n  }\\n}\\n\",\"keccak256\":\"0x617ae0d3ae92d6b0b5fb6e3357bcd37e6ab67f02bfde9c3f97d428ee9f777f59\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/AssetLogic.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport {TypeCasts} from \\\"../../../shared/libraries/TypeCasts.sol\\\";\\n\\nimport {IStableSwap} from \\\"../interfaces/IStableSwap.sol\\\";\\n\\nimport {LibConnextStorage, AppStorage, TokenConfig} from \\\"./LibConnextStorage.sol\\\";\\nimport {SwapUtils} from \\\"./SwapUtils.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\nimport {TokenId} from \\\"./TokenId.sol\\\";\\n\\nlibrary AssetLogic {\\n  // ============ Libraries ============\\n\\n  using SwapUtils for SwapUtils.Swap;\\n  using SafeERC20 for IERC20Metadata;\\n\\n  // ============ Errors ============\\n\\n  error AssetLogic__handleIncomingAsset_nativeAssetNotSupported();\\n  error AssetLogic__handleIncomingAsset_feeOnTransferNotSupported();\\n  error AssetLogic__handleOutgoingAsset_notNative();\\n  error AssetLogic__getTokenIndexFromStableSwapPool_notExist();\\n  error AssetLogic__getConfig_notRegistered();\\n  error AssetLogic__swapAsset_externalStableSwapPoolDoesNotExist();\\n\\n  // ============ Internal: Handle Transfer ============\\n\\n  function getConfig(bytes32 _key) internal view returns (TokenConfig storage) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n    TokenConfig storage config = s.tokenConfigs[_key];\\n\\n    // Sanity check: not empty\\n    // NOTE: adopted decimals will *always* be nonzero (or reflect what is onchain\\n    // for the asset). The same is not true for the representation assets, which\\n    // will always have 0 decimals on the canonical domain\\n    if (config.adoptedDecimals < 1) {\\n      revert AssetLogic__getConfig_notRegistered();\\n    }\\n\\n    return config;\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from msg.sender to the Connext contract.\\n   * @dev Does NOT work with fee-on-transfer tokens: will revert.\\n   *\\n   * @param _asset - The address of the ERC20 token to transfer.\\n   * @param _amount - The specified amount to transfer.\\n   */\\n  function handleIncomingAsset(address _asset, uint256 _amount) internal {\\n    // Sanity check: if amount is 0, do nothing.\\n    if (_amount == 0) {\\n      return;\\n    }\\n    // Sanity check: asset address is not zero.\\n    if (_asset == address(0)) {\\n      revert AssetLogic__handleIncomingAsset_nativeAssetNotSupported();\\n    }\\n\\n    IERC20Metadata asset = IERC20Metadata(_asset);\\n\\n    // Record starting amount to validate correct amount is transferred.\\n    uint256 starting = asset.balanceOf(address(this));\\n\\n    // Transfer asset to contract.\\n    asset.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    // Ensure correct amount was transferred (i.e. this was not a fee-on-transfer token).\\n    if (asset.balanceOf(address(this)) - starting != _amount) {\\n      revert AssetLogic__handleIncomingAsset_feeOnTransferNotSupported();\\n    }\\n  }\\n\\n  /**\\n   * @notice Handles transferring funds from the Connext contract to a specified address\\n   * @param _asset - The address of the ERC20 token to transfer.\\n   * @param _to - The recipient address that will receive the funds.\\n   * @param _amount - The amount to withdraw from contract.\\n   */\\n  function handleOutgoingAsset(\\n    address _asset,\\n    address _to,\\n    uint256 _amount\\n  ) internal {\\n    // Sanity check: if amount is 0, do nothing.\\n    if (_amount == 0) {\\n      return;\\n    }\\n    // Sanity check: asset address is not zero.\\n    if (_asset == address(0)) revert AssetLogic__handleOutgoingAsset_notNative();\\n\\n    // Transfer ERC20 asset to target recipient.\\n    SafeERC20.safeTransfer(IERC20Metadata(_asset), _to, _amount);\\n  }\\n\\n  // ============ Internal: StableSwap Pools ============\\n\\n  /**\\n   * @notice Return the index of the given token address. Reverts if no matching\\n   * token is found.\\n   * @param key the hash of the canonical id and domain\\n   * @param tokenAddress address of the token\\n   * @return the index of the given token address\\n   */\\n  function getTokenIndexFromStableSwapPool(bytes32 key, address tokenAddress) internal view returns (uint8) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n    uint8 index = s.tokenIndexes[key][tokenAddress];\\n    if (address(s.swapStorages[key].pooledTokens[index]) != tokenAddress)\\n      revert AssetLogic__getTokenIndexFromStableSwapPool_notExist();\\n    return index;\\n  }\\n\\n  // ============ Internal: Handle Swap ============\\n\\n  /**\\n   * @notice Swaps an adopted asset to the local (representation or canonical) asset.\\n   * @dev Will not swap if the asset passed in is the local asset.\\n   * @param _key - The hash of canonical id and domain.\\n   * @param _asset - The address of the adopted asset to swap into the local asset.\\n   * @param _amount - The amount of the adopted asset to swap.\\n   * @param _slippage - The maximum amount of slippage user will take on from _amount in BPS.\\n   * @return uint256 The amount of local asset received from swap.\\n   */\\n  function swapToLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    address _local,\\n    uint256 _amount,\\n    uint256 _slippage\\n  ) internal returns (uint256) {\\n    // If there's no amount, no need to swap.\\n    if (_amount == 0) {\\n      return 0;\\n    }\\n\\n    // Check the case where the adopted asset *is* the local asset. If so, no need to swap.\\n    if (_local == _asset) {\\n      return _amount;\\n    }\\n\\n    // Get the configs.\\n    TokenConfig storage config = getConfig(_key);\\n\\n    // Swap the asset to the proper local asset.\\n    (uint256 out, ) = _swapAsset(\\n      _key,\\n      _asset,\\n      _local,\\n      _amount,\\n      calculateSlippageBoundary(config.adoptedDecimals, config.representationDecimals, _amount, _slippage)\\n    );\\n    return out;\\n  }\\n\\n  /**\\n   * @notice Swaps a local bridge asset for the adopted asset using the stored stable swap\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key the hash of the canonical id and domain\\n   * @param _asset - The address of the local asset to swap into the adopted asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @param _slippage - The minimum amount of slippage user will take on from _amount in BPS\\n   * @param _normalizedIn - The amount sent in on xcall to take the slippage from, in 18 decimals\\n   * by convention\\n   * @return The amount of adopted asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapFromLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    uint256 _normalizedIn\\n  ) internal returns (uint256, address) {\\n    // Get the token config.\\n    TokenConfig storage config = getConfig(_key);\\n    address adopted = config.adopted;\\n\\n    // If the adopted asset is the local asset, no need to swap.\\n    if (adopted == _asset) {\\n      return (_amount, adopted);\\n    }\\n\\n    // If there's no amount, no need to swap.\\n    if (_amount == 0) {\\n      return (_amount, adopted);\\n    }\\n\\n    // Swap the asset to the proper local asset\\n    return\\n      _swapAsset(\\n        _key,\\n        _asset,\\n        adopted,\\n        _amount,\\n        // NOTE: To get the slippage boundary here, you must take the slippage % off of the\\n        // normalized amount in (at 18 decimals by convention), then convert that amount\\n        // to the proper decimals of adopted.\\n        calculateSlippageBoundary(\\n          Constants.DEFAULT_NORMALIZED_DECIMALS,\\n          config.adoptedDecimals,\\n          _normalizedIn,\\n          _slippage\\n        )\\n      );\\n  }\\n\\n  /**\\n   * @notice Swaps a local bridge asset for the adopted asset using the stored stable swap\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key the hash of the canonical id and domain\\n   * @param _asset - The address of the local asset to swap into the adopted asset\\n   * @param _amount - The exact amount to receive out of the swap\\n   * @param _maxIn - The most you will supply to the swap\\n   * @return The amount of local asset put into  swap\\n   * @return The address of asset received post-swap\\n   */\\n  function swapFromLocalAssetIfNeededForExactOut(\\n    bytes32 _key,\\n    address _asset,\\n    uint256 _amount,\\n    uint256 _maxIn\\n  ) internal returns (uint256, address) {\\n    TokenConfig storage config = getConfig(_key);\\n\\n    // If the adopted asset is the local asset, no need to swap.\\n    address adopted = config.adopted;\\n    if (adopted == _asset) {\\n      return (_amount, adopted);\\n    }\\n\\n    return _swapAssetOut(_key, _asset, adopted, _amount, _maxIn);\\n  }\\n\\n  /**\\n   * @notice Swaps assetIn to assetOut using the stored stable swap or internal swap pool.\\n   * @dev Will not swap if the asset passed in is the adopted asset\\n   * @param _key - The hash of canonical id and domain.\\n   * @param _assetIn - The address of the from asset\\n   * @param _assetOut - The address of the to asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @param _minOut - The minimum amount of `_assetOut` the user will accept\\n   * @return The amount of asset received\\n   * @return The address of asset received\\n   */\\n  function _swapAsset(\\n    bytes32 _key,\\n    address _assetIn,\\n    address _assetOut,\\n    uint256 _amount,\\n    uint256 _minOut\\n  ) internal returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // Retrieve internal swap pool reference.\\n    SwapUtils.Swap storage ipool = s.swapStorages[_key];\\n\\n    if (ipool.exists()) {\\n      // Swap via the internal pool.\\n      return (\\n        ipool.swapInternal(\\n          getTokenIndexFromStableSwapPool(_key, _assetIn),\\n          getTokenIndexFromStableSwapPool(_key, _assetOut),\\n          _amount,\\n          _minOut\\n        ),\\n        _assetOut\\n      );\\n    } else {\\n      // Otherwise, swap via external stableswap pool.\\n      IStableSwap pool = IStableSwap(getConfig(_key).adoptedToLocalExternalPools);\\n\\n      IERC20Metadata assetIn = IERC20Metadata(_assetIn);\\n\\n      assetIn.safeApprove(address(pool), 0);\\n      assetIn.safeIncreaseAllowance(address(pool), _amount);\\n\\n      // NOTE: If pool is not registered here, then this call will revert.\\n      return (\\n        pool.swapExact(_amount, _assetIn, _assetOut, _minOut, block.timestamp + Constants.DEFAULT_DEADLINE_EXTENSION),\\n        _assetOut\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Swaps assetIn to assetOut using the stored stable swap or internal swap pool.\\n   * @param _key - The hash of the canonical id and domain.\\n   * @param _assetIn - The address of the from asset.\\n   * @param _assetOut - The address of the to asset.\\n   * @param _amountOut - The amount of the _assetOut to swap.\\n   * @param _maxIn - The most you will supply to the swap.\\n   * @return amountIn The amount of assetIn. Will be 0 if the swap was unsuccessful (slippage\\n   * too high).\\n   * @return assetOut The address of asset received.\\n   */\\n  function _swapAssetOut(\\n    bytes32 _key,\\n    address _assetIn,\\n    address _assetOut,\\n    uint256 _amountOut,\\n    uint256 _maxIn\\n  ) internal returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // Retrieve internal swap pool reference. If it doesn't exist, we'll resort to using an\\n    // external stableswap below.\\n    SwapUtils.Swap storage ipool = s.swapStorages[_key];\\n\\n    // Swap the asset to the proper local asset.\\n    // NOTE: IFF slippage was too high to perform swap in either case: success = false, amountIn = 0\\n    if (ipool.exists()) {\\n      // Swap via the internal pool.\\n      return (\\n        ipool.swapInternalOut(\\n          getTokenIndexFromStableSwapPool(_key, _assetIn),\\n          getTokenIndexFromStableSwapPool(_key, _assetOut),\\n          _amountOut,\\n          _maxIn\\n        ),\\n        _assetOut\\n      );\\n    } else {\\n      // Otherwise, swap via external stableswap pool.\\n      // NOTE: This call will revert if the external stableswap pool doesn't exist.\\n      IStableSwap pool = IStableSwap(getConfig(_key).adoptedToLocalExternalPools);\\n      address poolAddress = address(pool);\\n\\n      // Perform the swap.\\n      // Edge case with some tokens: Example USDT in ETH Mainnet, after the backUnbacked call\\n      // there could be a remaining allowance if not the whole amount is pulled by aave.\\n      // Later, if we try to increase the allowance it will fail. USDT demands if allowance\\n      // is not 0, it has to be set to 0 first.\\n      // Example: https://github.com/aave/aave-v3-periphery/blob/ca184e5278bcbc10d28c3dbbc604041d7cfac50b/contracts/adapters/paraswap/ParaSwapRepayAdapter.sol#L138-L140\\n      IERC20Metadata assetIn = IERC20Metadata(_assetIn);\\n\\n      assetIn.safeApprove(poolAddress, 0);\\n      assetIn.safeIncreaseAllowance(poolAddress, _maxIn);\\n\\n      uint256 out = pool.swapExactOut(\\n        _amountOut,\\n        _assetIn,\\n        _assetOut,\\n        _maxIn,\\n        block.timestamp + Constants.DEFAULT_DEADLINE_EXTENSION\\n      );\\n\\n      // Reset allowance\\n      assetIn.safeApprove(poolAddress, 0);\\n      return (out, _assetOut);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate amount of tokens you receive on a local bridge asset for the adopted asset\\n   * using the stored stable swap\\n   * @dev Will not use the stored stable swap if the asset passed in is the local asset\\n   * @param _key - The hash of the canonical id and domain\\n   * @param _asset - The address of the local asset to swap into the local asset\\n   * @param _amount - The amount of the local asset to swap\\n   * @return The amount of local asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function calculateSwapFromLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    uint256 _amount\\n  ) internal view returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // If the adopted asset is the local asset, no need to swap.\\n    TokenConfig storage config = getConfig(_key);\\n    address adopted = config.adopted;\\n    if (adopted == _asset) {\\n      return (_amount, adopted);\\n    }\\n\\n    SwapUtils.Swap storage ipool = s.swapStorages[_key];\\n\\n    // Calculate the swap using the appropriate pool.\\n    if (ipool.exists()) {\\n      // Calculate with internal swap pool.\\n      uint8 tokenIndexIn = getTokenIndexFromStableSwapPool(_key, _asset);\\n      uint8 tokenIndexOut = getTokenIndexFromStableSwapPool(_key, adopted);\\n      return (ipool.calculateSwap(tokenIndexIn, tokenIndexOut, _amount), adopted);\\n    } else {\\n      // Otherwise, try to calculate with external pool.\\n      IStableSwap pool = IStableSwap(config.adoptedToLocalExternalPools);\\n      // NOTE: This call will revert if no external pool exists.\\n      return (pool.calculateSwapFromAddress(_asset, adopted, _amount), adopted);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate amount of tokens you receive of a local bridge asset for the adopted asset\\n   * using the stored stable swap\\n   * @dev Will not use the stored stable swap if the asset passed in is the local asset\\n   * @param _asset - The address of the asset to swap into the local asset\\n   * @param _amount - The amount of the asset to swap\\n   * @return The amount of local asset received from swap\\n   * @return The address of asset received post-swap\\n   */\\n  function calculateSwapToLocalAssetIfNeeded(\\n    bytes32 _key,\\n    address _asset,\\n    address _local,\\n    uint256 _amount\\n  ) internal view returns (uint256, address) {\\n    AppStorage storage s = LibConnextStorage.connextStorage();\\n\\n    // If the asset is the local asset, no swap needed\\n    if (_asset == _local) {\\n      return (_amount, _local);\\n    }\\n\\n    SwapUtils.Swap storage ipool = s.swapStorages[_key];\\n\\n    // Calculate the swap using the appropriate pool.\\n    if (ipool.exists()) {\\n      // if internal swap pool exists\\n      uint8 tokenIndexIn = getTokenIndexFromStableSwapPool(_key, _asset);\\n      uint8 tokenIndexOut = getTokenIndexFromStableSwapPool(_key, _local);\\n      return (ipool.calculateSwap(tokenIndexIn, tokenIndexOut, _amount), _local);\\n    } else {\\n      IStableSwap pool = IStableSwap(getConfig(_key).adoptedToLocalExternalPools);\\n\\n      return (pool.calculateSwapFromAddress(_asset, _local, _amount), _local);\\n    }\\n  }\\n\\n  // ============ Internal: Token ID Helpers ============\\n\\n  /**\\n   * @notice Gets the canonical information for a given candidate.\\n   * @dev First checks the `address(0)` convention, then checks if the asset given is the\\n   * adopted asset, then calculates the local address.\\n   * @return TokenId The canonical token ID information for the given candidate.\\n   */\\n  function getCanonicalTokenId(address _candidate, AppStorage storage s) internal view returns (TokenId memory) {\\n    TokenId memory _canonical;\\n    // If candidate is address(0), return an empty `_canonical`.\\n    if (_candidate == address(0)) {\\n      return _canonical;\\n    }\\n\\n    // Check to see if candidate is an adopted asset.\\n    _canonical = s.adoptedToCanonical[_candidate];\\n    if (_canonical.domain != 0) {\\n      // Candidate is an adopted asset, return canonical info.\\n      return _canonical;\\n    }\\n\\n    // Candidate was not adopted; it could be the local address.\\n    // IFF this domain is the canonical domain, then the local == canonical.\\n    // Otherwise, it will be the representation asset.\\n    if (isLocalOrigin(_candidate, s)) {\\n      // The token originates on this domain, canonical information is the information\\n      // of the candidate\\n      _canonical.domain = s.domain;\\n      _canonical.id = TypeCasts.addressToBytes32(_candidate);\\n    } else {\\n      // on a remote domain, return the representation\\n      _canonical = s.representationToCanonical[_candidate];\\n    }\\n    return _canonical;\\n  }\\n\\n  /**\\n   * @notice Determine if token is of local origin (i.e. it is a locally originating contract,\\n   * and NOT a token deployed by the bridge).\\n   * @param s AppStorage instance.\\n   * @return bool true if token is locally originating, false otherwise.\\n   */\\n  function isLocalOrigin(address _token, AppStorage storage s) internal view returns (bool) {\\n    // If the token contract WAS deployed by the bridge, it will be stored in this mapping.\\n    // If so, the token is NOT of local origin.\\n    if (s.representationToCanonical[_token].domain != 0) {\\n      return false;\\n    }\\n    // If the contract was NOT deployed by the bridge, but the contract does exist, then it\\n    // IS of local origin. Returns true if code exists at `_addr`.\\n    return _token.code.length != 0;\\n  }\\n\\n  /**\\n   * @notice Get the local asset address for a given canonical key, id, and domain.\\n   * @param _key - The hash of canonical id and domain.\\n   * @param _id Canonical ID.\\n   * @param _domain Canonical domain.\\n   * @param s AppStorage instance.\\n   * @return address of the the local asset.\\n   */\\n  function getLocalAsset(\\n    bytes32 _key,\\n    bytes32 _id,\\n    uint32 _domain,\\n    AppStorage storage s\\n  ) internal view returns (address) {\\n    if (_domain == s.domain) {\\n      // Token is of local origin\\n      return TypeCasts.bytes32ToAddress(_id);\\n    } else {\\n      // Token is a representation of a token of remote origin\\n      return getConfig(_key).representation;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the hash of canonical ID and domain.\\n   * @dev This hash is used as the key for many asset-related mappings.\\n   * @param _id Canonical ID.\\n   * @param _domain Canonical domain.\\n   * @return bytes32 Canonical hash, used as key for accessing token info from mappings.\\n   */\\n  function calculateCanonicalHash(bytes32 _id, uint32 _domain) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(_id, _domain));\\n  }\\n\\n  // ============ Internal: Math ============\\n\\n  /**\\n   * @notice This function calculates slippage as a %age of the amount in, and normalizes\\n   * That to the `_out` decimals.\\n   *\\n   * @dev This *ONLY* works for 1:1 assets\\n   *\\n   * @param _in The decimals of the asset in / amount in\\n   * @param _out The decimals of the target asset\\n   * @param _amountIn The starting amount for the swap\\n   * @param _slippage The slippage allowed for the swap, in BPS\\n   * @return uint256 The minimum amount out for the swap\\n   */\\n  function calculateSlippageBoundary(\\n    uint8 _in,\\n    uint8 _out,\\n    uint256 _amountIn,\\n    uint256 _slippage\\n  ) internal pure returns (uint256) {\\n    if (_amountIn == 0) {\\n      return 0;\\n    }\\n    // Get the min recieved (in same decimals as _amountIn)\\n    uint256 min = (_amountIn * (Constants.BPS_FEE_DENOMINATOR - _slippage)) / Constants.BPS_FEE_DENOMINATOR;\\n    return normalizeDecimals(_in, _out, min);\\n  }\\n\\n  /**\\n   * @notice This function translates the _amount in _in decimals\\n   * to _out decimals\\n   *\\n   * @param _in The decimals of the asset in / amount in\\n   * @param _out The decimals of the target asset\\n   * @param _amount The value to normalize to the `_out` decimals\\n   * @return uint256 Normalized decimals.\\n   */\\n  function normalizeDecimals(\\n    uint8 _in,\\n    uint8 _out,\\n    uint256 _amount\\n  ) internal pure returns (uint256) {\\n    if (_in == _out) {\\n      return _amount;\\n    }\\n    // Convert this value to the same decimals as _out\\n    uint256 normalized;\\n    if (_in < _out) {\\n      normalized = _amount * (10**(_out - _in));\\n    } else {\\n      normalized = _amount / (10**(_in - _out));\\n    }\\n    return normalized;\\n  }\\n}\\n\",\"keccak256\":\"0x11b201d50d6c6ccf411a879fc9f95491bcc21da9607d5aad78df95192e937316\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/ChainIDs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nlibrary ChainIDs {\\n  uint32 public constant MAINNET = 1;\\n  uint32 public constant GOERLI = 5;\\n  uint32 public constant OPTIMISM = 10;\\n  uint32 public constant BNB = 56;\\n  uint32 public constant GNOSIS = 100;\\n  uint32 public constant POLYGON_POS = 137;\\n  uint32 public constant ZKSYNC_TEST = 280;\\n  uint32 public constant ZKSYNC = 324;\\n  uint32 public constant OPTIMISM_GOERLI = 420;\\n  uint32 public constant POLYGON_ZKEVM = 1101;\\n  uint32 public constant POLYGON_ZKEVM_TEST = 1442;\\n  uint32 public constant GNOSIS_CHIADO = 10200;\\n  uint32 public constant ARBITRUM_ONE = 42161;\\n  uint32 public constant LINEA_TEST = 59140;\\n  uint32 public constant LINEA = 59144;\\n  uint32 public constant MUMBAI = 80001;\\n  uint32 public constant ARBITRUM_GOERLI = 421613;\\n}\\n\",\"keccak256\":\"0x5a824f1c2614593e451ef0b2fa1211a17d3aad33b807d9b7d19c595a58a8a667\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nlibrary Constants {\\n  // ============= Initial Values =============\\n\\n  /**\\n   * @notice Sets the initial lp fee at 5 bps\\n   */\\n  uint256 public constant INITIAL_LIQUIDITY_FEE_NUMERATOR = 9_995;\\n\\n  /**\\n   * @notice Sets the initial max routers per transfer\\n   */\\n  uint256 public constant INITIAL_MAX_ROUTERS = 5;\\n\\n  /**\\n   * @notice Sets the initial max routers per transfer\\n   */\\n  uint16 public constant INITIAL_AAVE_REFERRAL_CODE = 0;\\n\\n  // =============\\n\\n  // ============= Unchangeable Values =============\\n  // ============= Facets\\n\\n  /**\\n   * @notice Reentrancy modifier for diamond\\n   */\\n  uint256 internal constant NOT_ENTERED = 1;\\n\\n  /**\\n   * @notice Reentrancy modifier for diamond\\n   */\\n  uint256 internal constant ENTERED = 2;\\n\\n  /**\\n   * @notice Contains hash of empty bytes\\n   */\\n  bytes32 internal constant EMPTY_HASH = keccak256(\\\"\\\");\\n\\n  /**\\n   * @notice Denominator for BPS values\\n   */\\n  uint256 public constant BPS_FEE_DENOMINATOR = 10_000;\\n\\n  /**\\n   * @notice Value for delay used on governance\\n   */\\n  uint256 public constant GOVERNANCE_DELAY = 7 days;\\n\\n  /**\\n   * @notice Required gas amount to be leftover after passing in `gasleft` when\\n   * executing calldata (see `_executeCalldata` method).\\n   */\\n  uint256 public constant EXECUTE_CALLDATA_RESERVE_GAS = 10_000;\\n\\n  /**\\n   * @notice Portal referral code\\n   */\\n  uint16 public constant AAVE_REFERRAL_CODE = 0;\\n\\n  // ============= ConnextPriceOracle\\n  /**\\n   * @notice Valid period for a price delivered by the price oracle\\n   */\\n  uint256 public constant ORACLE_VALID_PERIOD = 1 minutes;\\n\\n  /**\\n   * @notice Valid wiggle room for future timestamps (3s) used by `setDirectPrice`\\n   */\\n  uint256 public constant FUTURE_TIME_BUFFER = 3;\\n\\n  /**\\n   * @notice Defalt decimals values are normalized to\\n   */\\n  uint8 public constant DEFAULT_NORMALIZED_DECIMALS = uint8(18);\\n\\n  /**\\n   * @notice Bytes of return data copied back when using `excessivelySafeCall`\\n   */\\n  uint16 public constant DEFAULT_COPY_BYTES = 256;\\n\\n  /**\\n   * @notice Valid deadline extension used when swapping (1hr)\\n   */\\n  uint256 public constant DEFAULT_DEADLINE_EXTENSION = 3600;\\n\\n  // ============= Swaps\\n  /**\\n   * @notice the precision all pools tokens will be converted to\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   *\\n   * The minimum in a pool is 2 (nextUSDC, USDC), and the maximum allowed is 16. While\\n   * we do not have pools supporting this number of token, allowing a larger value leaves\\n   * the possibility open to pool multiple stable local/adopted pairs, garnering greater\\n   * capital efficiency. 16 specifically was chosen as a bit of a sweet spot between the\\n   * default of 32 and what we will realistically host in pools.\\n   */\\n  uint256 public constant MINIMUM_POOLED_TOKENS = 2;\\n  uint256 public constant MAXIMUM_POOLED_TOKENS = 16;\\n\\n  /**\\n   * @notice the precision all pools tokens will be converted to\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint8 public constant POOL_PRECISION_DECIMALS = 18;\\n\\n  /**\\n   * @notice the denominator used to calculate admin and LP fees. For example, an\\n   * LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant FEE_DENOMINATOR = 1e10;\\n\\n  /**\\n   * @notice Max swap fee is 1% or 100bps of each swap\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant MAX_SWAP_FEE = 1e8;\\n\\n  /**\\n   * @notice Max adminFee is 100% of the swapFee. adminFee does not add additional fee on top of swapFee.\\n   * Instead it takes a certain % of the swapFee. Therefore it has no impact on the\\n   * users but only on the earnings of LPs\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant MAX_ADMIN_FEE = 1e10;\\n\\n  /**\\n   * @notice constant value used as max loop limit\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant MAX_LOOP_LIMIT = 256;\\n\\n  // Constant value used as max delay time for removing swap after disabled\\n  uint256 internal constant REMOVE_DELAY = 7 days;\\n\\n  /**\\n   * @notice constant values used in ramping A calculations\\n   * @dev stored here to keep easily in sync between `SwapUtils` and `SwapUtilsExternal`\\n   */\\n  uint256 public constant A_PRECISION = 100;\\n  uint256 public constant MAX_A = 10**6;\\n  uint256 public constant MAX_A_CHANGE = 2;\\n  uint256 public constant MIN_RAMP_TIME = 14 days;\\n  uint256 public constant MIN_RAMP_DELAY = 1 days;\\n}\\n\",\"keccak256\":\"0x2c4d18cad8bb4e24f57619884e66fed2b44f78c4cf87e296ed34e4cb7fc399f0\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/core/connext/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IStableSwap} from \\\"../interfaces/IStableSwap.sol\\\";\\nimport {IConnectorManager} from \\\"../../../messaging/interfaces/IConnectorManager.sol\\\";\\nimport {SwapUtils} from \\\"./SwapUtils.sol\\\";\\nimport {TokenId} from \\\"./TokenId.sol\\\";\\n\\n/**\\n * @notice THIS FILE DEFINES OUR STORAGE LAYOUT AND ID GENERATION SCHEMA. IT CAN ONLY BE MODIFIED FREELY FOR FRESH\\n * DEPLOYS. If you are modifiying this file for an upgrade, you must **CAREFULLY** ensure\\n * the contract storage layout is not impacted.\\n *\\n * BE VERY CAREFUL MODIFYING THE VALUES IN THIS FILE!\\n */\\n\\n// ============= Enum =============\\n\\n/// @notice Enum representing address role\\n// Returns uint\\n// None     - 0\\n// Router   - 1\\n// Watcher  - 2\\n// Admin    - 3\\nenum Role {\\n  None,\\n  RouterAdmin,\\n  Watcher,\\n  Admin\\n}\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\\n\\n/**\\n * @notice Contains configs for each router\\n * @param approved Whether the router is allowlisted, settable by admin\\n * @param portalApproved Whether the router is allowlisted for portals, settable by admin\\n * @param routerOwners The address that can update the `recipient`\\n * @param proposedRouterOwners Owner candidates\\n * @param proposedRouterTimestamp When owner candidate was proposed (there is a delay to acceptance)\\n */\\nstruct RouterConfig {\\n  bool approved;\\n  bool portalApproved;\\n  address owner;\\n  address recipient;\\n  address proposed;\\n  uint256 proposedTimestamp;\\n}\\n\\n/**\\n * @notice Contains configurations for tokens\\n * @dev Struct will be stored on the hash of the `canonicalId` and `canonicalDomain`. There are also\\n * two separate reverse lookups, that deliver plaintext information based on the passed in address (can\\n * either be representation or adopted address passed in).\\n *\\n * If the decimals are updated in a future token upgrade, the transfers should fail. If that happens, the\\n * asset and swaps must be removed, and then they can be readded\\n *\\n * @param representation Address of minted asset on this domain. If the token is of local origin (meaning it was\\n * originally deployed on this chain), this MUST map to address(0).\\n * @param representationDecimals Decimals of minted asset on this domain\\n * @param adopted Address of adopted asset on this domain\\n * @param adoptedDecimals Decimals of adopted asset on this domain\\n * @param adoptedToLocalExternalPools Holds the AMMs for swapping in and out of local assets\\n * @param approval Allowed assets\\n * @param cap Liquidity caps of whitelisted assets. If 0, no cap is enforced.\\n * @param custodied Custodied balance by address\\n */\\nstruct TokenConfig {\\n  address representation;\\n  uint8 representationDecimals;\\n  address adopted;\\n  uint8 adoptedDecimals;\\n  address adoptedToLocalExternalPools;\\n  bool approval;\\n  uint256 cap;\\n  uint256 custodied;\\n}\\n\\nstruct AppStorage {\\n  //\\n  // 0\\n  bool initialized;\\n  //\\n  // Connext\\n  //\\n  // 1\\n  uint256 LIQUIDITY_FEE_NUMERATOR;\\n  /**\\n   * @notice The local address that is custodying relayer fees\\n   */\\n  // 2\\n  address relayerFeeVault;\\n  /**\\n   * @notice Nonce for the contract, used to keep unique transfer ids.\\n   * @dev Assigned at first interaction (xcall on origin domain).\\n   */\\n  // 3\\n  uint256 nonce;\\n  /**\\n   * @notice The domain this contract exists on.\\n   * @dev Must match the domain identifier, which is distinct from the \\\"chainId\\\".\\n   */\\n  // 4\\n  uint32 domain;\\n  /**\\n   * @notice Mapping of adopted to canonical asset information.\\n   */\\n  // 5\\n  mapping(address => TokenId) adoptedToCanonical;\\n  /**\\n   * @notice Mapping of representation to canonical asset information.\\n   */\\n  // 6\\n  mapping(address => TokenId) representationToCanonical;\\n  /**\\n   * @notice Mapping of hash(canonicalId, canonicalDomain) to token config on this domain.\\n   */\\n  // 7\\n  mapping(bytes32 => TokenConfig) tokenConfigs;\\n  /**\\n   * @notice Mapping to track transfer status on destination domain\\n   */\\n  // 8\\n  mapping(bytes32 => DestinationTransferStatus) transferStatus;\\n  /**\\n   * @notice Mapping holding router address that provided fast liquidity.\\n   */\\n  // 9\\n  mapping(bytes32 => address[]) routedTransfers;\\n  /**\\n   * @notice Mapping of router to available balance of an asset.\\n   * @dev Routers should always store liquidity that they can expect to receive via the bridge on\\n   * this domain (the local asset).\\n   */\\n  // 10\\n  mapping(address => mapping(address => uint256)) routerBalances;\\n  /**\\n   * @notice Mapping of approved relayers\\n   * @dev Send relayer fee if msg.sender is approvedRelayer; otherwise revert.\\n   */\\n  // 11\\n  mapping(address => bool) approvedRelayers;\\n  /**\\n   * @notice The max amount of routers a payment can be routed through.\\n   */\\n  // 12\\n  uint256 maxRoutersPerTransfer;\\n  /**\\n   * @notice Stores a mapping of transfer id to slippage overrides.\\n   */\\n  // 13\\n  mapping(bytes32 => uint256) slippage;\\n  /**\\n   * @notice Stores a mapping of transfer id to receive local overrides.\\n   */\\n  // 14\\n  mapping(bytes32 => bool) receiveLocalOverride;\\n  /**\\n   * @notice Stores a mapping of remote routers keyed on domains.\\n   * @dev Addresses are cast to bytes32.\\n   * This mapping is required because the Connext now contains the BridgeRouter and must implement\\n   * the remotes interface.\\n   */\\n  // 15\\n  mapping(uint32 => bytes32) remotes;\\n  //\\n  // ProposedOwnable\\n  //\\n  // 17\\n  address _proposed;\\n  // 18\\n  uint256 _proposedOwnershipTimestamp;\\n  // 19\\n  bool _routerAllowlistRemoved;\\n  // 20\\n  uint256 _routerAllowlistTimestamp;\\n  /**\\n   * @notice Stores a mapping of address to Roles\\n   * @dev returns uint representing the enum Role value\\n   */\\n  // 21\\n  mapping(address => Role) roles;\\n  //\\n  // RouterFacet\\n  //\\n  // 22\\n  mapping(address => RouterConfig) routerConfigs;\\n  //\\n  // ReentrancyGuard\\n  //\\n  // 23\\n  uint256 _status;\\n  // 24\\n  uint256 _xcallStatus;\\n  //\\n  // StableSwap\\n  //\\n  /**\\n   * @notice Mapping holding the AMM storages for swapping in and out of local assets\\n   * @dev Swaps for an adopted asset <> local asset (i.e. POS USDC <> nextUSDC on polygon)\\n   * Struct storing data responsible for automatic market maker functionalities. In order to\\n   * access this data, this contract uses SwapUtils library. For more details, see SwapUtils.sol.\\n   */\\n  // 25\\n  mapping(bytes32 => SwapUtils.Swap) swapStorages;\\n  /**\\n   * @notice Maps token address to an index in the pool. Used to prevent duplicate tokens in the pool.\\n   * @dev getTokenIndex function also relies on this mapping to retrieve token index.\\n   */\\n  // 26\\n  mapping(bytes32 => mapping(address => uint8)) tokenIndexes;\\n  /**\\n   * The address of an existing LPToken contract to use as a target\\n   * this target must be the address which connext deployed on this chain.\\n   */\\n  // 27\\n  address lpTokenTargetAddress;\\n  /**\\n   * @notice Stores whether or not bribing, AMMs, have been paused.\\n   */\\n  // 28\\n  bool _paused;\\n  //\\n  // AavePortals\\n  //\\n  /**\\n   * @notice Address of Aave Pool contract.\\n   */\\n  // 29\\n  address aavePool;\\n  /**\\n   * @notice Fee percentage numerator for using Portal liquidity.\\n   * @dev Assumes the same basis points as the liquidity fee.\\n   */\\n  // 30\\n  uint256 aavePortalFeeNumerator;\\n  /**\\n   * @notice Mapping to store the transfer liquidity amount provided by Aave Portals.\\n   */\\n  // 31\\n  mapping(bytes32 => uint256) portalDebt;\\n  /**\\n   * @notice Mapping to store the transfer liquidity amount provided by Aave Portals.\\n   */\\n  // 32\\n  mapping(bytes32 => uint256) portalFeeDebt;\\n  /**\\n   * @notice Mapping of approved sequencers\\n   * @dev Sequencer address provided must belong to an approved sequencer in order to call `execute`\\n   * for the fast liquidity route.\\n   */\\n  // 33\\n  mapping(address => bool) approvedSequencers;\\n  /**\\n   * @notice Remote connection manager for xapp.\\n   */\\n  // 34\\n  IConnectorManager xAppConnectionManager;\\n}\\n\\nlibrary LibConnextStorage {\\n  function connextStorage() internal pure returns (AppStorage storage ds) {\\n    assembly {\\n      ds.slot := 0\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xfe33ca33dbd4136708e5467a4bae98abd105064e0c2ce0c2c2c7576d1c26350d\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n  bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n    // hash of proposed facets => acceptance time\\n    mapping(bytes32 => uint256) acceptanceTimes;\\n    // acceptance delay for upgrading facets\\n    uint256 acceptanceDelay;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  function setContractOwner(address _newOwner) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    emit OwnershipTransferred(ds.contractOwner, _newOwner);\\n    ds.contractOwner = _newOwner;\\n  }\\n\\n  function contractOwner() internal view returns (address contractOwner_) {\\n    contractOwner_ = diamondStorage().contractOwner;\\n  }\\n\\n  function acceptanceDelay() internal view returns (uint256) {\\n    return diamondStorage().acceptanceDelay;\\n  }\\n\\n  function acceptanceTime(bytes32 _key) internal view returns (uint256) {\\n    return diamondStorage().acceptanceTimes[_key];\\n  }\\n\\n  function enforceIsContractOwner() internal view {\\n    require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: !contract owner\\\");\\n  }\\n\\n  event DiamondCutProposed(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata, uint256 deadline);\\n\\n  function proposeDiamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    // NOTE: to save gas, verification that `proposeDiamondCut` and `diamondCut` are not\\n    // included is performed in `diamondCut`, where there is already a loop over facets.\\n    // In the case where these cuts are performed, admins must call `rescindDiamondCut`\\n\\n    DiamondStorage storage ds = diamondStorage();\\n    uint256 acceptance = block.timestamp + ds.acceptanceDelay;\\n    ds.acceptanceTimes[keccak256(abi.encode(_diamondCut, _init, _calldata))] = acceptance;\\n    emit DiamondCutProposed(_diamondCut, _init, _calldata, acceptance);\\n  }\\n\\n  event DiamondCutRescinded(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  function rescindDiamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    // NOTE: you can always rescind a proposed facet cut as the owner, even if outside of the validity\\n    // period or befor the delay elpases\\n    delete diamondStorage().acceptanceTimes[keccak256(abi.encode(_diamondCut, _init, _calldata))];\\n    emit DiamondCutRescinded(_diamondCut, _init, _calldata);\\n  }\\n\\n  event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  // Internal function version of diamondCut\\n  function diamondCut(\\n    IDiamondCut.FacetCut[] memory _diamondCut,\\n    address _init,\\n    bytes memory _calldata\\n  ) internal {\\n    DiamondStorage storage ds = diamondStorage();\\n    bytes32 key = keccak256(abi.encode(_diamondCut, _init, _calldata));\\n    if (ds.facetAddresses.length != 0) {\\n      uint256 time = ds.acceptanceTimes[key];\\n      require(time != 0 && time <= block.timestamp, \\\"LibDiamond: delay not elapsed\\\");\\n      // Reset the acceptance time to ensure the same set of updates cannot be replayed\\n      // without going through a proposal window\\n\\n      // NOTE: the only time this will not be set to 0 is when there are no\\n      // existing facet addresses (on initialization, or when starting after a bad upgrade,\\n      // for example).\\n      // The only relevant case is the initial case, which has no acceptance time. otherwise,\\n      // there is no way to update the facet selector mapping to call `diamondCut`.\\n      // Avoiding setting the empty value will save gas on the initial deployment.\\n      delete ds.acceptanceTimes[key];\\n    } // Otherwise, this is the first instance of deployment and it can be set automatically\\n    uint256 len = _diamondCut.length;\\n    for (uint256 facetIndex; facetIndex < len; ) {\\n      IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == IDiamondCut.FacetCutAction.Add) {\\n        addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n        replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n        removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n      } else {\\n        revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n      }\\n\\n      unchecked {\\n        ++facetIndex;\\n      }\\n    }\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length != 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    uint256 len = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < len; ) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n\\n      unchecked {\\n        ++selectorIndex;\\n      }\\n    }\\n  }\\n\\n  function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    uint256 len = _functionSelectors.length;\\n    require(len != 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n    uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n    // add new facet address if it does not exist\\n    if (selectorPosition == 0) {\\n      addFacet(ds, _facetAddress);\\n    }\\n    for (uint256 selectorIndex; selectorIndex < len; ) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n      removeFunction(ds, oldFacetAddress, selector);\\n      addFunction(ds, selector, selectorPosition, _facetAddress);\\n      selectorPosition++;\\n\\n      unchecked {\\n        ++selectorIndex;\\n      }\\n    }\\n  }\\n\\n  function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n    require(_functionSelectors.length != 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n    DiamondStorage storage ds = diamondStorage();\\n    // get the propose and cut selectors -- can never remove these\\n    bytes4 proposeSelector = IDiamondCut.proposeDiamondCut.selector;\\n    bytes4 cutSelector = IDiamondCut.diamondCut.selector;\\n    // if function does not exist then do nothing and return\\n    require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n    uint256 len = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < len; ) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      require(selector != proposeSelector && selector != cutSelector, \\\"LibDiamondCut: Cannot remove cut selectors\\\");\\n      address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n      removeFunction(ds, oldFacetAddress, selector);\\n\\n      unchecked {\\n        ++selectorIndex;\\n      }\\n    }\\n  }\\n\\n  function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n    enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n    ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n    ds.facetAddresses.push(_facetAddress);\\n  }\\n\\n  function addFunction(\\n    DiamondStorage storage ds,\\n    bytes4 _selector,\\n    uint96 _selectorPosition,\\n    address _facetAddress\\n  ) internal {\\n    ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n    ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n  }\\n\\n  function removeFunction(\\n    DiamondStorage storage ds,\\n    address _facetAddress,\\n    bytes4 _selector\\n  ) internal {\\n    require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n    // an immutable function is a function defined directly in a diamond\\n    require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n    // replace selector with last selector, then delete last selector\\n    uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n    uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n    // if not the same then replace _selector with lastSelector\\n    if (selectorPosition != lastSelectorPosition) {\\n      bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n      ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n      ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n    }\\n    // delete the last selector\\n    ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n    delete ds.selectorToFacetAndPosition[_selector];\\n\\n    // if no more selectors for facet address then delete the facet address\\n    if (lastSelectorPosition == 0) {\\n      // replace facet address with last facet address and delete last facet address\\n      uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n      uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n      if (facetAddressPosition != lastFacetAddressPosition) {\\n        address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n        ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n        ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n      }\\n      ds.facetAddresses.pop();\\n      delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n    }\\n  }\\n\\n  function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n    if (_init == address(0)) {\\n      require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n    } else {\\n      require(_calldata.length != 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n      if (_init != address(this)) {\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n      }\\n      (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n      if (!success) {\\n        if (error.length != 0) {\\n          // bubble up the error\\n          revert(string(error));\\n        } else {\\n          revert(\\\"LibDiamondCut: _init function reverted\\\");\\n        }\\n      }\\n    }\\n  }\\n\\n  function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n    require(_contract.code.length != 0, _errorMessage);\\n  }\\n}\\n\",\"keccak256\":\"0x630090ecfe33ecddbe664c844b41da0e6ed6275b8d19e4922707adee5384a61e\",\"license\":\"MIT\"},\"contracts/core/connext/libraries/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/**\\n * @title MathUtils library\\n * @notice A library to be used in conjunction with SafeMath. Contains functions for calculating\\n * differences between two uint256.\\n */\\nlibrary MathUtils {\\n  /**\\n   * @notice Compares a and b and returns true if the difference between a and b\\n   *         is less than 1 or equal to each other.\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return True if the difference between a and b is less than 1 or equal,\\n   *         otherwise return false\\n   */\\n  function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n    return (difference(a, b) < 1 + 1); // instead of <=1\\n  }\\n\\n  /**\\n   * @notice Calculates absolute difference between a and b\\n   * @param a uint256 to compare with\\n   * @param b uint256 to compare with\\n   * @return Difference between a and b\\n   */\\n  function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a > b) {\\n      return a - b;\\n    }\\n    return b - a;\\n  }\\n}\\n\",\"keccak256\":\"0xe5f282e178c23b58b7c7880c59b4d9d191ca8766921eb8407bce284dc1b7866a\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/SwapUtils.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {LPToken} from \\\"../helpers/LPToken.sol\\\";\\n\\nimport {AmplificationUtils} from \\\"./AmplificationUtils.sol\\\";\\nimport {MathUtils} from \\\"./MathUtils.sol\\\";\\nimport {AssetLogic} from \\\"./AssetLogic.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title SwapUtils library\\n * @notice A library to be used within Swap.sol. Contains functions responsible for custody and AMM functionalities.\\n * @dev Contracts relying on this library must initialize SwapUtils.Swap struct then use this library\\n * for SwapUtils.Swap struct. Note that this library contains both functions called by users and admins.\\n * Admin functions should be protected within contracts using this library.\\n */\\nlibrary SwapUtils {\\n  using SafeERC20 for IERC20;\\n  using MathUtils for uint256;\\n\\n  /*** EVENTS ***/\\n\\n  event TokenSwap(\\n    bytes32 indexed key,\\n    address indexed buyer,\\n    uint256 tokensSold,\\n    uint256 tokensBought,\\n    uint128 soldId,\\n    uint128 boughtId\\n  );\\n  event AddLiquidity(\\n    bytes32 indexed key,\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event RemoveLiquidity(bytes32 indexed key, address indexed provider, uint256[] tokenAmounts, uint256 lpTokenSupply);\\n  event RemoveLiquidityOne(\\n    bytes32 indexed key,\\n    address indexed provider,\\n    uint256 lpTokenAmount,\\n    uint256 lpTokenSupply,\\n    uint256 boughtId,\\n    uint256 tokensBought\\n  );\\n  event RemoveLiquidityImbalance(\\n    bytes32 indexed key,\\n    address indexed provider,\\n    uint256[] tokenAmounts,\\n    uint256[] fees,\\n    uint256 invariant,\\n    uint256 lpTokenSupply\\n  );\\n  event NewAdminFee(bytes32 indexed key, uint256 newAdminFee);\\n  event NewSwapFee(bytes32 indexed key, uint256 newSwapFee);\\n\\n  struct Swap {\\n    // variables around the ramp management of A,\\n    // the amplification coefficient * n ** (n - 1)\\n    // see Curve stableswap paper for details\\n    bytes32 key;\\n    uint256 initialA;\\n    uint256 futureA;\\n    uint256 initialATime;\\n    uint256 futureATime;\\n    // fee calculation\\n    uint256 swapFee;\\n    uint256 adminFee;\\n    LPToken lpToken;\\n    // contract references for all tokens being pooled\\n    IERC20[] pooledTokens;\\n    // multipliers for each pooled token's precision to get to Constants.POOL_PRECISION_DECIMALS\\n    // for example, TBTC has 18 decimals, so the multiplier should be 1. WBTC\\n    // has 8, so the multiplier should be 10 ** 18 / 10 ** 8 => 10 ** 10\\n    uint256[] tokenPrecisionMultipliers;\\n    // the pool balance of each token, in the token's precision\\n    // the contract's actual token balance might differ\\n    uint256[] balances;\\n    // the admin fee balance of each token, in the token's precision\\n    uint256[] adminFees;\\n    // the flag if this pool disabled by admin. once disabled, only remove liquidity will work.\\n    bool disabled;\\n    // once pool disabled, admin can remove pool after passed removeTime. and reinitialize.\\n    uint256 removeTime;\\n  }\\n\\n  // Struct storing variables used in calculations in the\\n  // calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n  struct CalculateWithdrawOneTokenDYInfo {\\n    uint256 d0;\\n    uint256 d1;\\n    uint256 newY;\\n    uint256 feePerToken;\\n    uint256 preciseA;\\n  }\\n\\n  // Struct storing variables used in calculations in the\\n  // {add,remove}Liquidity functions to avoid stack too deep errors\\n  struct ManageLiquidityInfo {\\n    uint256 d0;\\n    uint256 d1;\\n    uint256 d2;\\n    uint256 preciseA;\\n    LPToken lpToken;\\n    uint256 totalSupply;\\n    uint256[] balances;\\n    uint256[] multipliers;\\n  }\\n\\n  /*** VIEW & PURE FUNCTIONS ***/\\n\\n  function _getAPrecise(Swap storage self) private view returns (uint256) {\\n    return AmplificationUtils._getAPrecise(self);\\n  }\\n\\n  /**\\n   * @notice Calculate the dy, the amount of selected token that user receives and\\n   * the fee of withdrawing in one token\\n   * @param tokenAmount the amount to withdraw in the pool's precision\\n   * @param tokenIndex which token will be withdrawn\\n   * @param self Swap struct to read from\\n   * @return the amount of token user will receive\\n   */\\n  function calculateWithdrawOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex\\n  ) internal view returns (uint256) {\\n    (uint256 availableTokenAmount, ) = _calculateWithdrawOneToken(\\n      self,\\n      tokenAmount,\\n      tokenIndex,\\n      self.lpToken.totalSupply()\\n    );\\n    return availableTokenAmount;\\n  }\\n\\n  function _calculateWithdrawOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 totalSupply\\n  ) private view returns (uint256, uint256) {\\n    uint256 dy;\\n    uint256 newY;\\n    uint256 currentY;\\n\\n    (dy, newY, currentY) = calculateWithdrawOneTokenDY(self, tokenIndex, tokenAmount, totalSupply);\\n\\n    // dy_0 (without fees)\\n    // dy, dy_0 - dy\\n\\n    uint256 dySwapFee = (currentY - newY) / self.tokenPrecisionMultipliers[tokenIndex] - dy;\\n\\n    return (dy, dySwapFee);\\n  }\\n\\n  /**\\n   * @notice Calculate the dy of withdrawing in one token\\n   * @param self Swap struct to read from\\n   * @param tokenIndex which token will be withdrawn\\n   * @param tokenAmount the amount to withdraw in the pools precision\\n   * @return the d and the new y after withdrawing one token\\n   */\\n  function calculateWithdrawOneTokenDY(\\n    Swap storage self,\\n    uint8 tokenIndex,\\n    uint256 tokenAmount,\\n    uint256 totalSupply\\n  )\\n    internal\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    // Get the current D, then solve the stableswap invariant\\n    // y_i for D - tokenAmount\\n    uint256[] memory xp = _xp(self);\\n\\n    require(tokenIndex < xp.length, \\\"index out of range\\\");\\n\\n    CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n    v.preciseA = _getAPrecise(self);\\n    v.d0 = getD(xp, v.preciseA);\\n    v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\\n\\n    require(tokenAmount <= xp[tokenIndex], \\\"exceeds available\\\");\\n\\n    v.newY = getYD(v.preciseA, tokenIndex, xp, v.d1);\\n\\n    uint256[] memory xpReduced = new uint256[](xp.length);\\n\\n    v.feePerToken = _feePerToken(self.swapFee, xp.length);\\n    // TODO: Set a length variable (at top) instead of reading xp.length on each loop.\\n    uint256 len = xp.length;\\n    for (uint256 i; i < len; ) {\\n      uint256 xpi = xp[i];\\n      // if i == tokenIndex, dxExpected = xp[i] * d1 / d0 - newY\\n      // else dxExpected = xp[i] - (xp[i] * d1 / d0)\\n      // xpReduced[i] -= dxExpected * fee / Constants.FEE_DENOMINATOR\\n      xpReduced[i] =\\n        xpi -\\n        ((((i == tokenIndex) ? ((xpi * v.d1) / v.d0 - v.newY) : (xpi - (xpi * v.d1) / v.d0)) * v.feePerToken) /\\n          Constants.FEE_DENOMINATOR);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    uint256 dy = xpReduced[tokenIndex] - getYD(v.preciseA, tokenIndex, xpReduced, v.d1);\\n    dy = (dy - 1) / (self.tokenPrecisionMultipliers[tokenIndex]);\\n\\n    return (dy, v.newY, xp[tokenIndex]);\\n  }\\n\\n  /**\\n   * @notice Calculate the price of a token in the pool with given\\n   * precision-adjusted balances and a particular D.\\n   *\\n   * @dev This is accomplished via solving the invariant iteratively.\\n   * See the StableSwap paper and Curve.fi implementation for further details.\\n   *\\n   * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n   * x_1**2 + b*x_1 = c\\n   * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n   *\\n   * @param a the amplification coefficient * n ** (n - 1). See the StableSwap paper for details.\\n   * @param tokenIndex Index of token we are calculating for.\\n   * @param xp a precision-adjusted set of pool balances. Array should be\\n   * the same cardinality as the pool.\\n   * @param d the stableswap invariant\\n   * @return the price of the token, in the same precision as in xp\\n   */\\n  function getYD(\\n    uint256 a,\\n    uint8 tokenIndex,\\n    uint256[] memory xp,\\n    uint256 d\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = xp.length;\\n    require(tokenIndex < numTokens, \\\"Token not found\\\");\\n\\n    uint256 c = d;\\n    uint256 s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i; i < numTokens; ) {\\n      if (i != tokenIndex) {\\n        s += xp[i];\\n        c = (c * d) / (xp[i] * numTokens);\\n        // If we were to protect the division loss we would have to keep the denominator separate\\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n        // c = c * D * D * D * ... overflow!\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    c = (c * d * Constants.A_PRECISION) / (nA * numTokens);\\n\\n    uint256 b = s + ((d * Constants.A_PRECISION) / nA);\\n    uint256 yPrev;\\n    // Select d as the starting point of the Newton method. Because y < D\\n    // D is the best option as the starting point in case the pool is very imbalanced.\\n    uint256 y = d;\\n    for (uint256 i; i < Constants.MAX_LOOP_LIMIT; ) {\\n      yPrev = y;\\n      y = ((y * y) + c) / ((y * 2) + b - d);\\n      if (y.within1(yPrev)) {\\n        return y;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n   * @param xp a precision-adjusted set of pool balances. Array should be the same cardinality\\n   * as the pool.\\n   * @param a the amplification coefficient * n ** (n - 1) in A_PRECISION.\\n   * See the StableSwap paper for details\\n   * @return the invariant, at the precision of the pool\\n   */\\n  function getD(uint256[] memory xp, uint256 a) internal pure returns (uint256) {\\n    uint256 numTokens = xp.length;\\n    uint256 s;\\n    for (uint256 i; i < numTokens; ) {\\n      s += xp[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    if (s == 0) {\\n      return 0;\\n    }\\n\\n    uint256 prevD;\\n    uint256 d = s;\\n    uint256 nA = a * numTokens;\\n\\n    for (uint256 i; i < Constants.MAX_LOOP_LIMIT; ) {\\n      uint256 dP = d;\\n      for (uint256 j; j < numTokens; ) {\\n        dP = (dP * d) / (xp[j] * numTokens);\\n        // If we were to protect the division loss we would have to keep the denominator separate\\n        // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n        // dP = dP * D * D * D * ... overflow!\\n\\n        unchecked {\\n          ++j;\\n        }\\n      }\\n      prevD = d;\\n      d =\\n        (((nA * s) / Constants.A_PRECISION + dP * numTokens) * d) /\\n        ((((nA - Constants.A_PRECISION) * d) / Constants.A_PRECISION + (numTokens + 1) * dP));\\n      if (d.within1(prevD)) {\\n        return d;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n    // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n    // function which does not rely on D.\\n    revert(\\\"D does not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Given a set of balances and precision multipliers, return the\\n   * precision-adjusted balances.\\n   *\\n   * @param balances an array of token balances, in their native precisions.\\n   * These should generally correspond with pooled tokens.\\n   *\\n   * @param precisionMultipliers an array of multipliers, corresponding to\\n   * the amounts in the balances array. When multiplied together they\\n   * should yield amounts at the pool's precision.\\n   *\\n   * @return an array of amounts \\\"scaled\\\" to the pool's precision\\n   */\\n  function _xp(uint256[] memory balances, uint256[] memory precisionMultipliers)\\n    internal\\n    pure\\n    returns (uint256[] memory)\\n  {\\n    uint256 numTokens = balances.length;\\n    require(numTokens == precisionMultipliers.length, \\\"mismatch multipliers\\\");\\n    uint256[] memory xp = new uint256[](numTokens);\\n    for (uint256 i; i < numTokens; ) {\\n      xp[i] = balances[i] * precisionMultipliers[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return xp;\\n  }\\n\\n  /**\\n   * @notice Return the precision-adjusted balances of all tokens in the pool\\n   * @param self Swap struct to read from\\n   * @return the pool balances \\\"scaled\\\" to the pool's precision, allowing\\n   * them to be more easily compared.\\n   */\\n  function _xp(Swap storage self) internal view returns (uint256[] memory) {\\n    return _xp(self.balances, self.tokenPrecisionMultipliers);\\n  }\\n\\n  /**\\n   * @notice Get the virtual price, to help calculate profit\\n   * @param self Swap struct to read from\\n   * @return the virtual price, scaled to precision of Constants.POOL_PRECISION_DECIMALS\\n   */\\n  function getVirtualPrice(Swap storage self) internal view returns (uint256) {\\n    uint256 d = getD(_xp(self), _getAPrecise(self));\\n    LPToken lpToken = self.lpToken;\\n    uint256 supply = lpToken.totalSupply();\\n    if (supply != 0) {\\n      return (d * (10**uint256(Constants.POOL_PRECISION_DECIMALS))) / supply;\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Calculate the new balances of the tokens given the indexes of the token\\n   * that is swapped from (FROM) and the token that is swapped to (TO).\\n   * This function is used as a helper function to calculate how much TO token\\n   * the user should receive on swap.\\n   *\\n   * @param preciseA precise form of amplification coefficient\\n   * @param tokenIndexFrom index of FROM token\\n   * @param tokenIndexTo index of TO token\\n   * @param x the new total amount of FROM token\\n   * @param xp balances of the tokens in the pool\\n   * @return the amount of TO token that should remain in the pool\\n   */\\n  function getY(\\n    uint256 preciseA,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 x,\\n    uint256[] memory xp\\n  ) internal pure returns (uint256) {\\n    uint256 numTokens = xp.length;\\n    require(tokenIndexFrom != tokenIndexTo, \\\"compare token to itself\\\");\\n    require(tokenIndexFrom < numTokens && tokenIndexTo < numTokens, \\\"token not found\\\");\\n\\n    uint256 d = getD(xp, preciseA);\\n    uint256 c = d;\\n    uint256 s;\\n    uint256 nA = numTokens * preciseA;\\n\\n    uint256 _x;\\n    for (uint256 i; i < numTokens; ) {\\n      if (i == tokenIndexFrom) {\\n        _x = x;\\n      } else if (i != tokenIndexTo) {\\n        _x = xp[i];\\n      } else {\\n        unchecked {\\n          ++i;\\n        }\\n        continue;\\n      }\\n      s += _x;\\n      c = (c * d) / (_x * numTokens);\\n      // If we were to protect the division loss we would have to keep the denominator separate\\n      // and divide at the end. However this leads to overflow with large numTokens or/and D.\\n      // c = c * D * D * D * ... overflow!\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    c = (c * d * Constants.A_PRECISION) / (nA * numTokens);\\n    uint256 b = s + ((d * Constants.A_PRECISION) / nA);\\n    uint256 yPrev;\\n    uint256 y = d;\\n\\n    // iterative approximation\\n    for (uint256 i; i < Constants.MAX_LOOP_LIMIT; ) {\\n      yPrev = y;\\n      y = ((y * y) + c) / ((y * 2) + b - d);\\n      if (y.within1(yPrev)) {\\n        return y;\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    revert(\\\"Approximation did not converge\\\");\\n  }\\n\\n  /**\\n   * @notice Externally calculates a swap between two tokens.\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get\\n   */\\n  function calculateSwap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx\\n  ) internal view returns (uint256 dy) {\\n    (dy, ) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, self.balances);\\n  }\\n\\n  /**\\n   * @notice Externally calculates a swap between two tokens.\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dy the number of tokens to buy.\\n   * @return dx the number of tokens the user have to transfer + fee\\n   */\\n  function calculateSwapInv(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy\\n  ) internal view returns (uint256 dx) {\\n    (dx, ) = _calculateSwapInv(self, tokenIndexFrom, tokenIndexTo, dy, self.balances);\\n  }\\n\\n  /**\\n   * @notice Internally calculates a swap between two tokens.\\n   *\\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n   * using the token contracts.\\n   *\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dx the number of tokens to sell. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dy the number of tokens the user will get in the token's precision. ex WBTC -> 8\\n   * @return dyFee the associated fee in multiplied precision (Constants.POOL_PRECISION_DECIMALS)\\n   */\\n  function _calculateSwap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256[] memory balances\\n  ) internal view returns (uint256 dy, uint256 dyFee) {\\n    uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n    uint256[] memory xp = _xp(balances, multipliers);\\n    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \\\"index out of range\\\");\\n    uint256 x = dx * multipliers[tokenIndexFrom] + xp[tokenIndexFrom];\\n    uint256 y = getY(_getAPrecise(self), tokenIndexFrom, tokenIndexTo, x, xp);\\n    dy = xp[tokenIndexTo] - y - 1;\\n    dyFee = (dy * self.swapFee) / Constants.FEE_DENOMINATOR;\\n    dy = (dy - dyFee) / multipliers[tokenIndexTo];\\n  }\\n\\n  /**\\n   * @notice Internally calculates a swap between two tokens.\\n   *\\n   * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n   * using the token contracts.\\n   *\\n   * @param self Swap struct to read from\\n   * @param tokenIndexFrom the token to sell\\n   * @param tokenIndexTo the token to buy\\n   * @param dy the number of tokens to buy. If the token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @return dx the number of tokens the user have to deposit in the token's precision. ex WBTC -> 8\\n   * @return dxFee the associated fee in multiplied precision (Constants.POOL_PRECISION_DECIMALS)\\n   */\\n  function _calculateSwapInv(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy,\\n    uint256[] memory balances\\n  ) internal view returns (uint256 dx, uint256 dxFee) {\\n    require(tokenIndexFrom != tokenIndexTo, \\\"compare token to itself\\\");\\n    uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n    uint256[] memory xp = _xp(balances, multipliers);\\n    require(tokenIndexFrom < xp.length && tokenIndexTo < xp.length, \\\"index out of range\\\");\\n\\n    uint256 a = _getAPrecise(self);\\n    uint256 d0 = getD(xp, a);\\n\\n    xp[tokenIndexTo] = xp[tokenIndexTo] - (dy * multipliers[tokenIndexTo]);\\n    uint256 x = getYD(a, tokenIndexFrom, xp, d0);\\n    dx = (x + 1) - xp[tokenIndexFrom];\\n    dxFee = (dx * self.swapFee) / Constants.FEE_DENOMINATOR;\\n    dx = (dx + dxFee) / multipliers[tokenIndexFrom];\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate amount of each underlying\\n   * tokens that is returned upon burning given amount of\\n   * LP tokens\\n   *\\n   * @param amount the amount of LP tokens that would to be burned on\\n   * withdrawal\\n   * @return array of amounts of tokens user will receive\\n   */\\n  function calculateRemoveLiquidity(Swap storage self, uint256 amount) internal view returns (uint256[] memory) {\\n    return _calculateRemoveLiquidity(self.balances, amount, self.lpToken.totalSupply());\\n  }\\n\\n  function _calculateRemoveLiquidity(\\n    uint256[] memory balances,\\n    uint256 amount,\\n    uint256 totalSupply\\n  ) internal pure returns (uint256[] memory) {\\n    require(amount <= totalSupply, \\\"exceed total supply\\\");\\n\\n    uint256 numBalances = balances.length;\\n    uint256[] memory amounts = new uint256[](numBalances);\\n\\n    for (uint256 i; i < numBalances; ) {\\n      amounts[i] = (balances[i] * amount) / totalSupply;\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    return amounts;\\n  }\\n\\n  /**\\n   * @notice A simple method to calculate prices from deposits or\\n   * withdrawals, excluding fees but including slippage. This is\\n   * helpful as an input into the various \\\"min\\\" parameters on calls\\n   * to fight front-running\\n   *\\n   * @dev This shouldn't be used outside frontends for user estimates.\\n   *\\n   * @param self Swap struct to read from\\n   * @param amounts an array of token amounts to deposit or withdrawal,\\n   * corresponding to pooledTokens. The amount should be in each\\n   * pooled token's native precision. If a token charges a fee on transfers,\\n   * use the amount that gets transferred after the fee.\\n   * @param deposit whether this is a deposit or a withdrawal\\n   * @return if deposit was true, total amount of lp token that will be minted and if\\n   * deposit was false, total amount of lp token that will be burned\\n   */\\n  function calculateTokenAmount(\\n    Swap storage self,\\n    uint256[] calldata amounts,\\n    bool deposit\\n  ) internal view returns (uint256) {\\n    uint256[] memory balances = self.balances;\\n    uint256 numBalances = balances.length;\\n    require(amounts.length == numBalances, \\\"invalid length of amounts\\\");\\n\\n    uint256 a = _getAPrecise(self);\\n    uint256[] memory multipliers = self.tokenPrecisionMultipliers;\\n\\n    uint256 d0 = getD(_xp(balances, multipliers), a);\\n    for (uint256 i; i < numBalances; ) {\\n      if (deposit) {\\n        balances[i] = balances[i] + amounts[i];\\n      } else {\\n        balances[i] = balances[i] - amounts[i];\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    uint256 d1 = getD(_xp(balances, multipliers), a);\\n    uint256 totalSupply = self.lpToken.totalSupply();\\n\\n    if (deposit) {\\n      return ((d1 - d0) * totalSupply) / d0;\\n    } else {\\n      return ((d0 - d1) * totalSupply) / d0;\\n    }\\n  }\\n\\n  /**\\n   * @notice return accumulated amount of admin fees of the token with given index\\n   * @param self Swap struct to read from\\n   * @param index Index of the pooled token\\n   * @return admin balance in the token's precision\\n   */\\n  function getAdminBalance(Swap storage self, uint256 index) internal view returns (uint256) {\\n    require(index < self.pooledTokens.length, \\\"index out of range\\\");\\n    return self.adminFees[index];\\n  }\\n\\n  /**\\n   * @notice internal helper function to calculate fee per token multiplier used in\\n   * swap fee calculations\\n   * @param swapFee swap fee for the tokens\\n   * @param numTokens number of tokens pooled\\n   */\\n  function _feePerToken(uint256 swapFee, uint256 numTokens) internal pure returns (uint256) {\\n    return (swapFee * numTokens) / ((numTokens - 1) * 4);\\n  }\\n\\n  /*** STATE MODIFYING FUNCTIONS ***/\\n\\n  /**\\n   * @notice swap two tokens in the pool\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dx the amount of tokens the user wants to sell\\n   * @param minDy the min amount the user would like to receive, or revert.\\n   * @return amount of token user received on swap\\n   */\\n  function swap(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n    {\\n      IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\\n      require(dx <= tokenFrom.balanceOf(msg.sender), \\\"swap more than you own\\\");\\n      // Reverts for fee on transfer\\n      AssetLogic.handleIncomingAsset(address(tokenFrom), dx);\\n    }\\n\\n    uint256 dy;\\n    uint256 dyFee;\\n    uint256[] memory balances = self.balances;\\n    (dy, dyFee) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, balances);\\n    require(dy >= minDy, \\\"dy < minDy\\\");\\n\\n    uint256 dyAdminFee = (dyFee * self.adminFee) /\\n      Constants.FEE_DENOMINATOR /\\n      self.tokenPrecisionMultipliers[tokenIndexTo];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\n    if (dyAdminFee != 0) {\\n      self.adminFees[tokenIndexTo] = self.adminFees[tokenIndexTo] + dyAdminFee;\\n    }\\n\\n    AssetLogic.handleOutgoingAsset(address(self.pooledTokens[tokenIndexTo]), msg.sender, dy);\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice swap two tokens in the pool\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dy the amount of tokens the user wants to buy\\n   * @param maxDx the max amount the user would like to send.\\n   * @return amount of token user have to transfer on swap\\n   */\\n  function swapOut(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy,\\n    uint256 maxDx\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n    require(dy <= self.balances[tokenIndexTo], \\\">pool balance\\\");\\n\\n    uint256 dx;\\n    uint256 dxFee;\\n    uint256[] memory balances = self.balances;\\n    (dx, dxFee) = _calculateSwapInv(self, tokenIndexFrom, tokenIndexTo, dy, balances);\\n    require(dx <= maxDx, \\\"dx > maxDx\\\");\\n\\n    uint256 dxAdminFee = (dxFee * self.adminFee) /\\n      Constants.FEE_DENOMINATOR /\\n      self.tokenPrecisionMultipliers[tokenIndexFrom];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx - dxAdminFee;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy;\\n    if (dxAdminFee != 0) {\\n      self.adminFees[tokenIndexFrom] = self.adminFees[tokenIndexFrom] + dxAdminFee;\\n    }\\n\\n    {\\n      IERC20 tokenFrom = self.pooledTokens[tokenIndexFrom];\\n      require(dx <= tokenFrom.balanceOf(msg.sender), \\\"more than you own\\\");\\n      // Reverts for fee on transfer\\n      AssetLogic.handleIncomingAsset(address(tokenFrom), dx);\\n    }\\n\\n    AssetLogic.handleOutgoingAsset(address(self.pooledTokens[tokenIndexTo]), msg.sender, dy);\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dx;\\n  }\\n\\n  /**\\n   * @notice swap two tokens in the pool internally\\n   * @param self Swap struct to read from and write to\\n   * @param tokenIndexFrom the token the user wants to sell\\n   * @param tokenIndexTo the token the user wants to buy\\n   * @param dx the amount of tokens the user wants to sell\\n   * @param minDy the min amount the user would like to receive, or revert.\\n   * @return amount of token user received on swap\\n   */\\n  function swapInternal(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dx,\\n    uint256 minDy\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n    require(dx <= self.balances[tokenIndexFrom], \\\"more than pool balance\\\");\\n\\n    uint256 dy;\\n    uint256 dyFee;\\n    uint256[] memory balances = self.balances;\\n    (dy, dyFee) = _calculateSwap(self, tokenIndexFrom, tokenIndexTo, dx, balances);\\n    require(dy >= minDy, \\\"dy < minDy\\\");\\n\\n    uint256 dyAdminFee = (dyFee * self.adminFee) /\\n      Constants.FEE_DENOMINATOR /\\n      self.tokenPrecisionMultipliers[tokenIndexTo];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy - dyAdminFee;\\n\\n    if (dyAdminFee != 0) {\\n      self.adminFees[tokenIndexTo] = self.adminFees[tokenIndexTo] + dyAdminFee;\\n    }\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Should get exact amount out of AMM for asset put in\\n   */\\n  function swapInternalOut(\\n    Swap storage self,\\n    uint8 tokenIndexFrom,\\n    uint8 tokenIndexTo,\\n    uint256 dy,\\n    uint256 maxDx\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n    require(dy <= self.balances[tokenIndexTo], \\\"more than pool balance\\\");\\n\\n    uint256 dx;\\n    uint256 dxFee;\\n    uint256[] memory balances = self.balances;\\n    (dx, dxFee) = _calculateSwapInv(self, tokenIndexFrom, tokenIndexTo, dy, balances);\\n    require(dx <= maxDx, \\\"dx > maxDx\\\");\\n\\n    uint256 dxAdminFee = (dxFee * self.adminFee) /\\n      Constants.FEE_DENOMINATOR /\\n      self.tokenPrecisionMultipliers[tokenIndexFrom];\\n\\n    self.balances[tokenIndexFrom] = balances[tokenIndexFrom] + dx - dxAdminFee;\\n    self.balances[tokenIndexTo] = balances[tokenIndexTo] - dy;\\n\\n    if (dxAdminFee != 0) {\\n      self.adminFees[tokenIndexFrom] = self.adminFees[tokenIndexFrom] + dxAdminFee;\\n    }\\n\\n    emit TokenSwap(self.key, msg.sender, dx, dy, tokenIndexFrom, tokenIndexTo);\\n\\n    return dx;\\n  }\\n\\n  /**\\n   * @notice Add liquidity to the pool\\n   * @param self Swap struct to read from and write to\\n   * @param amounts the amounts of each token to add, in their native precision\\n   * @param minToMint the minimum LP tokens adding this amount of liquidity\\n   * should mint, otherwise revert. Handy for front-running mitigation\\n   * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\n   * @return amount of LP token user received\\n   */\\n  function addLiquidity(\\n    Swap storage self,\\n    uint256[] memory amounts,\\n    uint256 minToMint\\n  ) internal returns (uint256) {\\n    require(!self.disabled, \\\"disabled pool\\\");\\n\\n    uint256 numTokens = self.pooledTokens.length;\\n    require(amounts.length == numTokens, \\\"mismatch pooled tokens\\\");\\n\\n    // current state\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      0,\\n      0,\\n      0,\\n      _getAPrecise(self),\\n      self.lpToken,\\n      0,\\n      self.balances,\\n      self.tokenPrecisionMultipliers\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n    if (v.totalSupply != 0) {\\n      v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\\n    }\\n\\n    uint256[] memory newBalances = new uint256[](numTokens);\\n\\n    for (uint256 i; i < numTokens; ) {\\n      require(v.totalSupply != 0 || amounts[i] != 0, \\\"!supply all tokens\\\");\\n\\n      // Transfer tokens first to see if a fee was charged on transfer\\n      if (amounts[i] != 0) {\\n        IERC20 token = self.pooledTokens[i];\\n        // Reverts for fee on transfer\\n        AssetLogic.handleIncomingAsset(address(token), amounts[i]);\\n      }\\n\\n      newBalances[i] = v.balances[i] + amounts[i];\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // invariant after change\\n    v.d1 = getD(_xp(newBalances, v.multipliers), v.preciseA);\\n    require(v.d1 > v.d0, \\\"D should increase\\\");\\n\\n    // updated to reflect fees and calculate the user's LP tokens\\n    v.d2 = v.d1;\\n    uint256[] memory fees = new uint256[](numTokens);\\n\\n    if (v.totalSupply != 0) {\\n      uint256 feePerToken = _feePerToken(self.swapFee, numTokens);\\n      for (uint256 i; i < numTokens; ) {\\n        uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n        fees[i] = (feePerToken * (idealBalance.difference(newBalances[i]))) / Constants.FEE_DENOMINATOR;\\n        uint256 adminFee = (fees[i] * self.adminFee) / Constants.FEE_DENOMINATOR;\\n        self.balances[i] = newBalances[i] - adminFee;\\n        self.adminFees[i] = self.adminFees[i] + adminFee;\\n        newBalances[i] = newBalances[i] - fees[i];\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n      v.d2 = getD(_xp(newBalances, v.multipliers), v.preciseA);\\n    } else {\\n      // the initial depositor doesn't pay fees\\n      self.balances = newBalances;\\n    }\\n\\n    uint256 toMint;\\n    if (v.totalSupply == 0) {\\n      toMint = v.d1;\\n    } else {\\n      toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\\n    }\\n\\n    require(toMint >= minToMint, \\\"mint < min\\\");\\n\\n    // mint the user's LP tokens\\n    v.lpToken.mint(msg.sender, toMint);\\n\\n    emit AddLiquidity(self.key, msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\\n\\n    return toMint;\\n  }\\n\\n  /**\\n   * @notice Burn LP tokens to remove liquidity from the pool.\\n   * @dev Liquidity can always be removed, even when the pool is paused.\\n   * @param self Swap struct to read from and write to\\n   * @param amount the amount of LP tokens to burn\\n   * @param minAmounts the minimum amounts of each token in the pool\\n   * acceptable for this burn. Useful as a front-running mitigation\\n   * @return amounts of tokens the user received\\n   */\\n  function removeLiquidity(\\n    Swap storage self,\\n    uint256 amount,\\n    uint256[] calldata minAmounts\\n  ) internal returns (uint256[] memory) {\\n    LPToken lpToken = self.lpToken;\\n    require(amount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n    uint256 numTokens = self.pooledTokens.length;\\n    require(minAmounts.length == numTokens, \\\"mismatch poolTokens\\\");\\n\\n    uint256[] memory balances = self.balances;\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    uint256[] memory amounts = _calculateRemoveLiquidity(balances, amount, totalSupply);\\n\\n    uint256 numAmounts = amounts.length;\\n    for (uint256 i; i < numAmounts; ) {\\n      require(amounts[i] >= minAmounts[i], \\\"amounts[i] < minAmounts[i]\\\");\\n      self.balances[i] = balances[i] - amounts[i];\\n      AssetLogic.handleOutgoingAsset(address(self.pooledTokens[i]), msg.sender, amounts[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    lpToken.burnFrom(msg.sender, amount);\\n\\n    emit RemoveLiquidity(self.key, msg.sender, amounts, totalSupply - amount);\\n\\n    return amounts;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool all in one token.\\n   * @param self Swap struct to read from and write to\\n   * @param tokenAmount the amount of the lp tokens to burn\\n   * @param tokenIndex the index of the token you want to receive\\n   * @param minAmount the minimum amount to withdraw, otherwise revert\\n   * @return amount chosen token that user received\\n   */\\n  function removeLiquidityOneToken(\\n    Swap storage self,\\n    uint256 tokenAmount,\\n    uint8 tokenIndex,\\n    uint256 minAmount\\n  ) internal returns (uint256) {\\n    LPToken lpToken = self.lpToken;\\n\\n    require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n    uint256 numTokens = self.pooledTokens.length;\\n    require(tokenIndex < numTokens, \\\"not found\\\");\\n\\n    uint256 totalSupply = lpToken.totalSupply();\\n\\n    (uint256 dy, uint256 dyFee) = _calculateWithdrawOneToken(self, tokenAmount, tokenIndex, totalSupply);\\n\\n    require(dy >= minAmount, \\\"dy < minAmount\\\");\\n\\n    uint256 adminFee = (dyFee * self.adminFee) / Constants.FEE_DENOMINATOR;\\n    self.balances[tokenIndex] = self.balances[tokenIndex] - (dy + adminFee);\\n    if (adminFee != 0) {\\n      self.adminFees[tokenIndex] = self.adminFees[tokenIndex] + adminFee;\\n    }\\n    lpToken.burnFrom(msg.sender, tokenAmount);\\n    AssetLogic.handleOutgoingAsset(address(self.pooledTokens[tokenIndex]), msg.sender, dy);\\n\\n    emit RemoveLiquidityOne(self.key, msg.sender, tokenAmount, totalSupply, tokenIndex, dy);\\n\\n    return dy;\\n  }\\n\\n  /**\\n   * @notice Remove liquidity from the pool, weighted differently than the\\n   * pool's current balances.\\n   *\\n   * @param self Swap struct to read from and write to\\n   * @param amounts how much of each token to withdraw\\n   * @param maxBurnAmount the max LP token provider is willing to pay to\\n   * remove liquidity. Useful as a front-running mitigation.\\n   * @return actual amount of LP tokens burned in the withdrawal\\n   */\\n  function removeLiquidityImbalance(\\n    Swap storage self,\\n    uint256[] memory amounts,\\n    uint256 maxBurnAmount\\n  ) internal returns (uint256) {\\n    ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n      0,\\n      0,\\n      0,\\n      _getAPrecise(self),\\n      self.lpToken,\\n      0,\\n      self.balances,\\n      self.tokenPrecisionMultipliers\\n    );\\n    v.totalSupply = v.lpToken.totalSupply();\\n\\n    uint256 numTokens = self.pooledTokens.length;\\n    uint256 numAmounts = amounts.length;\\n    require(numAmounts == numTokens, \\\"mismatch pool tokens\\\");\\n\\n    require(maxBurnAmount <= v.lpToken.balanceOf(msg.sender) && maxBurnAmount != 0, \\\">LP.balanceOf\\\");\\n\\n    uint256 feePerToken = _feePerToken(self.swapFee, numTokens);\\n    uint256[] memory fees = new uint256[](numTokens);\\n    {\\n      uint256[] memory balances1 = new uint256[](numTokens);\\n      v.d0 = getD(_xp(v.balances, v.multipliers), v.preciseA);\\n      for (uint256 i; i < numTokens; ) {\\n        require(v.balances[i] >= amounts[i], \\\"withdraw more than available\\\");\\n\\n        unchecked {\\n          balances1[i] = v.balances[i] - amounts[i];\\n          ++i;\\n        }\\n      }\\n      v.d1 = getD(_xp(balances1, v.multipliers), v.preciseA);\\n\\n      for (uint256 i; i < numTokens; ) {\\n        {\\n          uint256 idealBalance = (v.d1 * v.balances[i]) / v.d0;\\n          uint256 difference = idealBalance.difference(balances1[i]);\\n          fees[i] = (feePerToken * difference) / Constants.FEE_DENOMINATOR;\\n        }\\n        uint256 adminFee = (fees[i] * self.adminFee) / Constants.FEE_DENOMINATOR;\\n        self.balances[i] = balances1[i] - adminFee;\\n        self.adminFees[i] = self.adminFees[i] + adminFee;\\n        balances1[i] = balances1[i] - fees[i];\\n\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n\\n      v.d2 = getD(_xp(balances1, v.multipliers), v.preciseA);\\n    }\\n    uint256 tokenAmount = ((v.d0 - v.d2) * v.totalSupply) / v.d0;\\n    require(tokenAmount != 0, \\\"!zero amount\\\");\\n    tokenAmount = tokenAmount + 1;\\n\\n    require(tokenAmount <= maxBurnAmount, \\\"tokenAmount > maxBurnAmount\\\");\\n\\n    v.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n    for (uint256 i; i < numTokens; ) {\\n      AssetLogic.handleOutgoingAsset(address(self.pooledTokens[i]), msg.sender, amounts[i]);\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    emit RemoveLiquidityImbalance(self.key, msg.sender, amounts, fees, v.d1, v.totalSupply - tokenAmount);\\n\\n    return tokenAmount;\\n  }\\n\\n  /**\\n   * @notice withdraw all admin fees to a given address\\n   * @param self Swap struct to withdraw fees from\\n   * @param to Address to send the fees to\\n   */\\n  function withdrawAdminFees(Swap storage self, address to) internal {\\n    uint256 numTokens = self.pooledTokens.length;\\n    for (uint256 i; i < numTokens; ) {\\n      IERC20 token = self.pooledTokens[i];\\n      uint256 balance = self.adminFees[i];\\n      if (balance != 0) {\\n        delete self.adminFees[i];\\n        AssetLogic.handleOutgoingAsset(address(token), to, balance);\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets the admin fee\\n   * @dev adminFee cannot be higher than 100% of the swap fee\\n   * @param self Swap struct to update\\n   * @param newAdminFee new admin fee to be applied on future transactions\\n   */\\n  function setAdminFee(Swap storage self, uint256 newAdminFee) internal {\\n    require(newAdminFee < Constants.MAX_ADMIN_FEE + 1, \\\"too high\\\");\\n    self.adminFee = newAdminFee;\\n\\n    emit NewAdminFee(self.key, newAdminFee);\\n  }\\n\\n  /**\\n   * @notice update the swap fee\\n   * @dev fee cannot be higher than 1% of each swap\\n   * @param self Swap struct to update\\n   * @param newSwapFee new swap fee to be applied on future transactions\\n   */\\n  function setSwapFee(Swap storage self, uint256 newSwapFee) internal {\\n    require(newSwapFee < Constants.MAX_SWAP_FEE + 1, \\\"too high\\\");\\n    self.swapFee = newSwapFee;\\n\\n    emit NewSwapFee(self.key, newSwapFee);\\n  }\\n\\n  /**\\n   * @notice Check if this stableswap pool exists and is valid (i.e. has been\\n   * initialized and tokens have been added).\\n   * @return bool true if this stableswap pool is valid, false if not.\\n   */\\n  function exists(Swap storage self) internal view returns (bool) {\\n    return !self.disabled && self.pooledTokens.length != 0;\\n  }\\n}\\n\",\"keccak256\":\"0xfe4b0ca8d2451904ec38f94a5adbb09ab792df3ba06191356768a83e0106e497\",\"license\":\"UNLICENSED\"},\"contracts/core/connext/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xc38a47e9bb03aa551a59776362699cff34b19468988cb4614a0b943f29e0cad9\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/MerkleTreeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {ProposedOwnableUpgradeable} from \\\"../shared/ProposedOwnableUpgradeable.sol\\\";\\nimport {MerkleLib} from \\\"./libraries/MerkleLib.sol\\\";\\n\\n/**\\n * @title MerkleTreeManager\\n * @notice Contains a Merkle tree instance and exposes read/write functions for the tree.\\n * @dev On the hub domain there are two MerkleTreeManager contracts, one for the hub and one for the MainnetSpokeConnector.\\n */\\ncontract MerkleTreeManager is ProposedOwnableUpgradeable {\\n  // ========== Custom Errors ===========\\n\\n  error MerkleTreeManager__renounceOwnership_prohibited();\\n  error MerkleTreeManager__setArborist_zeroAddress();\\n  error MerkleTreeManager__setArborist_alreadyArborist();\\n\\n  // ============ Events ============\\n\\n  event ArboristUpdated(address previous, address updated);\\n\\n  event LeafInserted(bytes32 root, uint256 count, bytes32 leaf);\\n\\n  event LeavesInserted(bytes32 root, uint256 count, bytes32[] leaves);\\n\\n  // ============ Structs ============\\n\\n  // Status of Message:\\n  //   0 - None - message has not been proven or processed\\n  //   1 - Proven - message inclusion proof has been validated\\n  //   2 - Processed - message has been dispatched to recipient\\n  enum LeafStatus {\\n    None,\\n    Proven,\\n    Processed\\n  }\\n\\n  // ============ Libraries ============\\n\\n  using MerkleLib for MerkleLib.Tree;\\n\\n  // ============ Public Storage ============\\n\\n  /**\\n   * @notice Core data structure with which this contract is tasked with keeping custody.\\n   * Writable only by the designated arborist.\\n   */\\n  MerkleLib.Tree public tree;\\n\\n  /**\\n   * @notice The arborist contract that has permission to write to this tree.\\n   * @dev This could be the root manager contract or a spoke connector contract, for example.\\n   */\\n  address public arborist;\\n\\n  /**\\n   * @notice The leaves that are proven already\\n   */\\n  mapping(bytes32 => LeafStatus) public leaves;\\n\\n  /**\\n   * @notice domain => next available nonce for the domain.\\n   */\\n  mapping(uint32 => uint32) public nonces;\\n\\n  // ============ Modifiers ============\\n\\n  modifier onlyArborist() {\\n    require(arborist == msg.sender, \\\"!arborist\\\");\\n    _;\\n  }\\n\\n  // ============ Getters ============\\n\\n  /**\\n   * @notice Returns the current branch.\\n   */\\n  function branch() public view returns (bytes32[32] memory) {\\n    return tree.branch;\\n  }\\n\\n  /**\\n   * @notice Calculates and returns the current root.\\n   */\\n  function root() public view returns (bytes32) {\\n    return tree.root();\\n  }\\n\\n  /**\\n   * @notice Returns the number of inserted leaves in the tree (current index).\\n   */\\n  function count() public view returns (uint256) {\\n    return tree.count;\\n  }\\n\\n  /**\\n   * @notice Convenience getter: returns the root and count.\\n   */\\n  function rootAndCount() public view returns (bytes32, uint256) {\\n    return (tree.root(), tree.count);\\n  }\\n\\n  // ======== Initializer =========\\n\\n  function initialize(address _arborist) public initializer {\\n    __MerkleTreeManager_init(_arborist);\\n    __ProposedOwnable_init();\\n  }\\n\\n  /**\\n   * @dev Initializes MerkleTreeManager instance. Sets the msg.sender as the initial permissioned\\n   */\\n  function __MerkleTreeManager_init(address _arborist) internal onlyInitializing {\\n    __MerkleTreeManager_init_unchained(_arborist);\\n  }\\n\\n  function __MerkleTreeManager_init_unchained(address _arborist) internal onlyInitializing {\\n    arborist = _arborist;\\n  }\\n\\n  // ============ Admin Functions ==============\\n\\n  /**\\n   * @notice Method for the current arborist to assign write permissions to a new arborist.\\n   * @param newArborist The new address to set as the current arborist.\\n   */\\n  function setArborist(address newArborist) external onlyOwner {\\n    if (newArborist == address(0)) revert MerkleTreeManager__setArborist_zeroAddress();\\n    address current = arborist;\\n    if (current == newArborist) revert MerkleTreeManager__setArborist_alreadyArborist();\\n\\n    // Emit updated event\\n    emit ArboristUpdated(current, newArborist);\\n\\n    arborist = newArborist;\\n  }\\n\\n  /**\\n   * @notice Remove ability to renounce ownership\\n   * @dev Renounce ownership should be impossible as long as there is a possibility the\\n   * arborist may change.\\n   */\\n  function renounceOwnership() public virtual override onlyOwner {\\n    revert MerkleTreeManager__renounceOwnership_prohibited();\\n  }\\n\\n  // ========= Public Functions =========\\n\\n  /**\\n   * @notice Used to increment nonce\\n   * @param _domain The domain the nonce will be used for\\n   * @return _nonce The incremented nonce\\n   */\\n  function incrementNonce(uint32 _domain) public onlyArborist returns (uint32 _nonce) {\\n    _nonce = nonces[_domain]++;\\n  }\\n\\n  /**\\n   * @notice Used to track proven leaves\\n   * @param _leaf The leaf to mark as proven\\n   */\\n  function markAsProven(bytes32 _leaf) public onlyArborist {\\n    require(leaves[_leaf] == LeafStatus.None, \\\"!empty\\\");\\n    leaves[_leaf] = LeafStatus.Proven;\\n  }\\n\\n  /**\\n   * @notice Used to track processed leaves\\n   * @param _leaf The leaf to mark as proven\\n   */\\n  function markAsProcessed(bytes32 _leaf) public onlyArborist {\\n    require(leaves[_leaf] == LeafStatus.Proven, \\\"!proven\\\");\\n    leaves[_leaf] = LeafStatus.Processed;\\n  }\\n\\n  /**\\n   * @notice Inserts the given leaves into the tree.\\n   * @param _leaves The leaves to be inserted into the tree.\\n   * @return _root Current root for convenience.\\n   * @return _count Current node count (i.e. number of indices) AFTER the insertion of the new leaf,\\n   * provided for convenience.\\n   */\\n  function insert(bytes32[] memory _leaves) public onlyArborist returns (bytes32 _root, uint256 _count) {\\n    // For > 1 leaf, considerably more efficient to put this tree into memory, conduct operations,\\n    // then re-assign it to storage - *especially* if we have multiple leaves to insert.\\n    MerkleLib.Tree memory _tree = tree;\\n\\n    uint256 leafCount = _leaves.length;\\n    for (uint256 i; i < leafCount; ) {\\n      // Insert the new node (using in-memory method).\\n      _tree = _tree.insert(_leaves[i]);\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    // Write the newly updated tree to storage.\\n    tree = _tree;\\n\\n    // Get return details for convenience.\\n    _count = _tree.count;\\n    // NOTE: Root calculation method currently reads from storage only.\\n    _root = tree.root();\\n\\n    emit LeavesInserted(_root, _count, _leaves);\\n  }\\n\\n  /**\\n   * @notice Inserts the given leaf into the tree.\\n   * @param leaf The leaf to be inserted into the tree.\\n   * @return _root Current root for convenience.\\n   * @return _count Current node count (i.e. number of indices) AFTER the insertion of the new leaf,\\n   * provided for convenience.\\n   */\\n  function insert(bytes32 leaf) public onlyArborist returns (bytes32 _root, uint256 _count) {\\n    // Insert the new node.\\n    tree = tree.insert(leaf);\\n    _count = tree.count;\\n    _root = tree.root();\\n\\n    emit LeafInserted(_root, _count, leaf);\\n  }\\n\\n  // ============ Upgrade Gap ============\\n  uint256[46] private __GAP; // gap for upgrade safety\\n}\\n\",\"keccak256\":\"0x6c85e8e6df2192fd4d8099efbbb8b3ff40211b777174a99abe5e6d60f9529a3c\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/RootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ProposedOwnable} from \\\"../shared/ProposedOwnable.sol\\\";\\n\\nimport {IRootManager} from \\\"./interfaces/IRootManager.sol\\\";\\nimport {IHubConnector} from \\\"./interfaces/IHubConnector.sol\\\";\\nimport {QueueLib} from \\\"./libraries/Queue.sol\\\";\\nimport {DomainIndexer} from \\\"./libraries/DomainIndexer.sol\\\";\\nimport {SnapshotId} from \\\"./libraries/SnapshotId.sol\\\";\\n\\nimport {MerkleTreeManager} from \\\"./MerkleTreeManager.sol\\\";\\nimport {WatcherClient} from \\\"./WatcherClient.sol\\\";\\n\\nimport {IHubSpokeConnector} from \\\"./interfaces/IHubSpokeConnector.sol\\\";\\n\\n/**\\n * @notice This contract exists at cluster hubs, and aggregates all transfer roots from messaging\\n * spokes into a single merkle tree. Regularly broadcasts the root of the aggregator tree back out\\n * to all the messaging spokes.\\n */\\ncontract RootManager is ProposedOwnable, IRootManager, WatcherClient, DomainIndexer {\\n  // ============ Libraries ============\\n\\n  using QueueLib for QueueLib.Queue;\\n\\n  // ============ Events ============\\n\\n  event DelayBlocksUpdated(uint256 previous, uint256 updated);\\n\\n  event DisputeBlocksUpdated(uint256 previous, uint256 updated);\\n\\n  event MinDisputeBlocksUpdated(uint256 previous, uint256 updated);\\n\\n  event RootReceived(uint32 domain, bytes32 receivedRoot, uint256 queueIndex);\\n\\n  event RootDiscarded(bytes32 fraudulentRoot);\\n\\n  /**\\n   * @notice Emitted when a new proposer is added\\n   * @param proposer The address of the proposer\\n   */\\n  event ProposerAdded(address indexed proposer);\\n\\n  /**\\n   * @notice Emitted when a proposer is removed\\n   * @param proposer The address of the proposer\\n   */\\n  event ProposerRemoved(address indexed proposer);\\n\\n  event ConnectorAdded(uint32 domain, address connector, uint32[] domains, address[] connectors);\\n\\n  event ConnectorRemoved(uint32 domain, address connector, uint32[] domains, address[] connectors, address caller);\\n\\n  event PropagateFailed(uint32 domain, address connector);\\n\\n  /**\\n   * @notice Emitted when slow mode is activated\\n   * @param watcher The address of the watcher who called the function\\n   */\\n  event SlowModeActivated(address indexed watcher);\\n\\n  /**\\n   * @notice Emitted when optimistic mode is activated\\n   */\\n  event OptimisticModeActivated();\\n\\n  /**\\n   * @notice Emitted when a root is propagated\\n   * @dev It doesnt matter if the root was generated optimistically or on-chain.\\n   * @param aggregateRoot The aggregate root propagated\\n   * @param domainsHash The current domain hash\\n   */\\n  event AggregateRootPropagated(bytes32 indexed aggregateRoot, bytes32 domainsHash);\\n\\n  /**\\n   * @notice Emitted when a new aggregate root is proposed\\n   * @param snapshotId The snapshot id\\n   * @param endOfDispute The block at which the dispute period is over\\n   * @param aggregateRoot The new aggregate root proposed\\n   * @param baseRoot The root of the tree before the snapshot roots were inserted by proposer\\n   * @param snapshotsRoots The list of roots added to aggregate tree\\n   * @param domains The list of all domains\\n   */\\n  event AggregateRootProposed(\\n    uint256 indexed snapshotId,\\n    uint256 endOfDispute,\\n    bytes32 indexed aggregateRoot,\\n    bytes32 indexed baseRoot,\\n    bytes32[] snapshotsRoots,\\n    uint32[] domains\\n  );\\n\\n  /**\\n   * @notice Emitted when an aggregate root is added to the validAggregateRoots map during optimistic mode.\\n   * @param aggregateRoot The saved aggregate root\\n   * @param rootTimestamp The timestamp at which the aggregate root was saved.\\n   */\\n  event AggregateRootSavedOptimistic(bytes32 indexed aggregateRoot, uint256 rootTimestamp);\\n\\n  /**\\n   * @notice Emitted when an aggregate root is added to the validAggregateRoots map during slow mode.\\n   * @param aggregateRoot   The saved aggregate root\\n   * @param leafCount       The new number of leaves in the tree.\\n   * @param aggregatedRoots The verified inbound roots inserted in the tree.\\n   * @param rootTimestamp   The timestamp at which the aggregate root was saved.\\n   */\\n  event AggregateRootSavedSlow(\\n    bytes32 indexed aggregateRoot,\\n    uint256 leafCount,\\n    bytes32[] aggregatedRoots,\\n    uint256 rootTimestamp\\n  );\\n\\n  /**\\n   * @notice Emitted when a domain is set as the hub domain.\\n   * @param domain The domain set as hub domain.\\n   */\\n  event HubDomainSet(uint32 domain);\\n\\n  /**\\n   * @notice Emitted when the previously set hub domain is cleared.\\n   */\\n  event HubDomainCleared();\\n\\n  // ============ Errors ============\\n\\n  error RootManager_proposeAggregateRoot__InvalidSnapshotId(uint256 snapshotId);\\n\\n  error RootManager_checkDomains__InvalidDomains();\\n\\n  error RootManager_finalize__InvalidAggregateRoot();\\n\\n  error RootManager_onlyOptimisticMode__SlowModeOn();\\n\\n  error RootManager_activateOptimisticMode__OptimisticModeOn();\\n\\n  error RootManager_aggregate__OptimisticModeOn();\\n\\n  error RootManager_proposeAggregateRoot__ProposeInProgress();\\n\\n  error RootManager_finalize__ProposeInProgress();\\n\\n  error RootManager_onlyProposer__NotWhitelistedProposer(address caller);\\n\\n  error RootManager_sendRootToHub__NoMessageSent();\\n\\n  error RootManager_finalize__InvalidInputHash();\\n\\n  error RootManager_setMinDisputeBlocks__SameMinDisputeBlocksAsBefore();\\n\\n  error RootManager_setDisputeBlocks__SameDisputeBlocksAsBefore();\\n\\n  error RootManager_setDisputeBlocks__DisputeBlocksLowerThanMin();\\n\\n  error RootManager_constructor__DisputeBlocksLowerThanMin();\\n\\n  error RootManager__renounceOwnership_prohibited();\\n\\n  error RootManager_propagate__AggregateRootIsZero();\\n\\n  error RootManager_setHubDomain__InvalidDomain();\\n\\n  // ============ Properties ============\\n\\n  /**\\n   * @notice Maximum number of values to dequeue from the queue in one sitting (one call of `propagate`\\n   * or `dequeue`). Used to cap gas requirements.\\n   */\\n  uint128 public constant DEQUEUE_MAX = 100;\\n\\n  /**\\n   * @notice Root used to keep the slots of proposedAggregateRootHash warm.\\n   */\\n  bytes32 public constant FINALIZED_HASH = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n  /**\\n   * @notice Number of blocks to delay the processing of a message to allow for watchers to verify\\n   * the validity and pause if necessary.\\n   */\\n  uint256 public delayBlocks;\\n\\n  /**\\n   * @notice The number of blocks watchers have to detect and invalidate the proposed root.\\n   */\\n  uint256 public disputeBlocks;\\n\\n  /**\\n   * @notice The minimum number of blocks disputeBlocks can be set to.\\n   */\\n  uint256 public minDisputeBlocks;\\n\\n  /**\\n   * @notice True if the system is working in optimistic mode. Otherwise is working in slow mode\\n   */\\n  bool public optimisticMode;\\n\\n  /**\\n   * @notice The last aggregate root we propagated to spoke chains (mapping keyed on domain). Used to prevent sending redundant\\n   * aggregate roots in `propagate`.\\n   */\\n  mapping(uint32 => bytes32) public lastPropagatedRoot;\\n\\n  /**\\n   * @notice Queue used for management of verification for inbound roots from spoke chains. Once\\n   * the verification period elapses, the inbound messages can be aggregated into the merkle tree\\n   * for propagation to spoke chains.\\n   * @dev Watchers should be able to watch this queue for fraudulent messages and pause this contract\\n   * if fraud is detected.\\n   */\\n  QueueLib.Queue public pendingInboundRoots;\\n\\n  /**\\n   * @notice The resulting hash of keccaking the proposed aggregate root and the block at which its dispute ends.\\n   * @dev    Set to 0x1 to prevent someone from calling finalize() the moment the contract is deployed\\n   */\\n  bytes32 public proposedAggregateRootHash = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n  /**\\n   * @notice MerkleTreeManager contract instance. Will hold the active tree of aggregated inbound roots.\\n   * The root of this tree will be distributed crosschain to all spoke domains.\\n   */\\n  MerkleTreeManager public immutable MERKLE;\\n\\n  /**\\n   * @notice This is used for the `onlyProposers` modifier, which gates who\\n   * can propose new roots using `proposeAggregateRoot`.\\n   */\\n  mapping(address => bool) public allowlistedProposers;\\n\\n  /**\\n   * @notice The list of valid aggregate roots for a given timestamp.\\n   * @dev Each time a new aggregate root is generated or\\n   * finalized, it will be added to this mapping using the block.timestamp as key.\\n   * @dev This is only used as Data-Availability for off-chain agents. Especially for the Watchers that fetch the\\n   * correct aggregate root from this contract in order to verify the data proposed on the Spoke Connectors.\\n   * @dev rootTimestamp => aggregateRoot\\n   */\\n  mapping(uint256 => bytes32) public validAggregateRoots;\\n\\n  /**\\n   * @notice Timestamp of the last aggregate root saved.\\n   * @dev Used to ensure that the propagate function will send the latest aggregate root available.\\n   */\\n  uint256 public lastSavedAggregateRootTimestamp;\\n\\n  /**\\n   * @notice Domain id of the current network\\n   */\\n  uint32 public hubDomain;\\n\\n  // ============ Modifiers ============\\n\\n  modifier onlyConnector(uint32 _domain) {\\n    require(getConnectorForDomain(_domain) == msg.sender, \\\"!connector\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks if the proposed domains are valid\\n   */\\n  modifier checkDomains(uint32[] calldata _domains) {\\n    if (keccak256(abi.encode(_domains)) != domainsHash) revert RootManager_checkDomains__InvalidDomains();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks if root manager is working in optimistic mode\\n   */\\n  modifier onlyOptimisticMode() {\\n    if (!optimisticMode) revert RootManager_onlyOptimisticMode__SlowModeOn();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Checks if the proposer is in the allow list\\n   */\\n  modifier onlyProposer() {\\n    if (!allowlistedProposers[msg.sender]) revert RootManager_onlyProposer__NotWhitelistedProposer(msg.sender);\\n    _;\\n  }\\n\\n  // ============ Constructor ============\\n\\n  /**\\n   * @notice Creates a new RootManager instance.\\n   * @param _delayBlocks The delay for the validation period for incoming messages in blocks.\\n   * @param _merkle The address of the MerkleTreeManager on this domain.\\n   * @param _watcherManager The address of the WatcherManager on this domain.\\n   */\\n  constructor(\\n    uint256 _delayBlocks,\\n    address _merkle,\\n    address _watcherManager,\\n    uint256 _minDisputeBlocks,\\n    uint256 _disputeBlocks\\n  ) ProposedOwnable() WatcherClient(_watcherManager) {\\n    _setOwner(msg.sender);\\n    if (_disputeBlocks < _minDisputeBlocks) revert RootManager_constructor__DisputeBlocksLowerThanMin();\\n    require(_merkle != address(0), \\\"!zero merkle\\\");\\n    MERKLE = MerkleTreeManager(_merkle);\\n\\n    delayBlocks = _delayBlocks;\\n    minDisputeBlocks = _minDisputeBlocks;\\n    disputeBlocks = _disputeBlocks;\\n\\n    // Initialize pending inbound root queue.\\n    pendingInboundRoots.initialize();\\n  }\\n\\n  // ================ Getters ================\\n\\n  function getPendingInboundRootsCount() public view returns (uint256) {\\n    return pendingInboundRoots.length();\\n  }\\n\\n  /**\\n   * @notice Get the duration of the snapshot\\n   *\\n   * @return _snapshotDuration The duration of the snapshot\\n   */\\n  function getSnapshotDuration() external pure returns (uint256 _snapshotDuration) {\\n    _snapshotDuration = SnapshotId.SNAPSHOT_DURATION;\\n  }\\n\\n  // ============ Admin Functions ============\\n\\n  /**\\n   * @notice Adds a proposer to the allowlist.\\n   * @dev Only allowlisted proposers can call `proposeAggregateRoot`.\\n   */\\n  function addProposer(address _proposer) external onlyOwner {\\n    allowlistedProposers[_proposer] = true;\\n    emit ProposerAdded(_proposer);\\n  }\\n\\n  /**\\n   * @notice Removes a proposer from the allowlist.\\n   * @dev Only allowlisted proposers can call `proposeAggregateRoot`.\\n   */\\n  function removeProposer(address _proposer) external onlyOwner {\\n    delete allowlistedProposers[_proposer];\\n    emit ProposerRemoved(_proposer);\\n  }\\n\\n  /**\\n   * @notice Set the `minDisputeBlocks` variable to the provided parameter.\\n   */\\n  function setMinDisputeBlocks(uint256 _minDisputeBlocks) external onlyOwner {\\n    if (_minDisputeBlocks == minDisputeBlocks) revert RootManager_setMinDisputeBlocks__SameMinDisputeBlocksAsBefore();\\n    emit MinDisputeBlocksUpdated(minDisputeBlocks, _minDisputeBlocks);\\n    minDisputeBlocks = _minDisputeBlocks;\\n  }\\n\\n  /**\\n   * @notice Set the `disputeBlocks`, the duration, in blocks, of the dispute process for\\n   * a given proposed root\\n   */\\n  function setDisputeBlocks(uint256 _disputeBlocks) external onlyOwner {\\n    if (_disputeBlocks < minDisputeBlocks) revert RootManager_setDisputeBlocks__DisputeBlocksLowerThanMin();\\n    if (_disputeBlocks == disputeBlocks) revert RootManager_setDisputeBlocks__SameDisputeBlocksAsBefore();\\n    emit DisputeBlocksUpdated(disputeBlocks, _disputeBlocks);\\n    disputeBlocks = _disputeBlocks;\\n  }\\n\\n  /**\\n   * @notice Set the `delayBlocks`, the period in blocks over which an incoming message\\n   * is verified.\\n   */\\n  function setDelayBlocks(uint256 _delayBlocks) external onlyOwner {\\n    require(_delayBlocks != delayBlocks, \\\"!delayBlocks\\\");\\n    emit DelayBlocksUpdated(delayBlocks, _delayBlocks);\\n    delayBlocks = _delayBlocks;\\n  }\\n\\n  /**\\n   * @notice Add a new supported domain and corresponding hub connector to the system. This new domain\\n   * will receive the propagated aggregate root.\\n   * @dev Only owner can add a new connector. Address should be the connector on L1.\\n   * @dev Cannot add address(0) to avoid duplicated domain in array and reduce gas fee while propagating.\\n   *\\n   * @param _domain The target spoke domain of the given connector.\\n   * @param _connector Address of the hub connector.\\n   */\\n  function addConnector(uint32 _domain, address _connector) external onlyOwner {\\n    addDomain(_domain, _connector);\\n    emit ConnectorAdded(_domain, _connector, domains, connectors);\\n  }\\n\\n  /**\\n   * @notice Remove support for a connector and respective domain. That connector/domain will no longer\\n   * receive updates for the latest aggregate root.\\n   * @dev Only watcher can remove a connector.\\n   * @dev The proposedAggregateRootHash will be set to the FINALIZED_HASH.\\n   * TODO: Could add a metatx-able `removeConnectorWithSig` if we want to use relayers?\\n   *\\n   * @param _domain The spoke domain of the target connector we want to remove.\\n   */\\n  function removeConnector(uint32 _domain) external onlyWatcher {\\n    address _connector = removeDomain(_domain);\\n    proposedAggregateRootHash = FINALIZED_HASH;\\n    emit ConnectorRemoved(_domain, _connector, domains, connectors, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Removes (effectively blocklists) a given (fraudulent) root from the queue of pending\\n   * inbound roots.\\n   * @dev The given root does NOT have to currently be in the queue. It isn't removed from the queue\\n   * directly, but instead is filtered out when dequeuing is done for the sake of aggregation.\\n   * @dev Can only be called by the owner when the protocol is paused.\\n   *\\n   * @param _root The root to be discarded.\\n   */\\n  function discardRoot(bytes32 _root) external onlyOwner whenPaused {\\n    pendingInboundRoots.remove(_root);\\n    emit RootDiscarded(_root);\\n  }\\n\\n  /**\\n   * @notice Remove ability to renounce ownership\\n   * @dev Renounce ownership should be impossible as long as watchers can freely remove connectors\\n   * and only the owner can add them back\\n   */\\n  function renounceOwnership() public virtual override(ProposedOwnable, WatcherClient) onlyOwner {\\n    revert RootManager__renounceOwnership_prohibited();\\n  }\\n\\n  /**\\n   * @notice Sets domain corresponding to the hub domain.\\n   *\\n   * @param _domain The domain to be set as hub domain.\\n   */\\n  function setHubDomain(uint32 _domain) external onlyOwner {\\n    if (!isDomainSupported(_domain)) revert RootManager_setHubDomain__InvalidDomain();\\n    hubDomain = _domain;\\n    emit HubDomainSet(_domain);\\n  }\\n\\n  /**\\n   * @notice Removes the domain associated with the hub domain.\\n   */\\n  function clearHubDomain() external onlyOwner {\\n    delete hubDomain;\\n    emit HubDomainCleared();\\n  }\\n\\n  // ============ Public Functions ============\\n\\n  /**\\n   * @notice Propose a new aggregate root\\n   * @dev snapshotId, snapshotRoots and domains are needed for validation and data availability for off-chain agents.\\n   * In the case of domains we need to check which are the current valid domains at the time of proposing.\\n   * This is gonna be used by the off-chain scripts to know which domains to check when validating each proposition.\\n   * This is to avoid problems if a new domain is added in the middle of an on-going propose.\\n   * Domains should be in the same order as they are in this contract.\\n   * Snapshot roots provided should be in order of insertion and should respect the domains order.\\n   *\\n   * @param _snapshotId The snapshot id used\\n   * @param _aggregateRoot The new aggregate root\\n   * @param _snapshotsRoots Array of snapshot roots inserted\\n   * @param _domains Array of all the domains\\n   */\\n  function proposeAggregateRoot(\\n    uint256 _snapshotId,\\n    bytes32 _aggregateRoot,\\n    bytes32[] calldata _snapshotsRoots,\\n    uint32[] calldata _domains\\n  ) external onlyProposer onlyOptimisticMode checkDomains(_domains) whenNotPaused {\\n    if (_snapshotId != SnapshotId.getLastCompletedSnapshotId())\\n      revert RootManager_proposeAggregateRoot__InvalidSnapshotId(_snapshotId);\\n    if (proposedAggregateRootHash != FINALIZED_HASH) revert RootManager_proposeAggregateRoot__ProposeInProgress();\\n\\n    uint256 _endOfDispute = block.number + disputeBlocks;\\n    proposedAggregateRootHash = keccak256(abi.encode(_aggregateRoot, _endOfDispute));\\n\\n    emit AggregateRootProposed(_snapshotId, _endOfDispute, _aggregateRoot, MERKLE.root(), _snapshotsRoots, _domains);\\n  }\\n\\n  /**\\n   * @notice Finalizes the proposed aggregate root. This makes the current proposed root the new validated and\\n   * ready to propagate root.\\n   * @dev The system has to be in optimistic mode and propose's dispute time over.\\n   * Finalized root will stop being monitored by off-chain agents.\\n   *\\n   * @param _proposedAggregateRoot The aggregate root currently proposed\\n   * @param _endOfDispute          The block in which the dispute period for proposedAggregateRootHash finalizes\\n   */\\n  function finalize(bytes32 _proposedAggregateRoot, uint256 _endOfDispute) public onlyOptimisticMode whenNotPaused {\\n    bytes32 _proposedAggregateRootHash = proposedAggregateRootHash;\\n    if (_proposedAggregateRootHash == FINALIZED_HASH) revert RootManager_finalize__InvalidAggregateRoot();\\n    bytes32 _userInputHash = keccak256(abi.encode(_proposedAggregateRoot, _endOfDispute));\\n    if (_userInputHash != _proposedAggregateRootHash) revert RootManager_finalize__InvalidInputHash();\\n    if (_endOfDispute > block.number) revert RootManager_finalize__ProposeInProgress();\\n\\n    // Save data\\n    validAggregateRoots[block.timestamp] = _proposedAggregateRoot;\\n    lastSavedAggregateRootTimestamp = block.timestamp;\\n\\n    // Clear the propose slot\\n    proposedAggregateRootHash = FINALIZED_HASH;\\n\\n    emit AggregateRootSavedOptimistic(_proposedAggregateRoot, block.timestamp);\\n  }\\n\\n  /**\\n   * @notice Unifies the flow of finalize and propagate.\\n   * @dev Should be called by relayers only when proposed root is ready to be finalized.\\n   *\\n   * @param _connectors Array of connectors: should match exactly the array of `connectors` in storage;\\n   * used here to reduce gas costs, and keep them static regardless of number of supported domains.\\n   * @param _fees Array of fees in native token for an AMB if required\\n   * @param _encodedData Array of encodedData: extra params for each AMB if required\\n   * @param _proposedAggregateRoot The aggregate root currently proposed\\n   * @param _endOfDispute          The block in which the dispute period for proposedAggregateRootHash finalizes\\n   */\\n  function finalizeAndPropagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData,\\n    bytes32 _proposedAggregateRoot,\\n    uint256 _endOfDispute\\n  ) external payable {\\n    finalize(_proposedAggregateRoot, _endOfDispute);\\n    propagate(_connectors, _fees, _encodedData);\\n  }\\n\\n  /**\\n   * @notice This is called by relayers to take the current aggregate tree root and propagate it to all\\n   * spoke domains (via their respective hub connectors).\\n   * @dev Should be called by relayers at a regular interval.\\n   * Workflow is slightly different depending on the mode the system is in.\\n   *\\n   * @param _connectors Array of connectors: should match exactly the array of `connectors` in storage;\\n   * used here to reduce gas costs, and keep them static regardless of number of supported domains.\\n   * @param _fees Array of fees in native token for an AMB if required\\n   * @param _encodedData Array of encodedData: extra params for each AMB if required\\n   */\\n  function propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData\\n  ) public payable whenNotPaused {\\n    validateConnectors(_connectors);\\n\\n    uint256 _numDomains = _connectors.length;\\n    // Sanity check: fees and encodedData lengths matches connectors length.\\n    require(_fees.length == _numDomains && _encodedData.length == _numDomains, \\\"invalid lengths\\\");\\n\\n    // If in slow mode, we dequeue to ensure that we add the inboundRoots that are ready.\\n    if (!optimisticMode) dequeue();\\n\\n    bytes32 _aggregateRoot = validAggregateRoots[lastSavedAggregateRootTimestamp];\\n\\n    if (_aggregateRoot == 0) revert RootManager_propagate__AggregateRootIsZero();\\n\\n    emit AggregateRootPropagated(_aggregateRoot, domainsHash);\\n\\n    _sendRootToHubs(_aggregateRoot, _connectors, _fees, _encodedData);\\n  }\\n\\n  /**\\n   * @notice Send an aggregate root to every connector.\\n   * @dev CRITICAL: This function does NOT check if _connectors sent to it are correct or not and can always be called internally.\\n   * All the needed checks must be done before calling this function.\\n   *\\n   * @param _aggregateRoot The aggregate root that needs to be sent to every connector.\\n   * @param _connectors Array of connectors: should match exactly the array of `connectors` in storage;\\n   * used here to reduce gas costs, and keep them static regardless of number of supported domains.\\n   * @param _fees Array of fees in native token for an AMB if required\\n   * @param _encodedData Array of encodedData: extra params for each AMB if required\\n   */\\n  function _sendRootToHubs(\\n    bytes32 _aggregateRoot,\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData\\n  ) internal {\\n    uint256 refund = msg.value;\\n    bool sent;\\n    for (uint32 i; i < _connectors.length; ) {\\n      // Sanity check: skip propagating a redundant aggregate root.\\n      bytes32 previous = lastPropagatedRoot[domains[i]];\\n      if (previous == _aggregateRoot) {\\n        unchecked {\\n          ++i;\\n        }\\n        continue;\\n      }\\n\\n      // Try to send the message with appropriate encoded data and fees\\n      // Continue on revert, but emit an event\\n      try\\n        IHubConnector(_connectors[i]).sendMessage{value: _fees[i]}(abi.encodePacked(_aggregateRoot), _encodedData[i])\\n      {\\n        // NOTE: This will ensure there is sufficient msg.value for all fees before calling `sendMessage`\\n        // This will revert as soon as there are insufficient fees for call i, even if call n > i has\\n        // sufficient budget, this function will revert\\n        refund -= _fees[i];\\n        // mark that the message was sent\\n        sent = true;\\n        // Set the last propagated root\\n        lastPropagatedRoot[domains[i]] = _aggregateRoot;\\n      } catch {\\n        emit PropagateFailed(domains[i], _connectors[i]);\\n      }\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n\\n    // Ensure *a* message was sent to prevent excess relayer spend\\n    if (!sent) {\\n      revert RootManager_sendRootToHub__NoMessageSent();\\n    }\\n\\n    // Refund caller\\n    if (refund > 0) {\\n      Address.sendValue(payable(msg.sender), refund);\\n    }\\n  }\\n\\n  /**\\n   * @notice Sends the latest valid aggregate root to the hub domain's spoke connector.\\n   * @dev This has no guards as the guards should be in the spoke connector. For example, the spoke connector should\\n   *      guard against receiving the root through this function if the spoke connector is not in optimistic mode.\\n   */\\n  function sendRootToHubSpoke() external whenNotPaused {\\n    bytes32 _aggregateRoot = validAggregateRoots[lastSavedAggregateRootTimestamp];\\n    IHubSpokeConnector(getConnectorForDomain(hubDomain)).saveAggregateRoot(_aggregateRoot);\\n  }\\n\\n  /**\\n   * @notice Accept an inbound root coming from a given domain's hub connector, enqueuing this incoming\\n   * root into the current queue as it awaits the verification period.\\n   * @dev The aggregate tree's root, which will include this inbound root, will be propagated to all spoke\\n   * domains (via `propagate`) on a regular basis assuming the verification period is surpassed without\\n   * dispute.\\n   *\\n   * @param _domain The source domain of the given root.\\n   * @param _inbound The inbound root coming from the given domain.\\n   */\\n  function aggregate(uint32 _domain, bytes32 _inbound) external whenNotPaused onlyConnector(_domain) {\\n    if (optimisticMode) revert RootManager_aggregate__OptimisticModeOn();\\n    uint128 lastIndex = pendingInboundRoots.enqueue(_inbound);\\n    emit RootReceived(_domain, _inbound, lastIndex);\\n  }\\n\\n  /**\\n   * @notice Dequeue verified inbound roots and insert them into the aggregator tree.\\n   * @dev Will dequeue a fixed maximum amount of roots to prevent out of gas errors. As such, this\\n   * method is public and separate from `propagate` so we can curtail an overloaded queue as needed.\\n   *\\n   * @return bytes32 The new aggregate root.\\n   * @return uint256 The updated count (number of leaves).\\n   */\\n  function dequeue() public whenNotPaused returns (bytes32, uint256) {\\n    // Get all of the verified roots from the queue.\\n    bytes32[] memory _verifiedInboundRoots = pendingInboundRoots.dequeueVerified(delayBlocks, DEQUEUE_MAX);\\n\\n    // If there's nothing dequeued, just return the root and count.\\n    if (_verifiedInboundRoots.length == 0) {\\n      return MERKLE.rootAndCount();\\n    }\\n\\n    // Insert the leaves into the aggregator tree (method will also calculate and return the current\\n    // aggregate root and count).\\n    (bytes32 _aggregateRoot, uint256 _count) = MERKLE.insert(_verifiedInboundRoots);\\n\\n    validAggregateRoots[block.timestamp] = _aggregateRoot;\\n    lastSavedAggregateRootTimestamp = block.timestamp;\\n\\n    emit AggregateRootSavedSlow(_aggregateRoot, _count, _verifiedInboundRoots, block.timestamp);\\n\\n    return (_aggregateRoot, _count);\\n  }\\n\\n  /**\\n   * @notice Watcher can set the system in slow mode.\\n   * @dev Sets the proposed aggregate root hash to FINALIZED_HASH, invalidating it.\\n   */\\n  function activateSlowMode() external onlyWatcher onlyOptimisticMode {\\n    optimisticMode = false;\\n\\n    proposedAggregateRootHash = FINALIZED_HASH;\\n    emit SlowModeActivated(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Owner can set the system to optimistic mode.\\n   * @dev Elements in the queue will be discarded.\\n   * To save gas we are not deleting the elements from the queue, but moving the last counter to first - 1\\n   * so we can reassign new elements to those positions in the future.\\n   * Discarded roots will be included on the upcoming optimistic aggregateRoot.\\n   */\\n  function activateOptimisticMode() external onlyOwner {\\n    if (optimisticMode) revert RootManager_activateOptimisticMode__OptimisticModeOn();\\n\\n    pendingInboundRoots.last = pendingInboundRoots.first - 1;\\n\\n    optimisticMode = true;\\n    emit OptimisticModeActivated();\\n  }\\n}\\n\",\"keccak256\":\"0x3d000caf540675efcfac2d3c3701597e5a6731218f9f3b19c58b29cc4811566f\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/WatcherClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport {ProposedOwnable} from \\\"../shared/ProposedOwnable.sol\\\";\\nimport {WatcherManager} from \\\"./WatcherManager.sol\\\";\\n\\n/**\\n * @notice This contract abstracts the functionality of the watcher manager.\\n * Contracts can inherit this contract to be able to use the watcher manager's shared watcher set.\\n */\\n\\ncontract WatcherClient is ProposedOwnable, Pausable {\\n  // ============ Events ============\\n  /**\\n   * @notice Emitted when the manager address changes\\n   * @param watcherManager The updated manager\\n   */\\n  event WatcherManagerChanged(address watcherManager);\\n\\n  // ============ Properties ============\\n  /**\\n   * @notice The `WatcherManager` contract governs the watcher allowlist.\\n   * @dev Multiple clients can share a watcher set using the same manager\\n   */\\n  WatcherManager public watcherManager;\\n\\n  // ============ Constructor ============\\n  constructor(address _watcherManager) ProposedOwnable() {\\n    watcherManager = WatcherManager(_watcherManager);\\n  }\\n\\n  // ============ Modifiers ============\\n  /**\\n   * @notice Enforces the sender is the watcher\\n   */\\n  modifier onlyWatcher() {\\n    require(watcherManager.isWatcher(msg.sender), \\\"!watcher\\\");\\n    _;\\n  }\\n\\n  // ============ Admin fns ============\\n  /**\\n   * @notice Owner can enroll a watcher (abilities are defined by inheriting contracts)\\n   */\\n  function setWatcherManager(address _watcherManager) external onlyOwner {\\n    require(_watcherManager != address(watcherManager), \\\"already watcher manager\\\");\\n    watcherManager = WatcherManager(_watcherManager);\\n    emit WatcherManagerChanged(_watcherManager);\\n  }\\n\\n  /**\\n   * @notice Owner can unpause contracts if fraud is detected by watchers\\n   */\\n  function unpause() external onlyOwner whenPaused {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Remove ability to renounce ownership\\n   * @dev Renounce ownership should be impossible as long as only the owner\\n   * is able to unpause the contracts. You can still propose `address(0)`,\\n   * but it will never be accepted.\\n   */\\n  function renounceOwnership() public virtual override onlyOwner {\\n    require(false, \\\"prohibited\\\");\\n  }\\n\\n  // ============ Watcher fns ============\\n\\n  /**\\n   * @notice Watchers can pause contracts if fraud is detected\\n   */\\n  function pause() external onlyWatcher whenNotPaused {\\n    _pause();\\n  }\\n}\\n\",\"keccak256\":\"0xe9c9a71695f8c4b93d5d59b719f162c805cd85879aad5f4175b6fa7a3236df95\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/WatcherManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {ProposedOwnable} from \\\"../shared/ProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This contract manages a set of watchers. This is meant to be used as a shared resource that contracts can\\n * inherit to make use of the same watcher set.\\n */\\n\\ncontract WatcherManager is ProposedOwnable {\\n  // ============ Events ============\\n  event WatcherAdded(address watcher);\\n\\n  event WatcherRemoved(address watcher);\\n\\n  // ============ Properties ============\\n  mapping(address => bool) public isWatcher;\\n\\n  // ============ Constructor ============\\n  constructor() ProposedOwnable() {\\n    _setOwner(msg.sender);\\n  }\\n\\n  // ============ Modifiers ============\\n\\n  // ============ Admin fns ============\\n  /**\\n   * @dev Owner can enroll a watcher (abilities are defined by inheriting contracts)\\n   */\\n  function addWatcher(address _watcher) external onlyOwner {\\n    require(!isWatcher[_watcher], \\\"already watcher\\\");\\n    isWatcher[_watcher] = true;\\n    emit WatcherAdded(_watcher);\\n  }\\n\\n  /**\\n   * @dev Owner can unenroll a watcher (abilities are defined by inheriting contracts)\\n   */\\n  function removeWatcher(address _watcher) external onlyOwner {\\n    require(isWatcher[_watcher], \\\"!exist\\\");\\n    delete isWatcher[_watcher];\\n    emit WatcherRemoved(_watcher);\\n  }\\n\\n  /**\\n   * @notice Remove ability to renounce ownership\\n   * @dev Renounce ownership should be impossible as long as the watcher griefing\\n   * vector exists. You can still propose `address(0)`, but it will never be accepted.\\n   */\\n  function renounceOwnership() public virtual override onlyOwner {\\n    require(false, \\\"prohibited\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x31457ca4d8f4f3270d6cc85e049f2ebf134bd094c995ad0856892d23dd8cdf84\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/connectors/optimism/lib/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Types\\n * @notice Contains various types used throughout the Optimism contract system.\\n */\\nlibrary Types {\\n  /**\\n   * @notice OutputProposal represents a commitment to the L2 state. The timestamp is the L1\\n   *         timestamp that the output root is posted. This timestamp is used to verify that the\\n   *         finalization period has passed since the output root was submitted.\\n   *\\n   * @custom:field outputRoot    Hash of the L2 output.\\n   * @custom:field timestamp     Timestamp of the L1 block that the output root was submitted in.\\n   * @custom:field l2BlockNumber L2 block number that the output corresponds to.\\n   */\\n  struct OutputProposal {\\n    bytes32 outputRoot;\\n    uint128 timestamp;\\n    uint128 l2BlockNumber;\\n  }\\n\\n  /**\\n   * @notice Struct representing the elements that are hashed together to generate an output root\\n   *         which itself represents a snapshot of the L2 state.\\n   *\\n   * @custom:field version                  Version of the output root.\\n   * @custom:field stateRoot                Root of the state trie at the block of this output.\\n   * @custom:field messagePasserStorageRoot Root of the message passer storage trie.\\n   * @custom:field latestBlockhash          Hash of the block this output was generated from.\\n   */\\n  struct OutputRootProof {\\n    bytes32 version;\\n    bytes32 stateRoot;\\n    bytes32 messagePasserStorageRoot;\\n    bytes32 latestBlockhash;\\n  }\\n\\n  /**\\n   * @notice Struct representing a deposit transaction (L1 => L2 transaction) created by an end\\n   *         user (as opposed to a system deposit transaction generated by the system).\\n   *\\n   * @custom:field from        Address of the sender of the transaction.\\n   * @custom:field to          Address of the recipient of the transaction.\\n   * @custom:field isCreation  True if the transaction is a contract creation.\\n   * @custom:field value       Value to send to the recipient.\\n   * @custom:field mint        Amount of ETH to mint.\\n   * @custom:field gasLimit    Gas limit of the transaction.\\n   * @custom:field data        Data of the transaction.\\n   * @custom:field l1BlockHash Hash of the block the transaction was submitted in.\\n   * @custom:field logIndex    Index of the log in the block the transaction was submitted in.\\n   */\\n  struct UserDepositTransaction {\\n    address from;\\n    address to;\\n    bool isCreation;\\n    uint256 value;\\n    uint256 mint;\\n    uint64 gasLimit;\\n    bytes data;\\n    bytes32 l1BlockHash;\\n    uint256 logIndex;\\n  }\\n\\n  /**\\n   * @notice Struct representing a withdrawal transaction.\\n   *\\n   * @custom:field nonce    Nonce of the withdrawal transaction\\n   * @custom:field sender   Address of the sender of the transaction.\\n   * @custom:field target   Address of the recipient of the transaction.\\n   * @custom:field value    Value to send to the recipient.\\n   * @custom:field gasLimit Gas limit of the transaction.\\n   * @custom:field data     Data of the transaction.\\n   */\\n  struct WithdrawalTransaction {\\n    uint256 nonce;\\n    address sender;\\n    address target;\\n    uint256 value;\\n    uint256 gasLimit;\\n    bytes data;\\n  }\\n}\\n\",\"keccak256\":\"0x79508b9f6cf7aa5579fa2fbf5411418b7dd4ce4232b6977f99d6ce07eed64f39\",\"license\":\"MIT\"},\"contracts/messaging/interfaces/IConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"../../shared/interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @notice This interface is what the Connext contract will send and receive messages through.\\n * The messaging layer should conform to this interface, and should be interchangeable (i.e.\\n * could be Nomad or a generic AMB under the hood).\\n *\\n * @dev This uses the nomad format to ensure nomad can be added in as it comes back online.\\n *\\n * Flow from transfer from polygon to optimism:\\n * 1. User calls `xcall` with destination specified\\n * 2. This will swap in to the bridge assets\\n * 3. The swapped assets will get burned\\n * 4. The Connext contract will call `dispatch` on the messaging contract to add the transfer\\n *    to the root\\n * 5. [At some time interval] Relayers call `send` to send the current root from polygon to\\n *    mainnet. This is done on all \\\"spoke\\\" domains.\\n * 6. [At some time interval] Relayers call `propagate` [better name] on mainnet, this generates a new merkle\\n *    root from all of the AMBs\\n *    - This function must be able to read root data from all AMBs and aggregate them into a single merkle\\n *      tree root\\n *    - Will send the mixed root from all chains back through the respective AMBs to all other chains\\n * 7. AMB will call `update` to update the latest root on the messaging contract on spoke domains\\n * 8. [At any point] Relayers can call `proveAndProcess` to prove inclusion of dispatched message, and call\\n *    process on the `Connext` contract\\n * 9. Takes minted bridge tokens and credits the LP\\n *\\n * AMB requirements:\\n * - Access `msg.sender` both from mainnet -> spoke and vice versa\\n * - Ability to read *our root* from the AMB\\n *\\n * AMBs:\\n * - PoS bridge from polygon\\n * - arbitrum bridge\\n * - optimism bridge\\n * - gnosis chain\\n * - bsc (use multichain for messaging)\\n */\\ninterface IConnector is IProposedOwnable {\\n  // ============ Events ============\\n  /**\\n   * @notice Emitted whenever a message is successfully sent over an AMB\\n   * @param data The contents of the message\\n   * @param encodedData Data used to send the message; specific to connector\\n   * @param caller Who called the function (sent the message)\\n   */\\n  event MessageSent(bytes data, bytes encodedData, address caller);\\n\\n  /**\\n   * @notice Emitted whenever a message is successfully received over an AMB\\n   * @param data The contents of the message\\n   * @param caller Who called the function\\n   */\\n  event MessageProcessed(bytes data, address caller);\\n\\n  // ============ Public fns ============\\n\\n  function processMessage(bytes memory _data) external;\\n\\n  function verifySender(address _expected) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfba166354b442fa72b05be07aed38400b47f68498e8dfdd94fc43df00c401ed1\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IConnectorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IOutbox} from \\\"./IOutbox.sol\\\";\\n\\n/**\\n * @notice Each router extends the `XAppConnectionClient` contract. This contract\\n * allows an admin to call `setXAppConnectionManager` to update the underlying\\n * pointers to the messaging inboxes (Replicas) and outboxes (Homes).\\n *\\n * @dev This interface only contains the functions needed for the `XAppConnectionClient`\\n * will interface with.\\n */\\ninterface IConnectorManager {\\n  /**\\n   * @notice Get the local inbox contract from the xAppConnectionManager\\n   * @return The local inbox contract\\n   * @dev The local inbox contract is a SpokeConnector with AMBs, and a\\n   * Home contract with nomad\\n   */\\n  function home() external view returns (IOutbox);\\n\\n  /**\\n   * @notice Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager\\n   * @return True if _potentialReplica is an enrolled Replica\\n   */\\n  function isReplica(address _potentialReplica) external view returns (bool);\\n\\n  /**\\n   * @notice Get the local domain from the xAppConnectionManager\\n   * @return The local domain\\n   */\\n  function localDomain() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x6b35227f507bd98075083345dd93bfb1fe649fe49867f05a642ecea67ce40ddf\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IHubConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IConnector} from \\\"./IConnector.sol\\\";\\n\\ninterface IHubConnector is IConnector {\\n  function sendMessage(bytes memory _data, bytes memory _encodedData) external payable;\\n}\\n\",\"keccak256\":\"0x9c3b0b9f1ab326d6283e404818b8c2c55c4fc1ee9919830a1d04ebc3f4a022cd\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IHubSpokeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\ninterface IHubSpokeConnector {\\n  function saveAggregateRoot(bytes32 _aggregateRoot) external;\\n}\\n\",\"keccak256\":\"0x69e0679df0f54055b9f18a4b4eea042101628648a4acd269fe732cc289697869\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice Interface for all contracts sending messages originating on their\\n * current domain.\\n *\\n * @dev These are the Home.sol interface methods used by the `Router`\\n * and exposed via `home()` on the `XAppConnectionClient`\\n */\\ninterface IOutbox {\\n  /**\\n   * @notice Emitted when a new message is added to an outbound message merkle root\\n   * @param leafIndex Index of message's leaf in merkle tree\\n   * @param destinationAndNonce Destination and destination-specific\\n   * nonce combined in single field ((destination << 32) & nonce)\\n   * @param messageHash Hash of message; the leaf inserted to the Merkle tree for the message\\n   * @param committedRoot the latest notarized root submitted in the last signed Update\\n   * @param message Raw bytes of message\\n   */\\n  event Dispatch(\\n    bytes32 indexed messageHash,\\n    uint256 indexed leafIndex,\\n    uint64 indexed destinationAndNonce,\\n    bytes32 committedRoot,\\n    bytes message\\n  );\\n\\n  /**\\n   * @notice Dispatch the message it to the destination domain & recipient\\n   * @dev Format the message, insert its hash into Merkle tree,\\n   * enqueue the new Merkle root, and emit `Dispatch` event with message information.\\n   * @param _destinationDomain Domain of destination chain\\n   * @param _recipientAddress Address of recipient on destination chain as bytes32\\n   * @param _messageBody Raw bytes content of message\\n   * @return bytes32 The leaf added to the tree\\n   */\\n  function dispatch(\\n    uint32 _destinationDomain,\\n    bytes32 _recipientAddress,\\n    bytes memory _messageBody\\n  ) external returns (bytes32, bytes memory);\\n\\n  /**\\n   * @notice domain => next available nonce for the domain.\\n   */\\n  function nonces(uint32 domain) external returns (uint32);\\n}\\n\",\"keccak256\":\"0x788d0c03a94b5d28da1805f530a23b7a752285823985b8e180d448add4838d24\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/interfaces/IRootManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\ninterface IRootManager {\\n  /**\\n   * @notice This is called by relayers to generate + send the mixed root from mainnet via AMB to\\n   * spoke domains.\\n   * @dev This must read information for the root from the registered AMBs.\\n   */\\n  function propagate(\\n    address[] calldata _connectors,\\n    uint256[] calldata _fees,\\n    bytes[] memory _encodedData\\n  ) external payable;\\n\\n  /**\\n   * @notice Called by the connectors for various domains on the hub to aggregate their latest\\n   * inbound root.\\n   * @dev This must read information for the root from the registered AMBs\\n   */\\n  function aggregate(uint32 _domain, bytes32 _outbound) external;\\n}\\n\",\"keccak256\":\"0xa895dfaa4baad37a636e7e7e7da72a0a4badfd2d3d8256f975e5101cd5a98236\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/DomainIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @notice This abstract contract was written to ensure domain and connector mutex is scalable for the\\n * purposes of messaging layer operations. In particular, it aims to reduce gas costs to be relatively\\n * static regardless of the number of domains kept in storage by enabling callers of `RootManager.propagate`\\n * to supply the `domains` and `connectors` arrays as params, and check the hashes of those params against\\n * those we keep in storage.\\n */\\nabstract contract DomainIndexer {\\n  // ============ Events ============\\n\\n  event DomainAdded(uint32 domain, address connector);\\n  event DomainRemoved(uint32 domain);\\n\\n  // ============ Properties ============\\n\\n  /**\\n   * @notice The absolute maximum number of domains that we should support. Domain and connector arrays\\n   * are naturally unbounded, but the gas cost of reading these arrays in `updateHashes()` is bounded by\\n   * the block's gas limit.\\n   *\\n   * If we want to set a hard ceiling for gas costs for the `updateHashes()` method at approx. 500K gas,\\n   * with an average SLOAD cost of 900 gas per domain (1 uint32, 1 address):\\n   *       500K / 900 = ~555 domains\\n   *\\n   * Realistically, the cap on the number of domains will likely exist in other places, but we cap it\\n   * here as a last resort.\\n   */\\n  uint256 public constant MAX_DOMAINS = 500;\\n\\n  /**\\n   * @notice Domains array tracks currently subscribed domains to this hub aggregator.\\n   * We should distribute the aggregate root to all of these domains in the `propagate` method.\\n   * @dev Whenever this domains array is updated, the connectors array should also be updated.\\n   */\\n  uint32[] public domains;\\n\\n  /**\\n   * @notice A \\\"quick reference\\\" hash used in the `propagate` method below to validate that the provided\\n   * array of domains matches the one we have in storage.\\n   * @dev This hash should be re-calculated whenever the domains array is updated.\\n   */\\n  bytes32 public domainsHash;\\n\\n  /**\\n   * @notice Tracks the addresses of the hub connector contracts corresponding to subscribed spoke domains.\\n   * The index of any given connector in this array should match the index of that connector's target spoke\\n   * domain in the `domains` array above.\\n   * @dev This should be updated whenever the domains array is updated.\\n   */\\n  address[] public connectors;\\n\\n  /**\\n   * @notice A \\\"quick reference\\\" hash used in the `propagate` method below to validate that the provided\\n   * array of connectors matches the one we have in storage.\\n   * @dev This hash should be re-calculated whenever the connectors array is updated.\\n   */\\n  bytes32 public connectorsHash;\\n\\n  /**\\n   * @notice Shortcut to reverse lookup the index by domain. We index starting at one so the zero value can\\n   * be considered invalid (see fn: `isDomainSupported`).\\n   * @dev This should be updated whenever the domains array is updated.\\n   */\\n  mapping(uint32 => uint256) private domainToIndexPlusOne;\\n\\n  // ============ Getters ============\\n\\n  /**\\n   * @notice Convenience shortcut for supported domains. Used to sanity check adding new domains.\\n   * @param _domain Domain to check.\\n   */\\n  function isDomainSupported(uint32 _domain) public view returns (bool) {\\n    return domainToIndexPlusOne[_domain] != 0;\\n  }\\n\\n  /**\\n   * @notice Gets the index of a given domain in the domains and connectors arrays.\\n   * @dev Reverts if domain is not supported.\\n   * @param _domain The domain for which to get the index value.\\n   */\\n  function getDomainIndex(uint32 _domain) public view returns (uint256) {\\n    uint256 index = domainToIndexPlusOne[_domain];\\n    require(index != 0, \\\"!supported\\\");\\n    return index - 1;\\n  }\\n\\n  /**\\n   * @notice Gets the corresponding hub connector address for a given spoke domain.\\n   * @dev Inefficient, should only be used by caller if they have no index reference.\\n   * @param _domain The domain for which to get the hub connector address.\\n   */\\n  function getConnectorForDomain(uint32 _domain) public view returns (address) {\\n    return connectors[getDomainIndex(_domain)];\\n  }\\n\\n  /**\\n   * @notice Validate given domains and connectors arrays are correct (i.e. they mirror what is\\n   * currently saved in storage).\\n   * @dev Reverts if domains or connectors do not match, including ordering.\\n   * @param _domains The given domains array to check.\\n   * @param _connectors The given connectors array to check.\\n   */\\n  function validateDomains(uint32[] calldata _domains, address[] calldata _connectors) public view {\\n    // Sanity check: arguments are same length.\\n    require(_domains.length == _connectors.length, \\\"!matching length\\\");\\n    // Validate that given domains match the current array in storage.\\n    require(keccak256(abi.encode(_domains)) == domainsHash, \\\"!domains\\\");\\n    // Validate that given connectors match the current array in storage.\\n    require(keccak256(abi.encode(_connectors)) == connectorsHash, \\\"!connectors\\\");\\n  }\\n\\n  /**\\n   * @notice Validate given connectors array is correct (i.e. it mirrors what is\\n   * currently saved in storage).\\n   * @dev Reverts if domains or connectors do not match, including ordering.\\n   * @param _connectors The given connectors array to check.\\n   */\\n  function validateConnectors(address[] calldata _connectors) public view {\\n    // Validate that given connectors match the current array in storage.\\n    require(keccak256(abi.encode(_connectors)) == connectorsHash, \\\"!connectors\\\");\\n  }\\n\\n  // ============ Helper Functions ============\\n\\n  /**\\n   * @notice Handles all mutex for adding support for a given domain.\\n   * @param _domain Domain for which we are adding support.\\n   * @param _connector Corresponding hub connector address belonging to given domain.\\n   */\\n  function addDomain(uint32 _domain, address _connector) internal {\\n    // Sanity check: domain does not already exist.\\n    require(!isDomainSupported(_domain), \\\"domain exists\\\");\\n    // Sanity check: connector is reasonable.\\n    require(_connector != address(0), \\\"!connector\\\");\\n    // Sanity check: Under maximum.\\n    require(domains.length < MAX_DOMAINS, \\\"DomainIndexer at capacity\\\");\\n\\n    // Push domain and connector to respective arrays.\\n    domains.push(_domain);\\n    connectors.push(_connector);\\n    // Set reverse lookup.\\n    uint256 _indexPlusOne = domains.length;\\n    domainToIndexPlusOne[_domain] = _indexPlusOne;\\n\\n    // Update the hashes for the given arrays.\\n    updateHashes();\\n\\n    emit DomainAdded(_domain, _connector);\\n  }\\n\\n  /**\\n   * @notice Handles all mutex for removing support for a given domain.\\n   * @param _domain Domain we are removing.\\n   * @return address of the hub connector for the domain we removed.\\n   */\\n  function removeDomain(uint32 _domain) internal returns (address) {\\n    uint256 _index = getDomainIndex(_domain);\\n    // Get the connector at the given index.\\n    address _connector = connectors[_index];\\n    // Sanity check: connector exists.\\n    require(_connector != address(0), \\\"connector !exists\\\");\\n\\n    // Shortcut: is the index the last index in the domains/connectors arrays?\\n    // IFF not, we'll need to swap the target with the current last so we can pop().\\n    uint256 _lastIndex = domains.length - 1;\\n    if (_index < _lastIndex) {\\n      // If the target index for removal is not the last index, we copy over the domain at the last\\n      // index to overwrite the target's index so we can conveniently pop the last item.\\n      uint32 copiedDomain = domains[_lastIndex];\\n      domains[_index] = copiedDomain;\\n      connectors[_index] = connectors[_lastIndex];\\n      // Update the domain to index mapping for the copied domain.\\n      domainToIndexPlusOne[copiedDomain] = _index + 1; // NOTE: Naturally adding 1 here; see mapping name.\\n    }\\n\\n    // Pop the last item in the arrays.\\n    domains.pop();\\n    connectors.pop();\\n    // Erase reverse lookup.\\n    delete domainToIndexPlusOne[_domain];\\n\\n    // Update the hashes for the given arrays.\\n    updateHashes();\\n\\n    emit DomainRemoved(_domain);\\n\\n    return _connector;\\n  }\\n\\n  /**\\n   * @notice Calculate the new hashes for the domains and connectors arrays and update storage refs.\\n   * @dev Used for the Connector update functions `addConnector`, `removeConnector`.\\n   */\\n  function updateHashes() internal {\\n    uint32[] memory _domains = domains;\\n    address[] memory _connectors = connectors;\\n    domainsHash = keccak256(abi.encode(_domains));\\n    connectorsHash = keccak256(abi.encode(_connectors));\\n  }\\n}\\n\",\"keccak256\":\"0x2f0f477581793a2d846d3525d6def40067a946dd1a68d700eec55a97febbc2f6\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/MerkleLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title MerkleLib\\n * @author Illusory Systems Inc.\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\n **/\\nlibrary MerkleLib {\\n  // ========== Custom Errors ===========\\n\\n  error MerkleLib__insert_treeIsFull();\\n\\n  // ============ Constants =============\\n\\n  uint256 internal constant TREE_DEPTH = 32;\\n  uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\n\\n  /**\\n   * @dev Z_i represent the hash values at different heights for a binary tree with leaf values equal to `0`.\\n   * (e.g. Z_1 is the keccak256 hash of (0x0, 0x0), Z_2 is the keccak256 hash of (Z_1, Z_1), etc...)\\n   * Z_0 is the bottom of the 33-layer tree, Z_32 is the top (i.e. root).\\n   * Used to shortcut calculation in root calculation methods below.\\n   */\\n  bytes32 internal constant Z_0 = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n  bytes32 internal constant Z_1 = hex\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\";\\n  bytes32 internal constant Z_2 = hex\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\";\\n  bytes32 internal constant Z_3 = hex\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\";\\n  bytes32 internal constant Z_4 = hex\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\";\\n  bytes32 internal constant Z_5 = hex\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\";\\n  bytes32 internal constant Z_6 = hex\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\";\\n  bytes32 internal constant Z_7 = hex\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\";\\n  bytes32 internal constant Z_8 = hex\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\";\\n  bytes32 internal constant Z_9 = hex\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\";\\n  bytes32 internal constant Z_10 = hex\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\";\\n  bytes32 internal constant Z_11 = hex\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\";\\n  bytes32 internal constant Z_12 = hex\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\";\\n  bytes32 internal constant Z_13 = hex\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\";\\n  bytes32 internal constant Z_14 = hex\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\";\\n  bytes32 internal constant Z_15 = hex\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\";\\n  bytes32 internal constant Z_16 = hex\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\";\\n  bytes32 internal constant Z_17 = hex\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\";\\n  bytes32 internal constant Z_18 = hex\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\";\\n  bytes32 internal constant Z_19 = hex\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\";\\n  bytes32 internal constant Z_20 = hex\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\";\\n  bytes32 internal constant Z_21 = hex\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\";\\n  bytes32 internal constant Z_22 = hex\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\";\\n  bytes32 internal constant Z_23 = hex\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\";\\n  bytes32 internal constant Z_24 = hex\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\";\\n  bytes32 internal constant Z_25 = hex\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\";\\n  bytes32 internal constant Z_26 = hex\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\";\\n  bytes32 internal constant Z_27 = hex\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\";\\n  bytes32 internal constant Z_28 = hex\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\";\\n  bytes32 internal constant Z_29 = hex\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\";\\n  bytes32 internal constant Z_30 = hex\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\";\\n  bytes32 internal constant Z_31 = hex\\\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\\\";\\n  bytes32 internal constant Z_32 = hex\\\"27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757\\\";\\n\\n  // ============= Structs ==============\\n\\n  /**\\n   * @notice Struct representing incremental merkle tree. Contains current\\n   * branch and the number of inserted leaves in the tree.\\n   **/\\n  struct Tree {\\n    bytes32[TREE_DEPTH] branch;\\n    uint256 count;\\n  }\\n\\n  // ========= Write Methods =========\\n\\n  /**\\n   * @notice Inserts a given node (leaf) into merkle tree. Operates on an in-memory tree and\\n   * returns an updated version of that tree.\\n   * @dev Reverts if the tree is already full.\\n   * @param node Element to insert into tree.\\n   * @return Tree Updated tree.\\n   **/\\n  function insert(Tree memory tree, bytes32 node) internal pure returns (Tree memory) {\\n    // Update tree.count to increase the current count by 1 since we'll be including a new node.\\n    uint256 size = ++tree.count;\\n    if (size > MAX_LEAVES) revert MerkleLib__insert_treeIsFull();\\n\\n    // Loop starting at 0, ending when we've finished inserting the node (i.e. hashing it) into\\n    // the active branch. Each loop we cut size in half, hashing the inserted node up the active\\n    // branch along the way.\\n    for (uint256 i; i < TREE_DEPTH; ) {\\n      // Check if the current size is odd; if so, we set this index in the branch to be the node.\\n      if ((size & 1) == 1) {\\n        // If i > 0, then this node will be a hash of the original node with every layer up\\n        // until layer `i`.\\n        tree.branch[i] = node;\\n        return tree;\\n      }\\n      // If the size is not yet odd, we hash the current index in the tree branch with the node.\\n      node = keccak256(abi.encodePacked(tree.branch[i], node));\\n      size >>= 1; // Cut size in half (statement equivalent to: `size /= 2`).\\n\\n      unchecked {\\n        ++i;\\n      }\\n    }\\n    // As the loop should always end prematurely with the `return` statement, this code should\\n    // be unreachable. We revert here just to be safe.\\n    revert MerkleLib__insert_treeIsFull();\\n  }\\n\\n  // ========= Read Methods =========\\n\\n  /**\\n   * @notice Calculates and returns tree's current root.\\n   * @return _current bytes32 root.\\n   **/\\n  function root(Tree storage tree) internal view returns (bytes32 _current) {\\n    uint256 _index = tree.count;\\n\\n    if (_index == 0) {\\n      return Z_32;\\n    }\\n\\n    uint256 i;\\n    assembly {\\n      let TREE_SLOT := tree.slot\\n\\n      for {\\n\\n      } true {\\n\\n      } {\\n        for {\\n\\n        } true {\\n\\n        } {\\n          if and(_index, 1) {\\n            mstore(0, sload(TREE_SLOT))\\n            mstore(0x20, Z_0)\\n            _current := keccak256(0, 0x40)\\n            break\\n          }\\n\\n          if and(_index, shl(1, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 1)))\\n            mstore(0x20, Z_1)\\n            _current := keccak256(0, 0x40)\\n            i := 1\\n            break\\n          }\\n\\n          if and(_index, shl(2, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 2)))\\n            mstore(0x20, Z_2)\\n            _current := keccak256(0, 0x40)\\n            i := 2\\n            break\\n          }\\n\\n          if and(_index, shl(3, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 3)))\\n            mstore(0x20, Z_3)\\n            _current := keccak256(0, 0x40)\\n            i := 3\\n            break\\n          }\\n\\n          if and(_index, shl(4, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 4)))\\n            mstore(0x20, Z_4)\\n            _current := keccak256(0, 0x40)\\n            i := 4\\n            break\\n          }\\n\\n          if and(_index, shl(5, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 5)))\\n            mstore(0x20, Z_5)\\n            _current := keccak256(0, 0x40)\\n            i := 5\\n            break\\n          }\\n\\n          if and(_index, shl(6, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 6)))\\n            mstore(0x20, Z_6)\\n            _current := keccak256(0, 0x40)\\n            i := 6\\n            break\\n          }\\n\\n          if and(_index, shl(7, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 7)))\\n            mstore(0x20, Z_7)\\n            _current := keccak256(0, 0x40)\\n            i := 7\\n            break\\n          }\\n\\n          if and(_index, shl(8, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 8)))\\n            mstore(0x20, Z_8)\\n            _current := keccak256(0, 0x40)\\n            i := 8\\n            break\\n          }\\n\\n          if and(_index, shl(9, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 9)))\\n            mstore(0x20, Z_9)\\n            _current := keccak256(0, 0x40)\\n            i := 9\\n            break\\n          }\\n\\n          if and(_index, shl(10, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 10)))\\n            mstore(0x20, Z_10)\\n            _current := keccak256(0, 0x40)\\n            i := 10\\n            break\\n          }\\n\\n          if and(_index, shl(11, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 11)))\\n            mstore(0x20, Z_11)\\n            _current := keccak256(0, 0x40)\\n            i := 11\\n            break\\n          }\\n\\n          if and(_index, shl(12, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 12)))\\n            mstore(0x20, Z_12)\\n            _current := keccak256(0, 0x40)\\n            i := 12\\n            break\\n          }\\n\\n          if and(_index, shl(13, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 13)))\\n            mstore(0x20, Z_13)\\n            _current := keccak256(0, 0x40)\\n            i := 13\\n            break\\n          }\\n\\n          if and(_index, shl(14, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 14)))\\n            mstore(0x20, Z_14)\\n            _current := keccak256(0, 0x40)\\n            i := 14\\n            break\\n          }\\n\\n          if and(_index, shl(15, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 15)))\\n            mstore(0x20, Z_15)\\n            _current := keccak256(0, 0x40)\\n            i := 15\\n            break\\n          }\\n\\n          if and(_index, shl(16, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 16)))\\n            mstore(0x20, Z_16)\\n            _current := keccak256(0, 0x40)\\n            i := 16\\n            break\\n          }\\n\\n          if and(_index, shl(17, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 17)))\\n            mstore(0x20, Z_17)\\n            _current := keccak256(0, 0x40)\\n            i := 17\\n            break\\n          }\\n\\n          if and(_index, shl(18, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 18)))\\n            mstore(0x20, Z_18)\\n            _current := keccak256(0, 0x40)\\n            i := 18\\n            break\\n          }\\n\\n          if and(_index, shl(19, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 19)))\\n            mstore(0x20, Z_19)\\n            _current := keccak256(0, 0x40)\\n            i := 19\\n            break\\n          }\\n\\n          if and(_index, shl(20, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 20)))\\n            mstore(0x20, Z_20)\\n            _current := keccak256(0, 0x40)\\n            i := 20\\n            break\\n          }\\n\\n          if and(_index, shl(21, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 21)))\\n            mstore(0x20, Z_21)\\n            _current := keccak256(0, 0x40)\\n            i := 21\\n            break\\n          }\\n\\n          if and(_index, shl(22, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 22)))\\n            mstore(0x20, Z_22)\\n            _current := keccak256(0, 0x40)\\n            i := 22\\n            break\\n          }\\n\\n          if and(_index, shl(23, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 23)))\\n            mstore(0x20, Z_23)\\n            _current := keccak256(0, 0x40)\\n            i := 23\\n            break\\n          }\\n\\n          if and(_index, shl(24, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 24)))\\n            mstore(0x20, Z_24)\\n            _current := keccak256(0, 0x40)\\n            i := 24\\n            break\\n          }\\n\\n          if and(_index, shl(25, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 25)))\\n            mstore(0x20, Z_25)\\n            _current := keccak256(0, 0x40)\\n            i := 25\\n            break\\n          }\\n\\n          if and(_index, shl(26, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 26)))\\n            mstore(0x20, Z_26)\\n            _current := keccak256(0, 0x40)\\n            i := 26\\n            break\\n          }\\n\\n          if and(_index, shl(27, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 27)))\\n            mstore(0x20, Z_27)\\n            _current := keccak256(0, 0x40)\\n            i := 27\\n            break\\n          }\\n\\n          if and(_index, shl(28, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 28)))\\n            mstore(0x20, Z_28)\\n            _current := keccak256(0, 0x40)\\n            i := 28\\n            break\\n          }\\n\\n          if and(_index, shl(29, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 29)))\\n            mstore(0x20, Z_29)\\n            _current := keccak256(0, 0x40)\\n            i := 29\\n            break\\n          }\\n\\n          if and(_index, shl(30, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 30)))\\n            mstore(0x20, Z_30)\\n            _current := keccak256(0, 0x40)\\n            i := 30\\n            break\\n          }\\n\\n          if and(_index, shl(31, 1)) {\\n            mstore(0, sload(add(TREE_SLOT, 31)))\\n            mstore(0x20, Z_31)\\n            _current := keccak256(0, 0x40)\\n            i := 31\\n            break\\n          }\\n\\n          _current := Z_32\\n          i := 32\\n          break\\n        }\\n\\n        if gt(i, 30) {\\n          break\\n        }\\n\\n        {\\n          if lt(i, 1) {\\n            switch and(_index, shl(1, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_1)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 1)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 2) {\\n            switch and(_index, shl(2, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_2)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 2)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 3) {\\n            switch and(_index, shl(3, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_3)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 3)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 4) {\\n            switch and(_index, shl(4, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_4)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 4)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 5) {\\n            switch and(_index, shl(5, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_5)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 5)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 6) {\\n            switch and(_index, shl(6, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_6)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 6)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 7) {\\n            switch and(_index, shl(7, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_7)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 7)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 8) {\\n            switch and(_index, shl(8, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_8)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 8)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 9) {\\n            switch and(_index, shl(9, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_9)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 9)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 10) {\\n            switch and(_index, shl(10, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_10)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 10)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 11) {\\n            switch and(_index, shl(11, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_11)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 11)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 12) {\\n            switch and(_index, shl(12, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_12)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 12)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 13) {\\n            switch and(_index, shl(13, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_13)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 13)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 14) {\\n            switch and(_index, shl(14, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_14)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 14)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 15) {\\n            switch and(_index, shl(15, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_15)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 15)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 16) {\\n            switch and(_index, shl(16, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_16)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 16)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 17) {\\n            switch and(_index, shl(17, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_17)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 17)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 18) {\\n            switch and(_index, shl(18, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_18)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 18)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 19) {\\n            switch and(_index, shl(19, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_19)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 19)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 20) {\\n            switch and(_index, shl(20, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_20)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 20)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 21) {\\n            switch and(_index, shl(21, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_21)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 21)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 22) {\\n            switch and(_index, shl(22, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_22)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 22)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 23) {\\n            switch and(_index, shl(23, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_23)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 23)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 24) {\\n            switch and(_index, shl(24, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_24)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 24)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 25) {\\n            switch and(_index, shl(25, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_25)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 25)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 26) {\\n            switch and(_index, shl(26, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_26)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 26)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 27) {\\n            switch and(_index, shl(27, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_27)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 27)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 28) {\\n            switch and(_index, shl(28, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_28)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 28)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 29) {\\n            switch and(_index, shl(29, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_29)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 29)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 30) {\\n            switch and(_index, shl(30, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_30)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 30)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n\\n          if lt(i, 31) {\\n            switch and(_index, shl(31, 1))\\n            case 0 {\\n              mstore(0, _current)\\n              mstore(0x20, Z_31)\\n            }\\n            default {\\n              mstore(0, sload(add(TREE_SLOT, 31)))\\n              mstore(0x20, _current)\\n            }\\n\\n            _current := keccak256(0, 0x40)\\n          }\\n        }\\n\\n        break\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates and returns the merkle root for the given leaf `_item`,\\n   * a merkle branch, and the index of `_item` in the tree.\\n   * @param _item Merkle leaf\\n   * @param _branch Merkle proof\\n   * @param _index Index of `_item` in tree\\n   * @return _current Calculated merkle root\\n   **/\\n  function branchRoot(\\n    bytes32 _item,\\n    bytes32[TREE_DEPTH] memory _branch,\\n    uint256 _index\\n  ) internal pure returns (bytes32 _current) {\\n    assembly {\\n      _current := _item\\n      let BRANCH_DATA_OFFSET := _branch\\n      let f\\n\\n      f := shl(5, and(_index, 1))\\n      mstore(f, _current)\\n      mstore(sub(0x20, f), mload(BRANCH_DATA_OFFSET))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(1, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 1))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(2, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 2))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(3, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 3))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(4, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 4))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(5, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 5))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(6, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 6))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(7, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 7))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(8, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 8))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(9, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 9))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(10, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 10))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(11, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 11))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(12, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 12))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(13, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 13))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(14, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 14))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(15, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 15))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(16, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 16))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(17, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 17))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(18, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 18))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(19, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 19))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(20, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 20))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(21, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 21))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(22, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 22))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(23, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 23))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(24, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 24))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(25, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 25))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(26, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 26))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(27, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 27))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(28, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 28))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(29, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 29))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(30, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 30))))\\n      _current := keccak256(0, 0x40)\\n\\n      f := shl(5, iszero(and(_index, shl(31, 1))))\\n      mstore(sub(0x20, f), _current)\\n      mstore(f, mload(add(BRANCH_DATA_OFFSET, shl(5, 31))))\\n      _current := keccak256(0, 0x40)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x08c791dbeef6253813d74e2145183501fe7631c13d5ac9d768036f47b66b693e\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title QueueLib\\n * @notice Library containing queue struct and operations for queue used by RootManager and SpokeConnector\\n * for handling the verification period. Tracks both message data itself and the block that the message was\\n * committed to the queue.\\n **/\\nlibrary QueueLib {\\n  /**\\n   * @notice Queue struct\\n   * @dev Internally keeps track of the `first` and `last` elements through\\n   * indices and a mapping of indices to enqueued elements.\\n   **/\\n  struct Queue {\\n    uint128 first;\\n    uint128 last;\\n    // Message data (roots) that have been received.\\n    mapping(uint256 => bytes32) data;\\n    // The block that the message data was committed.\\n    mapping(uint256 => uint256) commitBlock;\\n    // A reverse mapping of all entries that have been \\\"removed\\\" by value; behaves like a blocklist.\\n    // NOTE: Removed values can still be pushed to the queue, but will be ignored/skipped when dequeuing.\\n    mapping(bytes32 => bool) removed;\\n  }\\n\\n  /**\\n   * @notice Initializes the queue\\n   * @dev Empty state denoted by queue.first > queue.last. Queue initialized with\\n   * queue.first = 1 and queue.last = 0.\\n   **/\\n  function initialize(Queue storage queue) internal {\\n    queue.first = 1;\\n    delete queue.last;\\n  }\\n\\n  /**\\n   * @notice Enqueues a single new element and records block number that the item was enqueued\\n   * (i.e. current block).\\n   * @param item New element to be enqueued.\\n   * @return last Index of newly enqueued element.\\n   **/\\n  function enqueue(Queue storage queue, bytes32 item) internal returns (uint128 last) {\\n    // Commit block is the block we are committing this item to the queue.\\n    uint256 commitBlock = block.number;\\n    // Increment `last` position.\\n    last = ++queue.last;\\n    // Add the item and record block number.\\n    queue.data[last] = item;\\n    queue.commitBlock[last] = commitBlock;\\n  }\\n\\n  /**\\n   * @notice Dequeues element at front of queue if it exists AND it's surpassed the given\\n   * verification period (i.e. has been sitting in the queue for enough blocks).\\n   * @param queue QueueStorage struct from contract.\\n   * @param delay The required delay that must have been surpassed in order to merit dequeuing\\n   * the element.\\n   * @param max The maximum number of elements we are allowed to dequeue in this call.\\n   * @return item Dequeued element IFF delay period has been surpassed; otherwise, empty bytes32.\\n   **/\\n  function dequeueVerified(\\n    Queue storage queue,\\n    uint256 delay,\\n    uint128 max\\n  ) internal returns (bytes32[] memory) {\\n    uint128 first = queue.first;\\n    uint128 last = queue.last;\\n\\n    // If queue is empty, short-circuit here.\\n    if (last < first) {\\n      return new bytes32[](0);\\n    }\\n\\n    // Input sanity checks.\\n    require(first != 0, \\\"queue !init'd\\\");\\n    require(max > 0, \\\"!acceptable max\\\");\\n\\n    {\\n      // If we would otherwise be searching beyond the maximum amount we are allowed to dequeue in this\\n      // call, reduce `last` to artificially shrink the available queue within the scope of this method.\\n      uint128 highestAllowed = first + max - 1;\\n      if (last > highestAllowed) {\\n        last = highestAllowed;\\n      }\\n    }\\n\\n    // Commit block must be below this block to be considered verified.\\n    // NOTE: It's assumed that block number is a higher value than delay (i.e. delay is reasonable).\\n    uint256 highestAcceptableCommitBlock = block.number - delay;\\n\\n    // To determine the last item index in the queue we want to return, iterate backwards until we\\n    // find a `commitBlock` that has surpassed the delay period.\\n    // TODO: The most efficient way to determine the split index here should be using a binary search.\\n    bool containsVerified;\\n    // NOTE: `first <= last` rephrased here to `!(first > last)` as it's a cheaper condition.\\n    while (!(first > last)) {\\n      uint256 commitBlock = queue.commitBlock[last];\\n      // NOTE: Same as `commitBlock <= highestAcceptableCommitBlock`.\\n      if (!(commitBlock > highestAcceptableCommitBlock)) {\\n        containsVerified = true;\\n        break;\\n      }\\n      unchecked {\\n        --last;\\n      }\\n    }\\n    // IFF no verified items were found, then we can return an empty array.\\n    if (!containsVerified) {\\n      return new bytes32[](0);\\n    }\\n\\n    bytes32[] memory items = new bytes32[](last + 1 - first);\\n    uint256 index; // Cursor for index in the batch of `items`.\\n    bool removedItems; // If any items have been removed, we filter them here.\\n    // NOTE: `first <= last` rephrased here to `!(first > last)` as it's a cheaper condition.\\n    while (!(first > last)) {\\n      bytes32 item = queue.data[first];\\n      // Check to see if the item has been removed before appending it to the array.\\n      if (!queue.removed[item]) {\\n        items[index] = item;\\n        unchecked {\\n          ++index;\\n        }\\n      } else {\\n        // The item was removed. We do NOT increment the index (we will re-use this position).\\n        if (!removedItems) {\\n          removedItems = true;\\n        }\\n      }\\n\\n      // Delete the item and the commitBlock.\\n      // NOTE: We do NOT delete the entry from `queue.removed`, as it's a reverse lookup and we want to\\n      // block that value permanently (e.g. if there's multiple of the same bad value in the queue).\\n      delete queue.data[first];\\n      delete queue.commitBlock[first];\\n\\n      unchecked {\\n        ++first;\\n      }\\n    }\\n\\n    // Update the value for `first` in our queue object since we've dequeued a number of elements.\\n    queue.first = first;\\n\\n    if (!removedItems) {\\n      return items;\\n    } else {\\n      // If some items were removed, there will be a number of trailing 0 values we need to truncate\\n      // from the array. Create a new array with all of the items up until these empty values.\\n      bytes32[] memory amendedItems = new bytes32[](index); // The last `index` is the new length.\\n      for (uint256 i; i < index; ) {\\n        amendedItems[i] = items[i];\\n        unchecked {\\n          ++i;\\n        }\\n      }\\n      return amendedItems;\\n    }\\n  }\\n\\n  /**\\n   * @notice Sets a certain value to be ignored (skipped) when dequeuing.\\n   */\\n  function remove(Queue storage queue, bytes32 item) internal {\\n    require(!queue.removed[item], \\\"already removed\\\");\\n    queue.removed[item] = true;\\n  }\\n\\n  /**\\n   * @notice Check whether the queue is empty.\\n   * @param queue QueueStorage struct from contract.\\n   * @return bool True if queue is empty and false if otherwise.\\n   */\\n  function isEmpty(Queue storage queue) internal view returns (bool) {\\n    return queue.last < queue.first;\\n  }\\n\\n  /**\\n   * @notice Returns number of elements in queue.\\n   * @param queue QueueStorage struct from contract.\\n   */\\n  function length(Queue storage queue) internal view returns (uint256) {\\n    uint128 last = queue.last;\\n    uint128 first = queue.first;\\n    // Cannot underflow unless state is corrupted.\\n    return _length(last, first);\\n  }\\n\\n  /**\\n   * @notice Returns number of elements between `last` and `first` (used internally).\\n   * @param last The last element index.\\n   * @param first The first element index.\\n   */\\n  function _length(uint128 last, uint128 first) internal pure returns (uint256) {\\n    return uint256(last + 1 - first);\\n  }\\n}\\n\",\"keccak256\":\"0x2997d7d6ca0fc2703a720465e3c378699267189af17a7285655ab1ca91fb7230\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/messaging/libraries/SnapshotId.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\n/**\\n * @title SnapshotId library\\n * @notice A library to be used in spoke connector and root manager to calculates the current snapshot id\\n */\\nlibrary SnapshotId {\\n  /**\\n   * @notice Duration of the snapshot\\n   * @dev Off-chain agents could change the effective snapshot length by skipping snapshots. This is the\\n   * smallest unit of snapshot duration, not just the only option.\\n   */\\n  uint256 constant SNAPSHOT_DURATION = 30 minutes;\\n\\n  /**\\n   * @notice This function calculates the last completed snapshot id\\n   * @return _lastCompletedSnapshotId The last completed snapshot id\\n   */\\n  function getLastCompletedSnapshotId() internal view returns (uint256 _lastCompletedSnapshotId) {\\n    unchecked {\\n      _lastCompletedSnapshotId = block.timestamp / SNAPSHOT_DURATION;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xe1b04329fe0140f863f1916daa081ca6faf4956064a48d8afd8febe3baca2d4b\",\"license\":\"UNLICENSED\"},\"contracts/shared/ProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {IProposedOwnable} from \\\"./interfaces/IProposedOwnable.sol\\\";\\n\\n/**\\n * @title ProposedOwnable\\n * @notice Contract module which provides a basic access control mechanism,\\n * where there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed via a two step process:\\n * 1. Call `proposeOwner`\\n * 2. Wait out the delay period\\n * 3. Call `acceptOwner`\\n *\\n * @dev This module is used through inheritance. It will make available the\\n * modifier `onlyOwner`, which can be applied to your functions to restrict\\n * their use to the owner.\\n *\\n * @dev The majority of this code was taken from the openzeppelin Ownable\\n * contract\\n *\\n */\\nabstract contract ProposedOwnable is IProposedOwnable {\\n  // ========== Custom Errors ===========\\n\\n  error ProposedOwnable__onlyOwner_notOwner();\\n  error ProposedOwnable__onlyProposed_notProposedOwner();\\n  error ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n  error ProposedOwnable__proposeNewOwner_invalidProposal();\\n  error ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n  error ProposedOwnable__renounceOwnership_noProposal();\\n  error ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n  // ============ Properties ============\\n\\n  address private _owner;\\n\\n  address private _proposed;\\n  uint256 private _proposedOwnershipTimestamp;\\n\\n  uint256 private constant _delay = 7 days;\\n\\n  // ======== Getters =========\\n\\n  /**\\n   * @notice Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposed() public view virtual returns (address) {\\n    return _proposed;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the proposed owner.\\n   */\\n  function proposedTimestamp() public view virtual returns (uint256) {\\n    return _proposedOwnershipTimestamp;\\n  }\\n\\n  /**\\n   * @notice Returns the delay period before a new owner can be accepted.\\n   */\\n  function delay() public view virtual returns (uint256) {\\n    return _delay;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    if (_owner != msg.sender) revert ProposedOwnable__onlyOwner_notOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than the proposed owner.\\n   */\\n  modifier onlyProposed() {\\n    if (_proposed != msg.sender) revert ProposedOwnable__onlyProposed_notProposedOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Throws if the ownership delay has not elapsed\\n   */\\n  modifier ownershipDelayElapsed() {\\n    // Ensure delay has elapsed\\n    if ((block.timestamp - _proposedOwnershipTimestamp) <= _delay)\\n      revert ProposedOwnable__ownershipDelayElapsed_delayNotElapsed();\\n    _;\\n  }\\n\\n  /**\\n   * @notice Indicates if the ownership has been renounced() by\\n   * checking if current owner is address(0)\\n   */\\n  function renounced() public view returns (bool) {\\n    return _owner == address(0);\\n  }\\n\\n  // ======== External =========\\n\\n  /**\\n   * @notice Sets the timestamp for an owner to be proposed, and sets the\\n   * newly proposed owner as step 1 in a 2-step process\\n   */\\n  function proposeNewOwner(address newlyProposed) public virtual onlyOwner {\\n    // Contract as source of truth\\n    if (_proposed == newlyProposed && _proposedOwnershipTimestamp != 0)\\n      revert ProposedOwnable__proposeNewOwner_invalidProposal();\\n\\n    // Sanity check: reasonable proposal\\n    if (_owner == newlyProposed) revert ProposedOwnable__proposeNewOwner_noOwnershipChange();\\n\\n    _setProposed(newlyProposed);\\n  }\\n\\n  /**\\n   * @notice Renounces ownership of the contract after a delay\\n   */\\n  function renounceOwnership() public virtual onlyOwner ownershipDelayElapsed {\\n    // Ensure there has been a proposal cycle started\\n    if (_proposedOwnershipTimestamp == 0) revert ProposedOwnable__renounceOwnership_noProposal();\\n\\n    // Require proposed is set to 0\\n    if (_proposed != address(0)) revert ProposedOwnable__renounceOwnership_invalidProposal();\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(address(0));\\n  }\\n\\n  /**\\n   * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function acceptProposedOwner() public virtual onlyProposed ownershipDelayElapsed {\\n    // NOTE: no need to check if _owner == _proposed, because the _proposed\\n    // is 0-d out and this check is implicitly enforced by modifier\\n\\n    // NOTE: no need to check if _proposedOwnershipTimestamp > 0 because\\n    // the only time this would happen is if the _proposed was never\\n    // set (will fail from modifier) or if the owner == _proposed (checked\\n    // above)\\n\\n    // Emit event, set new owner, reset timestamp\\n    _setOwner(_proposed);\\n  }\\n\\n  // ======== Internal =========\\n\\n  function _setOwner(address newOwner) internal {\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n    delete _proposedOwnershipTimestamp;\\n    delete _proposed;\\n  }\\n\\n  function _setProposed(address newlyProposed) private {\\n    _proposedOwnershipTimestamp = block.timestamp;\\n    _proposed = newlyProposed;\\n    emit OwnershipProposed(newlyProposed);\\n  }\\n}\\n\",\"keccak256\":\"0xa96eff4fdff55ffa29cda5c18285a9af04c3cbaf55f83696085cdd2251a8d6c0\",\"license\":\"UNLICENSED\"},\"contracts/shared/ProposedOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.17;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {ProposedOwnable} from \\\"./ProposedOwnable.sol\\\";\\n\\nabstract contract ProposedOwnableUpgradeable is Initializable, ProposedOwnable {\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial\\n   */\\n  function __ProposedOwnable_init() internal onlyInitializing {\\n    __ProposedOwnable_init_unchained();\\n  }\\n\\n  function __ProposedOwnable_init_unchained() internal onlyInitializing {\\n    _setOwner(msg.sender);\\n  }\\n\\n  /**\\n   * @dev This empty reserved space is put in place to allow future versions to add new\\n   * variables without shifting down storage in the inheritance chain.\\n   * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n   */\\n  uint256[47] private __GAP;\\n}\\n\",\"keccak256\":\"0x2b064b03a25915e93749905ef3aae516ffaac86b8ba9f126b614425b623bf477\",\"license\":\"UNLICENSED\"},\"contracts/shared/interfaces/IProposedOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IProposedOwnable\\n * @notice Defines a minimal interface for ownership with a two step proposal and acceptance\\n * process\\n */\\ninterface IProposedOwnable {\\n  /**\\n   * @dev This emits when change in ownership of a contract is proposed.\\n   */\\n  event OwnershipProposed(address indexed proposedOwner);\\n\\n  /**\\n   * @dev This emits when ownership of a contract changes.\\n   */\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @notice Get the address of the owner\\n   * @return owner_ The address of the owner.\\n   */\\n  function owner() external view returns (address owner_);\\n\\n  /**\\n   * @notice Get the address of the proposed owner\\n   * @return proposed_ The address of the proposed.\\n   */\\n  function proposed() external view returns (address proposed_);\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   * @param newlyProposed The proposed new owner of the contract\\n   */\\n  function proposeNewOwner(address newlyProposed) external;\\n\\n  /**\\n   * @notice Set the address of the proposed owner of the contract\\n   */\\n  function acceptProposedOwner() external;\\n}\\n\",\"keccak256\":\"0x4ec1aa589d37d0c1eac9966e26d2d3540d1661b81763e678f14d2c6fa0682323\",\"license\":\"MIT\"},\"contracts/shared/libraries/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {TypedMemView} from \\\"./TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n  using TypedMemView for bytes;\\n  using TypedMemView for bytes29;\\n\\n  // alignment preserving cast\\n  function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n    return bytes32(uint256(uint160(_addr)));\\n  }\\n\\n  // alignment preserving cast\\n  function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n    return address(uint160(uint256(_buf)));\\n  }\\n}\\n\",\"keccak256\":\"0x80e5eb2dc7f18a751edf2658e6166fd791e40aa8ff2488ad897539aafef59776\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/shared/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.17;\\n\\nlibrary TypedMemView {\\n  // Why does this exist?\\n  // the solidity `bytes memory` type has a few weaknesses.\\n  // 1. You can't index ranges effectively\\n  // 2. You can't slice without copying\\n  // 3. The underlying data may represent any type\\n  // 4. Solidity never deallocates memory, and memory costs grow\\n  //    superlinearly\\n\\n  // By using a memory view instead of a `bytes memory` we get the following\\n  // advantages:\\n  // 1. Slices are done on the stack, by manipulating the pointer\\n  // 2. We can index arbitrary ranges and quickly convert them to stack types\\n  // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n  // This makes `TypedMemView` a useful tool for efficient zero-copy\\n  // algorithms.\\n\\n  // Why bytes29?\\n  // We want to avoid confusion between views, digests, and other common\\n  // types so we chose a large and uncommonly used odd number of bytes\\n  //\\n  // Note that while bytes are left-aligned in a word, integers and addresses\\n  // are right-aligned. This means when working in assembly we have to\\n  // account for the 3 unused bytes on the righthand side\\n  //\\n  // First 5 bytes are a type flag.\\n  // - ff_ffff_fffe is reserved for unknown type.\\n  // - ff_ffff_ffff is reserved for invalid types/errors.\\n  // next 12 are memory address\\n  // next 12 are len\\n  // bottom 3 bytes are empty\\n\\n  // Assumptions:\\n  // - non-modification of memory.\\n  // - No Solidity updates\\n  // - - wrt free mem point\\n  // - - wrt bytes representation in memory\\n  // - - wrt memory addressing in general\\n\\n  // Usage:\\n  // - create type constants\\n  // - use `assertType` for runtime type assertions\\n  // - - unfortunately we can't do this at compile time yet :(\\n  // - recommended: implement modifiers that perform type checking\\n  // - - e.g.\\n  // - - `uint40 constant MY_TYPE = 3;`\\n  // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n  // - instantiate a typed view from a bytearray using `ref`\\n  // - use `index` to inspect the contents of the view\\n  // - use `slice` to create smaller views into the same memory\\n  // - - `slice` can increase the offset\\n  // - - `slice can decrease the length`\\n  // - - must specify the output type of `slice`\\n  // - - `slice` will return a null view if you try to overrun\\n  // - - make sure to explicitly check for this with `notNull` or `assertType`\\n  // - use `equal` for typed comparisons.\\n\\n  // The null view\\n  bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n  uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n  uint256 constant TWENTY_SEVEN_BYTES = 8 * 27;\\n  uint256 private constant _27_BYTES_IN_BITS = 8 * 27; // <--- also used this named constant where ever 216 is used.\\n  uint256 private constant LOW_27_BYTES_MASK = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff; // (1 << _27_BYTES_IN_BITS) - 1;\\n\\n  // ========== Custom Errors ===========\\n\\n  error TypedMemView__assertType_typeAssertionFailed(uint256 actual, uint256 expected);\\n  error TypedMemView__index_overrun(uint256 loc, uint256 len, uint256 index, uint256 slice);\\n  error TypedMemView__index_indexMoreThan32Bytes();\\n  error TypedMemView__unsafeCopyTo_nullPointer();\\n  error TypedMemView__unsafeCopyTo_invalidPointer();\\n  error TypedMemView__unsafeCopyTo_identityOOG();\\n  error TypedMemView__assertValid_validityAssertionFailed();\\n\\n  /**\\n   * @notice          Changes the endianness of a uint256.\\n   * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n   * @param _b        The unsigned integer to reverse\\n   * @return          v - The reversed value\\n   */\\n  function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n    v = _b;\\n\\n    // swap bytes\\n    v =\\n      ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n      ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n    // swap 2-byte long pairs\\n    v =\\n      ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n      ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n    // swap 4-byte long pairs\\n    v =\\n      ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n      ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n    // swap 8-byte long pairs\\n    v =\\n      ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n      ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n    // swap 16-byte long pairs\\n    v = (v >> 128) | (v << 128);\\n  }\\n\\n  /**\\n   * @notice      Create a mask with the highest `_len` bits set.\\n   * @param _len  The length\\n   * @return      mask - The mask\\n   */\\n  function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n    // ugly. redo without assembly?\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mask := sar(sub(_len, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\\n    }\\n  }\\n\\n  /**\\n   * @notice      Return the null view.\\n   * @return      bytes29 - The null view\\n   */\\n  function nullView() internal pure returns (bytes29) {\\n    return NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is null.\\n   * @return      bool - True if the view is null\\n   */\\n  function isNull(bytes29 memView) internal pure returns (bool) {\\n    return memView == NULL;\\n  }\\n\\n  /**\\n   * @notice      Check if the view is not null.\\n   * @return      bool - True if the view is not null\\n   */\\n  function notNull(bytes29 memView) internal pure returns (bool) {\\n    return !isNull(memView);\\n  }\\n\\n  /**\\n   * @notice          Check if the view is of a invalid type and points to a valid location\\n   *                  in memory.\\n   * @dev             We perform this check by examining solidity's unallocated memory\\n   *                  pointer and ensuring that the view's upper bound is less than that.\\n   * @param memView   The view\\n   * @return          ret - True if the view is invalid\\n   */\\n  function isNotValid(bytes29 memView) internal pure returns (bool ret) {\\n    if (typeOf(memView) == 0xffffffffff) {\\n      return true;\\n    }\\n    uint256 _end = end(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ret := gt(_end, mload(0x40))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view be valid.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @return          bytes29 - The validated view\\n   */\\n  function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n    if (isNotValid(memView)) revert TypedMemView__assertValid_validityAssertionFailed();\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return true if the memview is of the expected type. Otherwise false.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bool - True if the memview is of the expected type\\n   */\\n  function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n    return typeOf(memView) == _expected;\\n  }\\n\\n  /**\\n   * @notice          Require that a typed memory view has a specific type.\\n   * @dev             Returns the view for easy chaining.\\n   * @param memView   The view\\n   * @param _expected The expected type\\n   * @return          bytes29 - The view with validated type\\n   */\\n  function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n    if (!isType(memView, _expected)) {\\n      revert TypedMemView__assertType_typeAssertionFailed(uint256(typeOf(memView)), uint256(_expected));\\n    }\\n    return memView;\\n  }\\n\\n  /**\\n   * @notice          Return an identical view with a different type.\\n   * @param memView   The view\\n   * @param _newType  The new type\\n   * @return          newView - The new view with the specified type\\n   */\\n  function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n    // then | in the new type\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // shift off the top 5 bytes\\n      newView := or(and(memView, LOW_27_BYTES_MASK), shl(_27_BYTES_IN_BITS, _newType))\\n    }\\n  }\\n\\n  /**\\n   * @notice          Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Unsafe raw pointer construction. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function unsafeBuildUnchecked(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) private pure returns (bytes29 newView) {\\n    uint256 _uint96Bits = 96;\\n    uint256 _emptyBits = 24;\\n\\n    // Cast params to ensure input is of correct length\\n    uint96 len_ = uint96(_len);\\n    uint96 loc_ = uint96(_loc);\\n    require(len_ == _len && loc_ == _loc, \\\"!truncated\\\");\\n\\n    assembly {\\n      // solium-disable-previous-line security/no-inline-assembly\\n      newView := shl(_uint96Bits, _type) // insert type\\n      newView := shl(_uint96Bits, or(newView, loc_)) // insert loc\\n      newView := shl(_emptyBits, or(newView, len_)) // empty bottom 3 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @dev             Instantiate a new memory view. This should generally not be called\\n   *                  directly. Prefer `ref` wherever possible.\\n   * @param _type     The type\\n   * @param _loc      The memory address\\n   * @param _len      The length\\n   * @return          newView - The new view with the specified type, location and length\\n   */\\n  function build(\\n    uint256 _type,\\n    uint256 _loc,\\n    uint256 _len\\n  ) internal pure returns (bytes29 newView) {\\n    uint256 _end = _loc + _len;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      if gt(_end, mload(0x40)) {\\n        _end := 0\\n      }\\n    }\\n    if (_end == 0) {\\n      return NULL;\\n    }\\n    newView = unsafeBuildUnchecked(_type, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Instantiate a memory view from a byte array.\\n   * @dev             Note that due to Solidity memory representation, it is not possible to\\n   *                  implement a deref, as the `bytes` type stores its len in memory.\\n   * @param arr       The byte array\\n   * @param newType   The type\\n   * @return          bytes29 - The memory view\\n   */\\n  function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n    uint256 _len = arr.length;\\n\\n    uint256 _loc;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _loc := add(arr, 0x20) // our view is of the data, not the struct\\n    }\\n\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Return the associated type information.\\n   * @param memView   The memory view\\n   * @return          _type - The type associated with the view\\n   */\\n  function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 216 == 256 - 40\\n      _type := shr(_27_BYTES_IN_BITS, memView) // shift out lower 24 bytes\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return the memory address of the underlying bytes.\\n   * @param memView   The view\\n   * @return          _loc - The memory address\\n   */\\n  function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n      _loc := and(shr(120, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          The number of memory words this memory view occupies, rounded up.\\n   * @param memView   The view\\n   * @return          uint256 - The number of memory words\\n   */\\n  function words(bytes29 memView) internal pure returns (uint256) {\\n    return (uint256(len(memView)) + 31) / 32;\\n  }\\n\\n  /**\\n   * @notice          The in-memory footprint of a fresh copy of the view.\\n   * @param memView   The view\\n   * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n   */\\n  function footprint(bytes29 memView) internal pure returns (uint256) {\\n    return words(memView) * 32;\\n  }\\n\\n  /**\\n   * @notice          The number of bytes of the view.\\n   * @param memView   The view\\n   * @return          _len - The length of the view\\n   */\\n  function len(bytes29 memView) internal pure returns (uint96 _len) {\\n    uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      _len := and(shr(24, memView), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Returns the endpoint of `memView`.\\n   * @param memView   The view\\n   * @return          uint256 - The endpoint of `memView`\\n   */\\n  function end(bytes29 memView) internal pure returns (uint256) {\\n    unchecked {\\n      return loc(memView) + len(memView);\\n    }\\n  }\\n\\n  /**\\n   * @notice          Safe slicing without memory modification.\\n   * @param memView   The view\\n   * @param _index    The start index\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function slice(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    uint256 _loc = loc(memView);\\n\\n    // Ensure it doesn't overrun the view\\n    if (_loc + _index + _len > end(memView)) {\\n      return NULL;\\n    }\\n\\n    _loc = _loc + _index;\\n    return build(newType, _loc, _len);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function prefix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, 0, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n   * @param memView   The view\\n   * @param _len      The length\\n   * @param newType   The new type\\n   * @return          bytes29 - The new view\\n   */\\n  function postfix(\\n    bytes29 memView,\\n    uint256 _len,\\n    uint40 newType\\n  ) internal pure returns (bytes29) {\\n    return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n  }\\n\\n  /**\\n   * @notice          Load up to 32 bytes from the view onto the stack.\\n   * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n   *                  This can be immediately cast to a smaller fixed-length byte array.\\n   *                  To automatically cast to an integer, use `indexUint`.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The 32 byte result\\n   */\\n  function index(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (bytes32 result) {\\n    if (_bytes == 0) {\\n      return bytes32(0);\\n    }\\n    if (_index + _bytes > len(memView)) {\\n      // \\\"TypedMemView/index - Overran the view. Slice is at {loc} with length {len}. Attempted to index at offset {index} with length {slice},\\n      revert TypedMemView__index_overrun(loc(memView), len(memView), _index, uint256(_bytes));\\n    }\\n    if (_bytes > 32) revert TypedMemView__index_indexMoreThan32Bytes();\\n\\n    uint8 bitLength;\\n    unchecked {\\n      bitLength = _bytes * 8;\\n    }\\n    uint256 _loc = loc(memView);\\n    uint256 _mask = leftMask(bitLength);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      result := and(mload(add(_loc, _index)), _mask)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from the view at `_index`.\\n   * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n  }\\n\\n  /**\\n   * @notice          Parse an unsigned integer from LE bytes.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @param _bytes    The bytes\\n   * @return          result - The unsigned integer\\n   */\\n  function indexLEUint(\\n    bytes29 memView,\\n    uint256 _index,\\n    uint8 _bytes\\n  ) internal pure returns (uint256 result) {\\n    return reverseUint256(uint256(index(memView, _index, _bytes)));\\n  }\\n\\n  /**\\n   * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n   *                  following that index.\\n   * @param memView   The view\\n   * @param _index    The index\\n   * @return          address - The address\\n   */\\n  function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n    return address(uint160(indexUint(memView, _index, 20)));\\n  }\\n\\n  /**\\n   * @notice          Return the keccak256 hash of the underlying memory\\n   * @param memView   The view\\n   * @return          digest - The keccak256 hash of the underlying memory\\n   */\\n  function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n    uint256 _loc = loc(memView);\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      digest := keccak256(_loc, _len)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Return true if the underlying memory is equal. Else false.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the underlying memory is equal\\n   */\\n  function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n  }\\n\\n  /**\\n   * @notice          Return false if the underlying memory is equal. Else true.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - False if the underlying memory is equal\\n   */\\n  function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !untypedEqual(left, right);\\n  }\\n\\n  /**\\n   * @notice          Compares type equality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are the same\\n   */\\n  function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n  }\\n\\n  /**\\n   * @notice          Compares type inequality.\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param left      The first view\\n   * @param right     The second view\\n   * @return          bool - True if the types are not the same\\n   */\\n  function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n    return !equal(left, right);\\n  }\\n\\n  /**\\n   * @notice          Copy the view to a location, return an unsafe memory reference\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memView   The view\\n   * @param _newLoc   The new location\\n   * @return          written - the unsafe memory reference\\n   */\\n  function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n    if (isNull(memView)) revert TypedMemView__unsafeCopyTo_nullPointer();\\n    if (isNotValid(memView)) revert TypedMemView__unsafeCopyTo_invalidPointer();\\n\\n    uint256 _len = len(memView);\\n    uint256 _oldLoc = loc(memView);\\n\\n    uint256 ptr;\\n    bool res;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _newLoc) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n\\n      // use the identity precompile to copy\\n      // guaranteed not to fail, so pop the success\\n      res := staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len)\\n    }\\n    if (!res) revert TypedMemView__unsafeCopyTo_identityOOG();\\n    written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n  }\\n\\n  /**\\n   * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n   *                  the new memory\\n   * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n   * @param memView   The view\\n   * @return          ret - The view pointing to the new memory\\n   */\\n  function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    uint256 _len = len(memView);\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n      ret := ptr\\n    }\\n    unchecked {\\n      unsafeCopyTo(memView, ptr + 0x20);\\n    }\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n      mstore(ptr, _len) // write len of new array (in bytes)\\n    }\\n  }\\n\\n  /**\\n   * @notice          Join the views in memory, return an unsafe reference to the memory.\\n   * @dev             Super Dangerous direct memory access.\\n   *\\n   *                  This reference can be overwritten if anything else modifies memory (!!!).\\n   *                  As such it MUST be consumed IMMEDIATELY.\\n   *                  This function is private to prevent unsafe usage by callers.\\n   * @param memViews  The views\\n   * @return          unsafeView - The conjoined view pointing to the new memory\\n   */\\n  function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      let ptr := mload(0x40)\\n      // revert if we're writing in occupied memory\\n      if gt(ptr, _location) {\\n        revert(0x60, 0x20) // empty revert message\\n      }\\n    }\\n\\n    uint256 _offset = 0;\\n    uint256 _len = memViews.length;\\n    for (uint256 i = 0; i < _len; ) {\\n      bytes29 memView = memViews[i];\\n      unchecked {\\n        unsafeCopyTo(memView, _location + _offset);\\n        _offset += len(memView);\\n        ++i;\\n      }\\n    }\\n    unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n  }\\n\\n  /**\\n   * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n   * @param memViews  The views\\n   * @return          bytes32 - The keccak256 digest\\n   */\\n  function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n    return keccak(unsafeJoin(memViews, ptr));\\n  }\\n\\n  /**\\n   * @notice          copies all views, joins them into a new bytearray.\\n   * @param memViews  The views\\n   * @return          ret - The new byte array\\n   */\\n  function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n    uint256 ptr;\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      ptr := mload(0x40) // load unused memory pointer\\n    }\\n\\n    bytes29 _newView;\\n    unchecked {\\n      _newView = unsafeJoin(memViews, ptr + 0x20);\\n    }\\n    uint256 _written = len(_newView);\\n    uint256 _footprint = footprint(_newView);\\n\\n    assembly {\\n      // solhint-disable-previous-line no-inline-assembly\\n      // store the legnth\\n      mstore(ptr, _written)\\n      // new pointer is old + 0x20 + the footprint of the body\\n      mstore(0x40, add(add(ptr, _footprint), 0x20))\\n      ret := ptr\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x17e335daf53b9cd26f13d480b2f1e4f6babf202e39a14089d97b23b1d5d737ff\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103795760003560e01c80639c166c0b116101d1578063cf842be111610102578063dbd8848d116100a0578063e7dc20981161006f578063e7dc209814610aa9578063f0a67eba14610abf578063f3f91e8e14610adf578063fff01c4514610aff57600080fd5b8063dbd8848d14610a29578063dd39f00d14610a49578063de4b054814610a69578063e79457f114610a8957600080fd5b8063d6412ecb116100dc578063d6412ecb146109b3578063d9ef0bee146109c9578063db205635146109e9578063db40452214610a0957600080fd5b8063cf842be114610956578063d1851c9214610976578063d232c2201461099457600080fd5b8063b619d99f1161016f578063c415b95c11610149578063c415b95c146108e1578063c5b350df14610901578063caabc4c214610916578063ce9cec901461093657600080fd5b8063b619d99f14610868578063bfb4c78314610888578063c2fb26a6146108a857600080fd5b8063a42dce80116101ab578063a42dce80146107e8578063a91b8fb814610808578063b1f8100d14610828578063b4cef5461461084857600080fd5b80639c166c0b146107885780639cadce00146107a85780639f645a03146107c857600080fd5b8063622520bb116102ab57806389099717116102495780638e02f759116102235780638e02f759146107125780638efed12714610732578063931c0e78146107525780639a2652db1461076857600080fd5b806389099717146106b45780638c976851146106d45780638da5cb5b146106f457600080fd5b80636eba787f116102855780636eba787f14610649578063715018a614610669578063716907a71461067e57806382443e041461069457600080fd5b8063622520bb146105c5578063634c7bb5146106135780636a42b8f81461063357600080fd5b8063492a96f41161031857806351cff8d9116102f257806351cff8d91461054f578063529100391461056f5780635e21966a1461058557806360f0a5ac146105a557600080fd5b8063492a96f4146104ef5780634cc18e571461050f5780634d6f20131461052f57600080fd5b8063214444331161035457806321444433146104665780632d484bcc1461048a5780632f55b98d146104aa5780633cf52ffb146104da57600080fd5b806254a4fb146103bd57806315fa23bc146104045780631acde6281461041b57600080fd5b366103b857604080513481524760208201527f063d07ee72a7483b8e07ca09054bb686775c5c030f945dde3823a5257a0a93eb910160405180910390a1005b600080fd5b3480156103c957600080fd5b506103ed6103d8366004613748565b60126020526000908152604090205460ff1681565b60405160ff90911681526020015b60405180910390f35b34801561041057600080fd5b50610419610b1f565b005b34801561042757600080fd5b5061045661043636600461377e565b601360209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016103fb565b34801561047257600080fd5b5061047c60105481565b6040519081526020016103fb565b34801561049657600080fd5b506104196104a53660046137a8565b610b89565b3480156104b657600080fd5b506104566104c53660046137d8565b600d6020526000908152604090205460ff1681565b3480156104e657600080fd5b5060025461047c565b3480156104fb57600080fd5b5061047c61050a366004613a2c565b610bc0565b34801561051b57600080fd5b5061041961052a3660046137d8565b610c52565b34801561053b57600080fd5b5061041961054a3660046137d8565b610cb2565b34801561055b57600080fd5b5061041961056a3660046137d8565b610d0e565b34801561057b57600080fd5b5061047c60095481565b34801561059157600080fd5b506104196105a03660046137d8565b610e87565b3480156105b157600080fd5b506104196105c03660046137d8565b610ee3565b3480156105d157600080fd5b506105fb6105e0366004613ad2565b6014602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016103fb565b34801561061f57600080fd5b506006546105fb906001600160a01b031681565b34801561063f57600080fd5b5062093a8061047c565b34801561065557600080fd5b506004546105fb906001600160a01b031681565b34801561067557600080fd5b50610419610f3f565b34801561068a57600080fd5b5061047c600b5481565b3480156106a057600080fd5b506104196106af366004613aed565b610ff3565b3480156106c057600080fd5b506104196106cf3660046137d8565b611028565b3480156106e057600080fd5b506104196106ef366004613b2a565b611084565b34801561070057600080fd5b506000546001600160a01b03166105fb565b34801561071e57600080fd5b5061041961072d366004613bbd565b6112a3565b34801561073e57600080fd5b5061047c61074d366004613be9565b61135a565b34801561075e57600080fd5b5061047c600c5481565b34801561077457600080fd5b50610419610783366004613c24565b611420565b34801561079457600080fd5b506011546105fb906001600160a01b031681565b3480156107b457600080fd5b506008546105fb906001600160a01b031681565b3480156107d457600080fd5b506104196107e33660046137d8565b6114e3565b3480156107f457600080fd5b506104196108033660046137d8565b61153f565b34801561081457600080fd5b50610419610823366004613cbf565b61159b565b34801561083457600080fd5b506104196108433660046137d8565b6115fd565b34801561085457600080fd5b506104196108633660046137a8565b61169b565b34801561087457600080fd5b50610419610883366004613cf2565b6116cf565b34801561089457600080fd5b506104196108a3366004613d98565b61194a565b3480156108b457600080fd5b506008546108cc90600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016103fb565b3480156108ed57600080fd5b506005546105fb906001600160a01b031681565b34801561090d57600080fd5b50610419611998565b34801561092257600080fd5b50610419610931366004613e20565b611a08565b34801561094257600080fd5b50610456610951366004613e77565b611b00565b34801561096257600080fd5b50610419610971366004613f0e565b611c59565b34801561098257600080fd5b506001546001600160a01b03166105fb565b3480156109a057600080fd5b506000546001600160a01b031615610456565b3480156109bf57600080fd5b5061047c600a5481565b3480156109d557600080fd5b506104196109e4366004613f30565b611d08565b3480156109f557600080fd5b50600e546105fb906001600160a01b031681565b348015610a1557600080fd5b50610419610a243660046137a8565b611de1565b348015610a3557600080fd5b50610419610a44366004613d98565b611e15565b348015610a5557600080fd5b50610419610a643660046137d8565b611feb565b348015610a7557600080fd5b506007546105fb906001600160a01b031681565b348015610a9557600080fd5b50610419610aa4366004613f7d565b612047565b348015610ab557600080fd5b5061047c600f5481565b348015610acb57600080fd5b50610419610ada3660046137d8565b612104565b348015610aeb57600080fd5b50610419610afa366004613cf2565b612160565b348015610b0b57600080fd5b5061047c610b1a366004613a2c565b612259565b600e60009054906101000a90046001600160a01b03166001600160a01b03166315fa23bc6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b6f57600080fd5b505af1158015610b83573d6000803e3d6000fd5b50505050565b6000546001600160a01b03163314610bb4576040516311a8a1bb60e31b815260040160405180910390fd5b610bbd81612481565b50565b336000908152600d602052604081205460ff16610bf057604051633cb4b93960e01b815260040160405180910390fd5b600f54601054610c00919061400a565b421015610c2057604051630962070b60e21b815260040160405180910390fd5b610c286124c3565b610c3788888888888888612521565b9050610c436001600355565b42601055979650505050505050565b6000546001600160a01b03163314610c7d576040516311a8a1bb60e31b815260040160405180910390fd5b806001600160a01b038116610ca55760405163b04f8dcf60e01b815260040160405180910390fd5b610cae826125e8565b5050565b6000546001600160a01b03163314610cdd576040516311a8a1bb60e31b815260040160405180910390fd5b806001600160a01b038116610d055760405163b04f8dcf60e01b815260040160405180910390fd5b610cae82612651565b6000546001600160a01b03163314610d39576040516311a8a1bb60e31b815260040160405180910390fd5b610d416124c3565b60006001600160a01b03821615610dbf576040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba919061401d565b610dc1565b475b90506001600160a01b038216610de057610ddb33826126ba565b610e53565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e519190614044565b505b600080516020614e35833981519152828283604051610e7493929190614061565b60405180910390a150610bbd6001600355565b6000546001600160a01b03163314610eb2576040516311a8a1bb60e31b815260040160405180910390fd5b806001600160a01b038116610eda5760405163b04f8dcf60e01b815260040160405180910390fd5b610cae826127d3565b6000546001600160a01b03163314610f0e576040516311a8a1bb60e31b815260040160405180910390fd5b806001600160a01b038116610f365760405163b04f8dcf60e01b815260040160405180910390fd5b610cae8261283c565b6000546001600160a01b03163314610f6a576040516311a8a1bb60e31b815260040160405180910390fd5b62093a8060025442610f7c9190614082565b11610f9a576040516324e0285f60e21b815260040160405180910390fd5b600254600003610fbd57604051630e4b303f60e21b815260040160405180910390fd5b6001546001600160a01b031615610fe7576040516323295ef960e01b815260040160405180910390fd5b610ff160006128cd565b565b6000546001600160a01b0316331461101e576040516311a8a1bb60e31b815260040160405180910390fd5b610cae8282612932565b6000546001600160a01b03163314611053576040516311a8a1bb60e31b815260040160405180910390fd5b806001600160a01b03811661107b5760405163b04f8dcf60e01b815260040160405180910390fd5b610cae826129fa565b60115460009033906001600160a01b031681148015906110dd5750601260008360038111156110b5576110b5614095565b60038111156110c6576110c6614095565b815260208101919091526040016000205460ff1615155b801561113c57506001601260008460038111156110fc576110fc614095565b600381111561110d5761110d614095565b815260208101919091526040016000205461112b919060ff166140ab565b60ff16611139600a436140c4565b11155b1561115a5760405163114c214760e01b815260040160405180910390fd5b6006546040516335d2155560e11b81523360048201819052916001600160a01b031690636ba42aaa906024016020604051808303816000875af11580156111a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c99190614044565b6111e6576040516334985ed360e01b815260040160405180910390fd5b600f546010546111f6919061400a565b42101561121657604051630962070b60e21b815260040160405180910390fd5b61121e6124c3565b61122b8888888888612a63565b506112366001600355565b426010556006546040516317fbade560e21b81526001600160a01b03838116600483015290911690635feeb79490602401600060405180830381600087803b15801561128157600080fd5b505af1158015611295573d6000803e3d6000fd5b505050505050505050505050565b600b54600c546112b3919061400a565b4210156112d357604051630c0e333560e11b815260040160405180910390fd5b6112db6124c3565b600854604051638e02f75960e01b81526004810185905260248101849052604481018390526001600160a01b0390911690638e02f75990606401600060405180830381600087803b15801561132f57600080fd5b505af1158015611343573d6000803e3d6000fd5b505050506113516001600355565b505042600c5550565b336000908152600d602052604081205460ff1661138a57604051633cb4b93960e01b815260040160405180910390fd5b6113926124c3565b6007546040516331f1f3e960e11b81526001600160a01b03909116906363e3e7d2906113c290869060040161424b565b6020604051808303816000875af11580156113e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611405919061401d565b905061141082612b24565b61141a6001600355565b92915050565b336000908152600d602052604090205460ff1661145057604051633cb4b93960e01b815260040160405180910390fd5b600f54601054611460919061400a565b42101561148057604051630962070b60e21b815260040160405180910390fd5b6114886124c3565b60006114978787878787612a63565b9050600080516020614e35833981519152600082476040516114bb93929190614061565b60405180910390a16114cc82612b24565b506114d76001600355565b50504260105550505050565b6000546001600160a01b0316331461150e576040516311a8a1bb60e31b815260040160405180910390fd5b806001600160a01b0381166115365760405163b04f8dcf60e01b815260040160405180910390fd5b610cae82612b88565b6000546001600160a01b0316331461156a576040516311a8a1bb60e31b815260040160405180910390fd5b806001600160a01b0381166115925760405163b04f8dcf60e01b815260040160405180910390fd5b610cae82612bf1565b6000546001600160a01b031633146115c6576040516311a8a1bb60e31b815260040160405180910390fd5b816001600160a01b0381166115ee5760405163b04f8dcf60e01b815260040160405180910390fd5b6115f88383612c5a565b505050565b6000546001600160a01b03163314611628576040516311a8a1bb60e31b815260040160405180910390fd5b6001546001600160a01b038281169116148015611646575060025415155b15611664576040516311bc066560e11b815260040160405180910390fd5b6000546001600160a01b0380831691160361169257604051634a2fb73f60e11b815260040160405180910390fd5b610bbd81612cf3565b6000546001600160a01b031633146116c6576040516311a8a1bb60e31b815260040160405180910390fd5b610bbd81612d41565b60115460029033906001600160a01b0316811480159061172857506012600083600381111561170057611700614095565b600381111561171157611711614095565b815260208101919091526040016000205460ff1615155b8015611787575060016012600084600381111561174757611747614095565b600381111561175857611758614095565b8152602081019190915260400160002054611776919060ff166140ab565b60ff16611784600a436140c4565b11155b156117a55760405163114c214760e01b815260040160405180910390fd5b6006546040516335d2155560e11b81523360048201819052916001600160a01b031690636ba42aaa906024016020604051808303816000875af11580156117f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118149190614044565b611831576040516334985ed360e01b815260040160405180910390fd5b600954600a54611841919061400a565b4210156118615760405163923904d960e01b815260040160405180910390fd5b61186f8a8a600a5487612d83565b600e54604051630892003960e01b81526001600160a01b03909116906308920039906118a9908d908d908d908d908d908d90600401614470565b600060405180830381600087803b1580156118c357600080fd5b505af11580156118d7573d6000803e3d6000fd5b505042600a5550506006546040516317fbade560e21b81526001600160a01b03838116600483015290911690635feeb79490602401600060405180830381600087803b15801561192657600080fd5b505af115801561193a573d6000803e3d6000fd5b5050505050505050505050505050565b336000908152600d602052604090205460ff1661197a57604051633cb4b93960e01b815260040160405180910390fd5b6119826124c3565b61198e84848484612e83565b610b836001600355565b6001546001600160a01b031633146119c3576040516311a7f27160e11b815260040160405180910390fd5b62093a80600254426119d59190614082565b116119f3576040516324e0285f60e21b815260040160405180910390fd5b600154610ff1906001600160a01b03166128cd565b336000908152600d602052604090205460ff16611a3857604051633cb4b93960e01b815260040160405180910390fd5b600954600a54611a48919061400a565b421015611a685760405163923904d960e01b815260040160405180910390fd5b611a706124c3565b611a7e8484600a5485613237565b60085460405163111c183760e01b815260048101869052602481018590526001600160a01b039091169063111c183790604401600060405180830381600087803b158015611acb57600080fd5b505af1158015611adf573d6000803e3d6000fd5b50505050611aec81612b24565b611af66001600355565b505042600a555050565b600e546040805163957908d160e01b8152815160009384936001600160a01b039091169263957908d19260048083019392829003018187875af1158015611b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6f91906144db565b5090506000805b8451811015611c3457600e54855184916001600160a01b03169063f715589a90889085908110611ba857611ba86144ff565b60200260200101516040518263ffffffff1660e01b8152600401611bd8919063ffffffff91909116815260200190565b602060405180830381865afa158015611bf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c19919061401d565b1415915081611c345780611c2c81614515565b915050611b76565b50808015611c515750600f54601054611c4d919061400a565b4210155b949350505050565b600b54600c54611c69919061400a565b421015611c8957604051630c0e333560e11b815260040160405180910390fd5b611c916124c3565b600e5460405163e9812d7160e01b815260048101849052602481018390526001600160a01b039091169063e9812d7190604401600060405180830381600087803b158015611cde57600080fd5b505af1158015611cf2573d6000803e3d6000fd5b50505050611d006001600355565b505042600c55565b336000908152600d602052604090205460ff16611d3857604051633cb4b93960e01b815260040160405180910390fd5b611d406124c3565b600854604051630aec6b9f60e21b81526001600160a01b0390911690632bb1ae7c908490611d72908790600401614574565b6000604051808303818588803b158015611d8b57600080fd5b505af1158015611d9f573d6000803e3d6000fd5b5050505050600080516020614e3583398151915260008347604051611dc693929190614061565b60405180910390a1611dd781612b24565b6115f86001600355565b6000546001600160a01b03163314611e0c576040516311a8a1bb60e31b815260040160405180910390fd5b610bbd81613331565b60115460019033906001600160a01b03168114801590611e6e575060126000836003811115611e4657611e46614095565b6003811115611e5757611e57614095565b815260208101919091526040016000205460ff1615155b8015611ecd5750600160126000846003811115611e8d57611e8d614095565b6003811115611e9e57611e9e614095565b8152602081019190915260400160002054611ebc919060ff166140ab565b60ff16611eca600a436140c4565b11155b15611eeb5760405163114c214760e01b815260040160405180910390fd5b6006546040516335d2155560e11b81523360048201819052916001600160a01b031690636ba42aaa906024016020604051808303816000875af1158015611f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5a9190614044565b611f77576040516334985ed360e01b815260040160405180910390fd5b611f8387878787612e83565b6006546040516317fbade560e21b81526001600160a01b03838116600483015290911690635feeb79490602401600060405180830381600087803b158015611fca57600080fd5b505af1158015611fde573d6000803e3d6000fd5b5050505050505050505050565b6000546001600160a01b03163314612016576040516311a8a1bb60e31b815260040160405180910390fd5b806001600160a01b03811661203e5760405163b04f8dcf60e01b815260040160405180910390fd5b610cae82613373565b336000908152600d602052604090205460ff1661207757604051633cb4b93960e01b815260040160405180910390fd5b61207f6124c3565b60085460405163508a109b60e01b81526001600160a01b039091169063508a109b906120b79089908990899089908990600401614591565b600060405180830381600087803b1580156120d157600080fd5b505af11580156120e5573d6000803e3d6000fd5b505050506120f281612b24565b6120fc6001600355565b505050505050565b6000546001600160a01b0316331461212f576040516311a8a1bb60e31b815260040160405180910390fd5b806001600160a01b0381166121575760405163b04f8dcf60e01b815260040160405180910390fd5b610cae82613401565b336000908152600d602052604090205460ff1661219057604051633cb4b93960e01b815260040160405180910390fd5b600954600a546121a0919061400a565b4210156121c05760405163923904d960e01b815260040160405180910390fd5b6121c86124c3565b6121d68787600a5484612d83565b600e54604051630892003960e01b81526001600160a01b0390911690630892003990612210908a908a908a908a908a908a90600401614470565b600060405180830381600087803b15801561222a57600080fd5b505af115801561223e573d6000803e3d6000fd5b5050505061224c6001600355565b505042600a555050505050565b601154600090819033906001600160a01b031681148015906122b457506012600083600381111561228c5761228c614095565b600381111561229d5761229d614095565b815260208101919091526040016000205460ff1615155b801561231357506001601260008460038111156122d3576122d3614095565b60038111156122e4576122e4614095565b8152602081019190915260400160002054612302919060ff166140ab565b60ff16612310600a436140c4565b11155b156123315760405163114c214760e01b815260040160405180910390fd5b6006546040516335d2155560e11b81523360048201819052916001600160a01b031690636ba42aaa906024016020604051808303816000875af115801561237c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a09190614044565b6123bd576040516334985ed360e01b815260040160405180910390fd5b600f546010546123cd919061400a565b4210156123ed57604051630962070b60e21b815260040160405180910390fd5b6123f56124c3565b6124048b8b8b8b8b8b8b612521565b93506124106001600355565b426010556006546040516317fbade560e21b81526001600160a01b03838116600483015290911690635feeb79490602401600060405180830381600087803b15801561245b57600080fd5b505af115801561246f573d6000803e3d6000fd5b50505050505050979650505050505050565b600f546040805183815260208101929092527f5d93bbdda0d794fed18c39a7b776dc86cbf6ed443032e6baac71373996b85010910160405180910390a1600f55565b60026003540361251a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600355565b60008087815b818163ffffffff1610156125695788888263ffffffff1681811061254d5761254d6144ff565b905060200201358361255f919061400a565b9250600101612527565b50600e5460405163124aa5bd60e21b81526001600160a01b039091169063492a96f49084906125a8908e908e908e908e908e908e908e906004016146d7565b6000604051808303818588803b1580156125c157600080fd5b505af11580156125d5573d6000803e3d6000fd5b50949d9c50505050505050505050505050565b600654604080516001600160a01b03808516825290921660208301527f711d2a81db157c0acede64f080708460163dfaddcd4266c2c609efb458d3e4c0910160405180910390a1600680546001600160a01b0319166001600160a01b0392909216919091179055565b600754604080516001600160a01b03808516825290921660208301527f87539ad41983c0ecff8f321db8edf4dd9e830593562770bdacdda085b83e3bb2910160405180910390a1600780546001600160a01b0319166001600160a01b0392909216919091179055565b8047101561270a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401612511565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612757576040519150601f19603f3d011682016040523d82523d6000602084013e61275c565b606091505b50509050806115f85760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401612511565b600454604080516001600160a01b03808516825290921660208301527f5db4a067a1f787c3269642464a2a1560868b50b0873e7dec83939ae2359f6128910160405180910390a1600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600d602052604090205460ff166128755760405163092a8e7160e41b815260040160405180910390fd5b6001600160a01b0381166000818152600d6020908152604091829020805460ff1916905590519182527f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b91015b60405180910390a150565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316178155600255600180549091169055565b7f2cf410431a72dc4bf0cc68af378641831e086686f41d275c16b60799824af83b82826012600086600381111561296b5761296b614095565b600381111561297c5761297c614095565b8152602081019190915260409081016000205490516129a093929160ff1690614729565b60405180910390a180601260008460038111156129bf576129bf614095565b60038111156129d0576129d0614095565b815260200190815260200160002060006101000a81548160ff021916908360ff1602179055505050565b601154604080516001600160a01b03808516825290921660208301527f17da78d98886c3b8819430ab0693a44c32dfa6426a4db4601ce45bc4bc2385ec910160405180910390a1601180546001600160a01b0319166001600160a01b0392909216919091179055565b60008085815b818163ffffffff161015612aab5786868263ffffffff16818110612a8f57612a8f6144ff565b9050602002013583612aa1919061400a565b9250600101612a69565b50600e5460405163412e12db60e01b81526001600160a01b039091169063412e12db908490612ae6908c908c908c908c908c90600401614763565b6000604051808303818588803b158015612aff57600080fd5b505af1158015612b13573d6000803e3d6000fd5b50949b9a5050505050505050505050565b80600003612b2f5750565b6004546001600160a01b03163303612b5c57600554612b57906001600160a01b0316826126ba565b612b66565b612b6633826126ba565b600080516020614e35833981519152600082476040516128c293929190614061565b600854604080516001600160a01b03808516825290921660208301527f66948d99d8431a8416af2202bc301823b7cdd87beb9bddaa274aedac0611a5fd910160405180910390a1600880546001600160a01b0319166001600160a01b0392909216919091179055565b600554604080516001600160a01b03808516825290921660208301527f649c5e3d0ed183894196148e193af316452b0037e77d2ff0fef23b7dc722bed0910160405180910390a1600580546001600160a01b0319166001600160a01b0392909216919091179055565b63ffffffff81166000818152601460209081526040918290205482516001600160a01b0387811682529091169181019190915280820192909252517ff3f83f3e1df056d9be522e74b3fe84add98c686289a646ae55708277434240929181900360600190a163ffffffff16600090815260146020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b42600255600180546001600160a01b0319166001600160a01b0383169081179091556040517f6ab4d119f23076e8ad491bc65ce85f017fb0591dce08755ba8591059cc51737a90600090a250565b600b546040805183815260208101929092527f2a1ca87adff1a64c5b6edc218dfd6b80208260b240fbc939ea43e07c2764f5ca910160405180910390a1600b55565b600854604080516020810187905290810185905260608101849052600160a01b90910460e01b6001600160e01b03191660808201526000906084016040516020818303038152906040528051906020012090506000612deb83612de58461346a565b906134bd565b600e54604051632516d8ed60e11b81526001600160a01b038084166004830152929350911690634a2db1da90602401602060405180830381865afa158015612e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5b9190614044565b6120fc5760405163af1cef3f60e01b81526001600160a01b0382166004820152602401612511565b63ffffffff8216600090815260136020908152604080832084845290915290205460ff1615612ec5576040516320a413f360e01b815260040160405180910390fd5b63ffffffff82166000908152601460205260409020546001600160a01b0316612f0157604051636617d23960e01b815260040160405180910390fd5b63ffffffff821660008181526013602090815260408083208584529091529020805460ff1916600117905560641480612f41575063ffffffff82166127d8145b15612fd8576000612f54848601866147aa565b63ffffffff8416600090815260146020908152604091829020548351918401519251633f7658fd60e01b81529394506001600160a01b031692633f7658fd92612fa09291600401614850565b600060405180830381600087803b158015612fba57600080fd5b505af1158015612fce573d6000803e3d6000fd5b5050505050610b83565b63ffffffff821661a4b11480612ff6575063ffffffff821662066eed145b1561306b57600061300984860186614981565b63ffffffff841660009081526014602090815260409182902054835191840151838501516060860151608087015160a08801519651632750dce960e21b81529798506001600160a01b0390941696639d4373a496612fa0969591600401614a70565b63ffffffff8216600a1480613087575063ffffffff82166101a4145b156130f257600061309a84860186614b59565b63ffffffff8416600090815260146020908152604091829020548351918401518385015160608601519451637049138f60e01b81529596506001600160a01b0390921694637049138f94612fa0949391600401614c71565b63ffffffff8216610144148061310f575063ffffffff8216610118145b1561317f57600061312284860186614d1a565b63ffffffff8416600090815260146020908152604091829020548351918401518385015160608601516080870151955163e92a492f60e01b81529697506001600160a01b039093169563e92a492f95612fa0959491600401614ddf565b63ffffffff82166089148061319c575063ffffffff821662013881145b1561321e5763ffffffff82166000908152601460205260409081902054905163f953cec760e01b81526001600160a01b039091169063f953cec7906131e79087908790600401614e20565b600060405180830381600087803b15801561320157600080fd5b505af1158015613215573d6000803e3d6000fd5b50505050610b83565b60405163d3f4d63b60e01b815260040160405180910390fd5b600854604080516020810187905290810185905260608101849052600160a01b90910460e01b6001600160e01b0319166080820152600090608401604051602081830303815290604052805190602001209050600061329983612de58461346a565b600854604051632516d8ed60e11b81526001600160a01b038084166004830152929350911690634a2db1da90602401602060405180830381865afa1580156132e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133099190614044565b6120fc57604051634810638b60e01b81526001600160a01b0382166004820152602401612511565b6009546040805183815260208101929092527f289d6927dc5ba66abb928c5be9d3aecd2baf7c8e89f1faec6a791b8b21589a5d910160405180910390a1600955565b6001600160a01b0381166000908152600d602052604090205460ff16156133ad57604051639e9dd41d60e01b815260040160405180910390fd5b6001600160a01b0381166000818152600d6020908152604091829020805460ff1916600117905590519182527f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c591016128c2565b600e54604080516001600160a01b03808516825290921660208301527f3124eaf4f16c6ddd81951200c6d8f65d5800753bef06584bd672c8b22c76b487910160405180910390a1600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b60008060006134cc85856134e1565b915091506134d981613526565b509392505050565b60008082516041036135175760208301516040840151606085015160001a61350b87828585613670565b9450945050505061351f565b506000905060025b9250929050565b600081600481111561353a5761353a614095565b036135425750565b600181600481111561355657613556614095565b036135a35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401612511565b60028160048111156135b7576135b7614095565b036136045760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401612511565b600381600481111561361857613618614095565b03610bbd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401612511565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156136a7575060009050600361372b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156136fb573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166137245760006001925092505061372b565b9150600090505b94509492505050565b80356004811061374357600080fd5b919050565b60006020828403121561375a57600080fd5b61376382613734565b9392505050565b803563ffffffff8116811461374357600080fd5b6000806040838503121561379157600080fd5b61379a8361376a565b946020939093013593505050565b6000602082840312156137ba57600080fd5b5035919050565b80356001600160a01b038116811461374357600080fd5b6000602082840312156137ea57600080fd5b613763826137c1565b60008083601f84011261380557600080fd5b5081356001600160401b0381111561381c57600080fd5b6020830191508360208260051b850101111561351f57600080fd5b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b038111828210171561386f5761386f613837565b60405290565b60405160c081016001600160401b038111828210171561386f5761386f613837565b604051608081016001600160401b038111828210171561386f5761386f613837565b60405160a081016001600160401b038111828210171561386f5761386f613837565b604051601f8201601f191681016001600160401b038111828210171561390357613903613837565b604052919050565b60006001600160401b0382111561392457613924613837565b5060051b60200190565b600082601f83011261393f57600080fd5b81356001600160401b0381111561395857613958613837565b61396b601f8201601f19166020016138db565b81815284602083860101111561398057600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126139ae57600080fd5b813560206139c36139be8361390b565b6138db565b82815260059290921b840181019181810190868411156139e257600080fd5b8286015b84811015613a215780356001600160401b03811115613a055760008081fd5b613a138986838b010161392e565b8452509183019183016139e6565b509695505050505050565b600080600080600080600060a0888a031215613a4757600080fd5b87356001600160401b0380821115613a5e57600080fd5b613a6a8b838c016137f3565b909950975060208a0135915080821115613a8357600080fd5b613a8f8b838c016137f3565b909750955060408a0135915080821115613aa857600080fd5b50613ab58a828b0161399d565b935050606088013591506080880135905092959891949750929550565b600060208284031215613ae457600080fd5b6137638261376a565b60008060408385031215613b0057600080fd5b613b0983613734565b9150602083013560ff81168114613b1f57600080fd5b809150509250929050565b600080600080600060608688031215613b4257600080fd5b85356001600160401b0380821115613b5957600080fd5b613b6589838a016137f3565b90975095506020880135915080821115613b7e57600080fd5b613b8a89838a016137f3565b90955093506040880135915080821115613ba357600080fd5b50613bb08882890161399d565b9150509295509295909350565b600080600060608486031215613bd257600080fd5b505081359360208301359350604090920135919050565b60008060408385031215613bfc57600080fd5b82356001600160401b03811115613c1257600080fd5b830160a0818603121561379a57600080fd5b60008060008060008060808789031215613c3d57600080fd5b86356001600160401b0380821115613c5457600080fd5b613c608a838b016137f3565b90985096506020890135915080821115613c7957600080fd5b613c858a838b016137f3565b90965094506040890135915080821115613c9e57600080fd5b50613cab89828a0161399d565b925050606087013590509295509295509295565b60008060408385031215613cd257600080fd5b613cdb836137c1565b9150613ce96020840161376a565b90509250929050565b600080600080600080600060a0888a031215613d0d57600080fd5b873596506020880135955060408801356001600160401b0380821115613d3257600080fd5b613d3e8b838c016137f3565b909750955060608a0135915080821115613d5757600080fd5b613d638b838c016137f3565b909550935060808a0135915080821115613d7c57600080fd5b50613d898a828b0161392e565b91505092959891949750929550565b60008060008060608587031215613dae57600080fd5b84356001600160401b0380821115613dc557600080fd5b818701915087601f830112613dd957600080fd5b813581811115613de857600080fd5b886020828501011115613dfa57600080fd5b602092830196509450613e10918701905061376a565b9396929550929360400135925050565b60008060008060808587031215613e3657600080fd5b843593506020850135925060408501356001600160401b03811115613e5a57600080fd5b613e668782880161392e565b949793965093946060013593505050565b60006020808385031215613e8a57600080fd5b82356001600160401b03811115613ea057600080fd5b8301601f81018513613eb157600080fd5b8035613ebf6139be8261390b565b81815260059190911b82018301908381019087831115613ede57600080fd5b928401925b82841015613f0357613ef48461376a565b82529284019290840190613ee3565b979650505050505050565b60008060408385031215613f2157600080fd5b50508035926020909101359150565b600080600060608486031215613f4557600080fd5b83356001600160401b03811115613f5b57600080fd5b613f678682870161392e565b9660208601359650604090950135949350505050565b6000806000806000806104808789031215613f9757600080fd5b86356001600160401b03811115613fad57600080fd5b613fb989828a016137f3565b90975095505060208701359350610440870188811115613fd857600080fd5b9598949750929560408101953594610460909101359350915050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561141a5761141a613ff4565b60006020828403121561402f57600080fd5b5051919050565b8015158114610bbd57600080fd5b60006020828403121561405657600080fd5b815161376381614036565b6001600160a01b039390931683526020830191909152604082015260600190565b8181038181111561141a5761141a613ff4565b634e487b7160e01b600052602160045260246000fd5b60ff828116828216039081111561141a5761141a613ff4565b6000826140e157634e487b7160e01b600052601260045260246000fd5b500690565b803561374381614036565b6000808335601e1984360301811261410857600080fd5b83016020810192503590506001600160401b0381111561412757600080fd5b80360382131561351f57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e1984360301811261417657600080fd5b83016020810192503590506001600160401b0381111561419557600080fd5b8060051b360382131561351f57600080fd5b8183526000602080850194508260005b858110156141e3576001600160a01b036141d0836137c1565b16875295820195908201906001016141b7565b509495945050505050565b81835260006020808501808196508560051b810191508460005b8781101561423e57828403895261421f82886140f1565b61422a868284614136565b9a87019a9550505090840190600101614208565b5091979650505050505050565b602081526000823561019e1984360301811261426657600080fd5b60a06020840152830161428960c0840161427f8361376a565b63ffffffff169052565b6142956020820161376a565b63ffffffff1660e08401526142ac6040820161376a565b6101006142c08186018363ffffffff169052565b6142cc606084016137c1565b91506101206142e5818701846001600160a01b03169052565b6142f1608085016137c1565b925061014061430a818801856001600160a01b03169052565b61431660a086016140e6565b93506101606143288189018615159052565b61433560c08701876140f1565b95506101a061018081818c01526143516102608c018985614136565b975060e0890135828c0152614367878a016137c1565b6001600160a01b03166101c08c0152948801356101e08b0152505090850135610200880152840135610220870152830135610240860152506143ac602086018661415f565b9250601f19808684030160408701526143c68385846141a7565b93506143d5604088018861415f565b93509150808685030160608701526143ee8484846141ee565b93506143fc606088016137c1565b6001600160a01b0381166080880152925061441a60808801886140f1565b93509150808685030160a087015250614434838383614136565b9695505050505050565b81835260006001600160fb1b0383111561445757600080fd5b8260051b80836020870137939093016020019392505050565b8681526000602087818401526080604084015261449160808401878961443e565b83810360608501528481528590820160005b868110156144cc5763ffffffff6144b98461376a565b16825291830191908301906001016144a3565b509a9950505050505050505050565b600080604083850312156144ee57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052603260045260246000fd5b60006001820161452757614527613ff4565b5060010190565b6000815180845260005b8181101561455457602081850181015186830182015201614538565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000613763602083018461452e565b6104008183375050565b6104608082528101859052600061048080830190600588901b8401018883805b8a8110156146275786840361047f190185528235368d900361043e190181126145d8578283fd5b8c016104406145e782806140f1565b8288526145f78389018284614136565b925050506020610400818401828901376104209283013596909201959095529485019492909201916001016145b1565b50505080925050508460208301526146426040830185614587565b826104408301529695505050505050565b8183526000602080850194508260005b858110156141e3576001600160a01b0361467c836137c1565b1687529582019590820190600101614663565b600081518084526020808501808196508360051b8101915082860160005b8581101561423e5782840389526146c584835161452e565b988501989350908401906001016146ad565b60a0815260006146eb60a08301898b614653565b82810360208401526146fe81888a61443e565b90508281036040840152614712818761468f565b606084019590955250506080015295945050505050565b606081016004851061474b57634e487b7160e01b600052602160045260246000fd5b93815260ff9283166020820152911660409091015290565b606081526000614777606083018789614653565b828103602084015261478a81868861443e565b9050828103604084015261479e818561468f565b98975050505050505050565b6000602082840312156147bc57600080fd5b81356001600160401b03808211156147d357600080fd5b90830190604082860312156147e757600080fd5b60405160408101818110838211171561480257614802613837565b60405282358281111561481457600080fd5b6148208782860161392e565b82525060208301358281111561483557600080fd5b6148418782860161392e565b60208301525095945050505050565b604081526000614863604083018561452e565b8281036020840152614875818561452e565b95945050505050565b80356001600160401b038116811461374357600080fd5b600082601f8301126148a657600080fd5b813560206148b66139be8361390b565b82815260059290921b840181019181810190868411156148d557600080fd5b8286015b84811015613a2157803583529183019183016148d9565b600060e0828403121561490257600080fd5b61490a61384d565b9050614915826137c1565b8152614923602083016137c1565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c08201356001600160401b0381111561496957600080fd5b6149758482850161392e565b60c08301525092915050565b60006020828403121561499357600080fd5b81356001600160401b03808211156149aa57600080fd5b9083019060c082860312156149be57600080fd5b6149c6613875565b6149cf8361487e565b815260208301356020820152604083013560408201526060830135828111156149f757600080fd5b614a0387828601614895565b6060830152506080830135608082015260a083013582811115614a2557600080fd5b614a31878286016148f0565b60a08301525095945050505050565b600081518084526020808501945080840160005b838110156141e357815187529582019590820190600101614a54565b6001600160401b038716815285602082015284604082015260c060608201526000614a9e60c0830186614a40565b84608084015282810360a084015260018060a01b038085511682528060208601511660208301525060408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160e060c0830152614b0760e083018261452e565b9a9950505050505050505050565b600060808284031215614b2757600080fd5b614b2f613897565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b600060208284031215614b6b57600080fd5b81356001600160401b0380821115614b8257600080fd5b9083019060e08286031215614b9657600080fd5b614b9e613897565b823582811115614bad57600080fd5b830160c08188031215614bbf57600080fd5b614bc7613875565b81358152614bd7602083016137c1565b6020820152614be8604083016137c1565b6040820152606082013560608201526080820135608082015260a082013584811115614c1357600080fd5b614c1f8982850161392e565b60a08301525082525060208381013590820152614c3f8660408501614b15565b604082015260c083013582811115614c5657600080fd5b614c628782860161399d565b60608301525095945050505050565b60e080825285519082015260208501516001600160a01b039081166101008301526040860151166101208201526060850151610140820152608085015161016082015260a085015160c0610180830152600090614cd26101a084018261452e565b9050856020840152614d086040840186805182526020810151602083015260408101516040830152606081015160608301525050565b82810360c0840152613f03818561468f565b600060208284031215614d2c57600080fd5b81356001600160401b0380821115614d4357600080fd5b9083019060a08286031215614d5757600080fd5b614d5f6138b9565b614d688361376a565b815260208301356020820152604083013561ffff81168114614d8957600080fd5b6040820152606083013582811115614da057600080fd5b614dac8782860161392e565b606083015250608083013582811115614dc457600080fd5b614dd087828601614895565b60808301525095945050505050565b63ffffffff8616815284602082015261ffff8416604082015260a060608201526000614e0e60a083018561452e565b828103608084015261479e8185614a40565b602081526000611c5160208301848661413656fe6e5f7db1c3e1839c6d5eb59148d9042f8cdf3afe518b213142d5a68db640e90ca264697066735822122057b277f724e17151198b25441ac7ed8259d889d32c1a0094ad6e726cb9d47d3e64736f6c63430008110033",
  "devdoc": {
    "author": "Connext Labs, Inc.",
    "events": {
      "AutonolasChanged(address,address)": {
        "params": {
          "previous": "Old Autonolas address in the contract",
          "updated": "New Autonolas address in the contract"
        }
      },
      "AutonolasPriorityChanged(uint8,uint8,uint8)": {
        "params": {
          "previous": "Old Autonolas priority in the contract",
          "updated": "New Autonolas priority in the contract"
        }
      },
      "HubConnectorChanged(address,address,uint32)": {
        "params": {
          "chain": "Chain ID of the hub connector",
          "hubConnector": "New hub connector address",
          "oldHubConnector": "Old hub connector address"
        }
      },
      "PropagateCooldownChanged(uint256,uint256)": {
        "params": {
          "oldPropagateCooldown": "Old cooldown period",
          "propagateCooldown": "New cooldown period"
        }
      },
      "RootManagerChanged(address,address)": {
        "params": {
          "oldRootManager": "Old root manager address in the contract",
          "rootManager": "New root manager address in the contract"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "addRelayer(address)": {
        "params": {
          "_relayer": "- Relayer address to add."
        }
      },
      "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),uint256)": {
        "params": {
          "_args": "- ExecuteArgs arguments.",
          "_fee": "- Fee to be paid to relayer."
        },
        "returns": {
          "transferId": "- The transfer ID of the crosschain transfer. Should match the xcall's transfer ID in order for reconciliation to occur."
        }
      },
      "finalize(bytes32,uint256,uint256)": {
        "params": {
          "_endOfDispute": "The block in which the dispute period for proposed root finalizes",
          "_proposedAggregateRoot": "The aggregate root currently proposed",
          "_rootTimestamp": "Block.timestamp at which the root was finalized in the root manager contract."
        }
      },
      "finalizeAndPropagate(address[],uint256[],bytes[],bytes32,uint256)": {
        "params": {
          "_connectors": "Array of connectors: should match exactly the array of `connectors` in storage;",
          "_encodedData": "Array of encodedData: extra params for each AMB if required",
          "_endOfDispute": "The timestamp when the dispute period ends.",
          "_fees": "Array of fees in native token for an AMB if required",
          "_proposedAggregateRoot": "The aggregate root to be proposed."
        }
      },
      "finalizeAndPropagateKeep3r(address[],uint256[],bytes[],bytes32,uint256)": {
        "params": {
          "_connectors": "Array of connectors: should match exactly the array of `connectors` in storage;",
          "_encodedData": "Array of encodedData: extra params for each AMB if required",
          "_endOfDispute": "The timestamp when the dispute period ends.",
          "_fees": "Array of fees in native token for an AMB if required",
          "_proposedAggregateRoot": "The aggregate root to be proposed."
        }
      },
      "finalizeOnRoot(bytes32,uint256)": {
        "params": {
          "_endOfDispute": "The block in which the dispute period for proposed root finalizes",
          "_proposedAggregateRoot": "The aggregate root currently proposed"
        }
      },
      "processFromRoot(bytes,uint32,bytes32)": {
        "params": {
          "_encodedData": "Array of encoded data for HubConnector function.",
          "_fromChain": "Chain ID of the chain the message is coming from.",
          "_l2Hash": "Hash of the message on the L2 chain."
        }
      },
      "processFromRootKeep3r(bytes,uint32,bytes32)": {
        "params": {
          "_encodedData": "Array of encoded data for HubConnector function.",
          "_fromChain": "Chain ID of the chain the message is coming from.",
          "_l2Hash": "Hash of the message on the L2 chain."
        }
      },
      "propagate(address[],uint256[],bytes[],uint256)": {
        "params": {
          "_connectors": "Array of connectors: should match exactly the array of `connectors` in storage; used here to reduce gas costs, and keep them static regardless of number of supported domains.",
          "_encodedData": "Array of encodedData: extra params for each AMB if required",
          "_messageFees": "Array of fees in native token for an AMB if required",
          "_relayerFee": "Fee to be paid to relayer"
        }
      },
      "propagateKeep3r(address[],uint256[],bytes[])": {
        "params": {
          "_connectors": "Array of connectors: should match exactly the array of `connectors` in storage; used here to reduce gas costs, and keep them static regardless of number of supported domains.",
          "_encodedData": "Array of encodedData: extra params for each AMB if required",
          "_messageFees": "Array of fees in native token for an AMB if required"
        }
      },
      "propagateWorkable(uint32[])": {
        "returns": {
          "_0": "True if the RootManager has a workable root."
        }
      },
      "proposeAggregateRoot(bytes32,uint256,bytes,uint256)": {
        "details": "_rootTimestamp is required for off-chain agents to be able to know which root they should fetch from the root manager contract                     in order to compare it with the one being proposed. The off-chain agents should also ensure the proposed root is                     not an old one.",
        "params": {
          "_aggregateRoot": "The aggregate root to propose.",
          "_fee": "- Fee to be paid to relayer.",
          "_rootTimestamp": "Block.timestamp at which the root was finalized in the root manager contract.",
          "_signature": "Signature from the approved proposer."
        }
      },
      "proposeAggregateRootOnRoot(uint256,bytes32,bytes32[],uint32[],bytes)": {
        "details": "This contract will validate the signer is a whitelisted proposer on the RootManager, and then call `propose` itself. This means this contract must *also* be whitelisted as a proposer on the RootManager.",
        "params": {
          "_aggregateRoot": "The aggregate root to be proposed.",
          "_domains": "The domains of the snapshots to be proposed.",
          "_signature": "Signature from the approved proposer.",
          "_snapshotId": "The snapshot id of the root to be proposed.",
          "_snapshotsRoots": "The roots of the connectors included in the aggregate."
        }
      },
      "proposeAggregateRootOnRootKeep3r(uint256,bytes32,bytes32[],uint32[],bytes)": {
        "details": "This contract will validate the signer is a whitelisted proposer on the RootManager, and then call `propose` itself. This means this contract must *also* be whitelisted as a proposer on the RootManager.",
        "params": {
          "_aggregateRoot": "The aggregate root to be proposed.",
          "_domains": "The domains of the snapshots to be proposed.",
          "_snapshotId": "The snapshot id of the root to be proposed.",
          "_snapshotsRoots": "The roots of the connectors included in the aggregate."
        }
      },
      "proveAndProcess((bytes,bytes32[32],uint256)[],bytes32,bytes32[32],uint256,uint256)": {
        "params": {
          "_aggregateIndex": "Index of the inbound root in the aggregator's merkle tree in the hub.",
          "_aggregatePath": "Merkle path of inclusion for the inbound root.",
          "_aggregateRoot": "The target aggregate root we want to prove inclusion for. This root must have already been delivered to this spoke connector contract and surpassed the validation period.",
          "_fee": "- Fee to be paid to relayer.",
          "_proofs": "Batch of Proofs containing messages for proving/processing."
        }
      },
      "removeRelayer(address)": {
        "params": {
          "_relayer": "- Relayer address to remove."
        }
      },
      "send(bytes,uint256,uint256)": {
        "params": {
          "_encodedData": "- Data to be sent to Connext SpokeConnector",
          "_messageFee": "- Fee to be paid to the SpokeConnector for connected AMBs that require fees.",
          "_relayerFee": "- Fee to be paid to relayer."
        }
      },
      "setAutonolas(address)": {
        "params": {
          "_autonolas": "- New Autonolas contract address."
        }
      },
      "setAutonolasPriority(uint8,uint8)": {
        "params": {
          "_autonolasPriority": "- New Autonolas priority."
        }
      },
      "setConnext(address)": {
        "params": {
          "_connext": "- New Connext address."
        }
      },
      "setFeeCollector(address)": {
        "params": {
          "_feeCollector": "- New Gelato Fee Collector address."
        }
      },
      "setFinalizeCooldown(uint256)": {
        "params": {
          "_finalizeCooldown": "The new cooldown in seconds."
        }
      },
      "setGelatoRelayer(address)": {
        "params": {
          "_gelatoRelayer": "- New Gelato relayer address."
        }
      },
      "setHubConnector(address,uint32)": {
        "params": {
          "_hubConnector": "The address of the new HubConnector on this domain."
        }
      },
      "setKeep3r(address)": {
        "params": {
          "_keep3r": "- New Keep3r contract address."
        }
      },
      "setPropagateCooldown(uint256)": {
        "params": {
          "_propagateCooldown": "The new cooldown in seconds."
        }
      },
      "setProposeAggregateRootCooldown(uint256)": {
        "params": {
          "_proposeCooldown": "The new cooldown in seconds."
        }
      },
      "setRootManager(address)": {
        "params": {
          "_rootManager": "The address of the new RootManager on this domain."
        }
      },
      "setSpokeConnector(address)": {
        "params": {
          "_spokeConnector": "- New SpokeConnector address."
        }
      }
    },
    "stateVariables": {
      "autonolas": {
        "details": "Special consideration for Autonolas keeper"
      },
      "autonolasPriority": {
        "details": "number between 0 and 10 to determine priority that Autonolas has for jobs. 0 is disabled, 10 will work for every block."
      }
    },
    "title": "RelayerProxyHub",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AutonolasChanged(address,address)": {
        "notice": "Emitted when Autonolas address is updated by admin"
      },
      "AutonolasPriorityChanged(uint8,uint8,uint8)": {
        "notice": "Emitted when Autonolas priority is updated by admin"
      },
      "ConnextChanged(address,address)": {
        "notice": "Emitted when Connext contract address is updated by admin"
      },
      "FeeCollectorChanged(address,address)": {
        "notice": "Emitted when FeeCollectorChanged address is updated by admin"
      },
      "FinalizeCooldownChanged(uint256,uint256)": {
        "notice": "Emitted when the cooldown period for finalize is updated"
      },
      "FundsDeducted(address,uint256,uint256)": {
        "notice": "Emitted when funds removed from the contract by admin"
      },
      "FundsReceived(uint256,uint256)": {
        "notice": "Emitted when funds added to the contract"
      },
      "GelatoRelayerChanged(address,address)": {
        "notice": "Emitted when GelatoRelayer address is updated by admin"
      },
      "HubConnectorChanged(address,address,uint32)": {
        "notice": "Emitted when a new hub connector is updated"
      },
      "Keep3rChanged(address,address)": {
        "notice": "Emitted when Keep3r address is updated by admin"
      },
      "PropagateCooldownChanged(uint256,uint256)": {
        "notice": "Emitted when the cooldown period for propagate is updated"
      },
      "ProposeAggregateRootCooldownChanged(uint256,uint256)": {
        "notice": "Emitted when the cooldown period for proposeAggregateRoot is updated"
      },
      "RelayerAdded(address)": {
        "notice": "Emitted when a new relayer is allowlisted by admin"
      },
      "RelayerRemoved(address)": {
        "notice": "Emitted when a relayer is removed from allowlist by admin"
      },
      "RootManagerChanged(address,address)": {
        "notice": "Emitted when the root manager is updated by admin"
      },
      "SpokeConnectorChanged(address,address)": {
        "notice": "Emitted when SpokeConnector contract address is updated by admin"
      }
    },
    "kind": "user",
    "methods": {
      "acceptProposedOwner()": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "addRelayer(address)": {
        "notice": "Adds a relayer address to the allowed relayers mapping."
      },
      "autonolas()": {
        "notice": "Address of Autonolas keeper contract"
      },
      "autonolasPriority(uint8)": {
        "notice": "Mapping of Autonolas priority function to priority number"
      },
      "constructor": {
        "notice": "Creates a new RelayerProxyHub instance."
      },
      "delay()": {
        "notice": "Returns the delay period before a new owner can be accepted."
      },
      "execute(((uint32,uint32,uint32,address,address,bool,bytes,uint256,address,uint256,uint256,uint256,bytes32),address[],bytes[],address,bytes),uint256)": {
        "notice": "Wraps the call to execute() on Connext and pays either the caller or hardcoded relayer from this contract's balance for completing the transaction."
      },
      "finalize(bytes32,uint256,uint256)": {
        "notice": "Wraps the `finalize` function on root manager"
      },
      "finalizeAndPropagate(address[],uint256[],bytes[],bytes32,uint256)": {
        "notice": "Wraps the `finalizeAndPropagate` function"
      },
      "finalizeAndPropagateKeep3r(address[],uint256[],bytes[],bytes32,uint256)": {
        "notice": "Wraps the `finalizeAndPropagate` function"
      },
      "finalizeCooldown()": {
        "notice": "Delay for the finalize function"
      },
      "finalizeOnRoot(bytes32,uint256)": {
        "notice": "Wraps the `finalize` function on root manager"
      },
      "hubConnectors(uint32)": {
        "notice": "Mapping of identifier to hub connector contract address"
      },
      "lastFinalizeAt()": {
        "notice": "Timestamp of the last time the finalize job was worked."
      },
      "lastPropagateAt()": {
        "notice": "Timestamp of the last time the propagate job was worked."
      },
      "lastProposeAggregateRootAt()": {
        "notice": "Timestamp of when last aggregate was proposed"
      },
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "processFromRoot(bytes,uint32,bytes32)": {
        "notice": "Wraps the call to processFromRoot() on RootManager. Only allowed to be called by registered relayer."
      },
      "processFromRootKeep3r(bytes,uint32,bytes32)": {
        "notice": "Wraps the call to processFromRoot() on RootManager and pays with Keep3r credits. Only allowed to be called by registered Keep3r."
      },
      "processedRootMessages(uint32,bytes32)": {
        "notice": "Mapping of identifier to root message hash to boolean indicating if the message has been processed"
      },
      "propagate(address[],uint256[],bytes[],uint256)": {
        "notice": "Wraps the call to propagate() on RootManager and pays either the caller or hardcoded relayer from this contract's balance for completing the transaction."
      },
      "propagateCooldown()": {
        "notice": "Delay for the propagate function"
      },
      "propagateKeep3r(address[],uint256[],bytes[])": {
        "notice": "Wraps the call to propagate() on RootManager and pays with Keep3r credits. Only allowed to be called by registered Keep3r."
      },
      "propagateWorkable(uint32[])": {
        "notice": "Checks if the RootManager has a workable root. Calls the rootManager's dequeue() function to check if the RootManager has a sendable root. This is an expensive function so it should only be called off-chain to determine if the relayer should call the propagate() function."
      },
      "proposeAggregateRoot(bytes32,uint256,bytes,uint256)": {
        "notice": "Wraps the call to proposeAggregateRoot() on SpokeConnector and pays either the caller or hardcoded relayer"
      },
      "proposeAggregateRootCooldown()": {
        "notice": "Delay for the proposeAggregateRoot function"
      },
      "proposeAggregateRootOnRoot(uint256,bytes32,bytes32[],uint32[],bytes)": {
        "notice": "Wraps the `proposeAggregateRoot` function of RootManager"
      },
      "proposeAggregateRootOnRootKeep3r(uint256,bytes32,bytes32[],uint32[],bytes)": {
        "notice": "Wraps the `proposeAggregateRoot` function of RootManager"
      },
      "proposeNewOwner(address)": {
        "notice": "Sets the timestamp for an owner to be proposed, and sets the newly proposed owner as step 1 in a 2-step process"
      },
      "proposed()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proposedTimestamp()": {
        "notice": "Returns the address of the proposed owner."
      },
      "proveAndProcess((bytes,bytes32[32],uint256)[],bytes32,bytes32[32],uint256,uint256)": {
        "notice": "Wraps the call to proveAndProcess() on SpokeConnector and pays either the caller or hardcoded relayer from this contract's balance for completing the transaction."
      },
      "removeRelayer(address)": {
        "notice": "Removes a relayer address from the allowed relayers mapping."
      },
      "renounceOwnership()": {
        "notice": "Renounces ownership of the contract after a delay"
      },
      "renounced()": {
        "notice": "Indicates if the ownership has been renounced() by checking if current owner is address(0)"
      },
      "rootManager()": {
        "notice": "Address of the RootManager contract"
      },
      "send(bytes,uint256,uint256)": {
        "notice": "Wraps the call to send() on SpokeConnector and pays either the caller or hardcoded relayer from this contract's balance for completing the transaction."
      },
      "sendRootToHubSpoke()": {
        "notice": "Wraps the `sendRootToHubSpoke` function of RootManager"
      },
      "setAutonolas(address)": {
        "notice": "Updates the Autonolas contract address on this contract."
      },
      "setAutonolasPriority(uint8,uint8)": {
        "notice": "Updates the Autonolas priority on this contract."
      },
      "setConnext(address)": {
        "notice": "Updates the Connext address on this contract."
      },
      "setFeeCollector(address)": {
        "notice": "Updates the Gelato Fee Collector address on this contract."
      },
      "setFinalizeCooldown(uint256)": {
        "notice": "Updates the finalize cooldown."
      },
      "setGelatoRelayer(address)": {
        "notice": "Updates the Gelato relayer address on this contract."
      },
      "setHubConnector(address,uint32)": {
        "notice": "Updates the HubConnector address."
      },
      "setKeep3r(address)": {
        "notice": "Updates the Keep3r contract address on this contract."
      },
      "setPropagateCooldown(uint256)": {
        "notice": "Updates the propagate cooldown."
      },
      "setProposeAggregateRootCooldown(uint256)": {
        "notice": "Updates the propose cooldown."
      },
      "setRootManager(address)": {
        "notice": "Updates the RootManager address."
      },
      "setSpokeConnector(address)": {
        "notice": "Updates the SpokeConnector address on this contract."
      },
      "withdraw(address)": {
        "notice": "Withdraws tokens stored on this contract to msg.sender."
      }
    },
    "notice": "This is a temporary contract that wraps the Connext RootManager's propagate() function so that it can be called by Gelato's legacy relayer network. The contract stores native assets and pays them to the relayer on function call.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29053,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29055,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "_proposed",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 29057,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "_proposedOwnershipTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1732,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "_status",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4681,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "gelatoRelayer",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4683,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "feeCollector",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4686,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "keep3r",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IKeep3rV2)4669"
      },
      {
        "astId": 4689,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "connext",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IConnext)8001"
      },
      {
        "astId": 4692,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "spokeConnector",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ISpokeConnector)4656"
      },
      {
        "astId": 4694,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "domain",
        "offset": 20,
        "slot": "8",
        "type": "t_uint32"
      },
      {
        "astId": 4697,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "proposeAggregateRootCooldown",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4700,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "lastProposeAggregateRootAt",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4703,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "finalizeCooldown",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4706,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "lastFinalizeAt",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4710,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "allowedRelayer",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5863,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "rootManager",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IRootManager)5731"
      },
      {
        "astId": 5866,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "propagateCooldown",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 5869,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "lastPropagateAt",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5872,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "autonolas",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 5883,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "autonolasPriority",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_enum(AutonolasPriorityFunction)5877,t_uint8)"
      },
      {
        "astId": 5890,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "processedRootMessages",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint32,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 5895,
        "contract": "contracts/core/connext/helpers/RelayerProxyHub.sol:RelayerProxyHub",
        "label": "hubConnectors",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConnext)8001": {
        "encoding": "inplace",
        "label": "contract IConnext",
        "numberOfBytes": "20"
      },
      "t_contract(IKeep3rV2)4669": {
        "encoding": "inplace",
        "label": "contract IKeep3rV2",
        "numberOfBytes": "20"
      },
      "t_contract(IRootManager)5731": {
        "encoding": "inplace",
        "label": "contract IRootManager",
        "numberOfBytes": "20"
      },
      "t_contract(ISpokeConnector)4656": {
        "encoding": "inplace",
        "label": "contract ISpokeConnector",
        "numberOfBytes": "20"
      },
      "t_enum(AutonolasPriorityFunction)5877": {
        "encoding": "inplace",
        "label": "enum RelayerProxyHub.AutonolasPriorityFunction",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_enum(AutonolasPriorityFunction)5877,t_uint8)": {
        "encoding": "mapping",
        "key": "t_enum(AutonolasPriorityFunction)5877",
        "label": "mapping(enum RelayerProxyHub.AutonolasPriorityFunction => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}